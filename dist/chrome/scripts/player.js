(function (console, $hx_exports) { "use strict";
$hx_exports.tannus = $hx_exports.tannus || {};
$hx_exports.tannus.sys = $hx_exports.tannus.sys || {};
;$hx_exports.tannus.media = $hx_exports.tannus.media || {};
;$hx_exports.tannus.ds = $hx_exports.tannus.ds || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) return this.r.m[n]; else throw new js__$Boot_HaxeError("EReg::matched");
	}
	,matchedPos: function() {
		if(this.r.m == null) throw new js__$Boot_HaxeError("No string matched");
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) len = -1;
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0?s:HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) this.r.s = s;
			return b;
		} else {
			var b1 = this.match(len < 0?HxOverrides.substr(s,pos,null):HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,map: function(s,f) {
		var offset = 0;
		var buf = new StringBuf();
		do {
			if(offset >= s.length) break; else if(!this.matchSub(s,offset)) {
				buf.add(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf.add(HxOverrides.substr(s,offset,p.pos - offset));
			buf.add(f(this));
			if(p.len == 0) {
				buf.add(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else offset = p.pos + p.len;
		} while(this.r.global);
		if(!this.r.global && offset > 0 && offset < s.length) buf.add(HxOverrides.substr(s,offset,null));
		return buf.b;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d.setTime(0);
		d.setUTCHours(k[0]);
		d.setUTCMinutes(k[1]);
		d.setUTCSeconds(k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) i = 0;
	}
	while(i < len) {
		if(a[i] === obj) return i;
		i++;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = HxOverrides.indexOf(a,obj,0);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = ["IntIterator"];
IntIterator.prototype = {
	hasNext: function() {
		return this.min < this.max;
	}
	,__class__: IntIterator
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.array = function(it) {
	var a = [];
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var i = $it0.next();
		a.push(i);
	}
	return a;
};
Lambda.has = function(it,elt) {
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(x == elt) return true;
	}
	return false;
};
Lambda.iter = function(it,f) {
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		f(x);
	}
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var $it0 = $iterator(it)();
		while( $it0.hasNext() ) {
			var _ = $it0.next();
			n++;
		}
	} else {
		var $it1 = $iterator(it)();
		while( $it1.hasNext() ) {
			var x = $it1.next();
			if(pred(x)) n++;
		}
	}
	return n;
};
Lambda.empty = function(it) {
	return !$iterator(it)().hasNext();
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	add: function(item) {
		var x = [item];
		if(this.h == null) this.h = x; else this.q[1] = x;
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = [item,this.h];
		this.h = x;
		if(this.q == null) this.q = x;
		this.length++;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l[0] == v) {
				if(prev == null) this.h = l[1]; else prev[1] = l[1];
				if(this.q == l) this.q = prev;
				this.length--;
				return true;
			}
			prev = l;
			l = l[1];
		}
		return false;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListIterator = function(head) {
	this.head = head;
	this.val = null;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		this.val = this.head[0];
		this.head = this.head[1];
		return this.val;
	}
	,__class__: _$List_ListIterator
};
Math.__name__ = ["Math"];
var gryffin_core_EventDispatcher = function() {
	this.__sigs = new haxe_ds_StringMap();
	this.__metaBind();
};
$hxClasses["gryffin.core.EventDispatcher"] = gryffin_core_EventDispatcher;
gryffin_core_EventDispatcher.__name__ = ["gryffin","core","EventDispatcher"];
gryffin_core_EventDispatcher.prototype = {
	sig: function(name) {
		if(!this.__sigs.exists(name)) {
			var value = new tannus_io_Signal();
			this.__sigs.set(name,value);
		}
		return this.__sigs.get(name);
	}
	,on: function(name,handler) {
		this.sig(name).on(handler,null);
	}
	,once: function(name,handler) {
		this.sig(name).once(handler);
	}
	,when: function(name,test,handler) {
		this.sig(name).when(test,handler);
	}
	,times: function(name,count,handler) {
		this.sig(name).times(count,handler);
	}
	,every: function(name,interval,handler) {
		this.sig(name).every(interval,handler);
	}
	,off: function(name,handler) {
		var s = this.sig(name);
		if(handler != null) s.ignore(handler); else s.handlers = [];
	}
	,ignore: function(name,handler) {
		this.off(name,handler);
	}
	,dispatch: function(name,data) {
		this.sig(name).call(data);
	}
	,call: function(name,data) {
		this.dispatch(name,data);
	}
	,forward: function(event,target) {
		this.on(event,(function(f,a1) {
			return function(a2) {
				f(a1,a2);
			};
		})($bind(target,target.call),event));
	}
	,forwardAll: function(events,target) {
		var _g = 0;
		while(_g < events.length) {
			var e = events[_g];
			++_g;
			this.forward(e,target);
		}
	}
	,__metaBind: function() {
		var klass = js_Boot.getClass(this);
		var meta;
		{
			var d = haxe_rtti_Meta.getFields(klass);
			meta = tannus_ds_CObj.create(d);
		}
		var self = tannus_ds_CObj.create(this);
		var _g = 0;
		var _g1 = meta.keys();
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			var metas;
			var d1 = Reflect.getProperty(meta.o,key);
			metas = tannus_ds_CObj.create(d1);
			if(Object.prototype.hasOwnProperty.call(metas.o,"on")) {
				var args = Reflect.getProperty(metas.o,"on");
				var handler = Reflect.getProperty(self.o,key);
				handler = Reflect.makeVarArgs((function(f,o,a1) {
					return function(a2) {
						return f(o,a1,a2);
					};
				})(Reflect.callMethod,this,handler));
				var _g2 = 0;
				while(_g2 < args.length) {
					var name = args[_g2];
					++_g2;
					this.__mbind(name,handler);
				}
			}
		}
	}
	,__mbind: function(key,handler) {
		var forwardPattern = new EReg("\\[([A-Z0-9_]+)\\]->(.+)","gi");
		if(tannus_ds_StringUtils.has(key,",")) {
			var keys = key.split(",").map(function(item) {
				return StringTools.trim(item);
			});
			var _g = 0;
			while(_g < keys.length) {
				var k = keys[_g];
				++_g;
				this.__mbind(k,handler);
			}
		} else if(forwardPattern.match(key)) {
			var data = tannus_io__$RegEx_RegEx_$Impl_$.matches(forwardPattern,key)[0];
			var self = tannus_ds_CObj.create(this);
			gryffin_Tools.defer(function() {
				var field = Reflect.getProperty(self.o,data[1]);
				field.__mbind(data[2],handler);
			});
		} else this.on(key,handler);
	}
	,__class__: gryffin_core_EventDispatcher
};
var gryffin_core_Entity = function() {
	gryffin_core_EventDispatcher.call(this);
	this.id = gryffin_Tools.makeUniqueIdentifier(8);
	this._cached = false;
	this._hidden = false;
	this.destroyed = false;
	this.set_parent(null);
	this.priority = 0;
	this.effects = [];
	this.once("activated",$bind(this,this.init));
};
$hxClasses["gryffin.core.Entity"] = gryffin_core_Entity;
gryffin_core_Entity.__name__ = ["gryffin","core","Entity"];
gryffin_core_Entity.__super__ = gryffin_core_EventDispatcher;
gryffin_core_Entity.prototype = $extend(gryffin_core_EventDispatcher.prototype,{
	'delete': function() {
		this.destroyed = true;
		gryffin_Tools.deleteUniqueIdentifier(this.id);
	}
	,restore: function() {
		this.destroyed = false;
		this.stage.addChild(this);
		gryffin_Tools.used_idents.push(this.id);
	}
	,hide: function() {
		this._hidden = true;
	}
	,show: function() {
		this._hidden = false;
	}
	,cache: function() {
		this._cached = true;
	}
	,uncache: function() {
		this._cached = false;
	}
	,toggleCache: function() {
		(this._cached?$bind(this,this.uncache):$bind(this,this.cache))();
	}
	,toggleHidden: function() {
		(this._hidden?$bind(this,this.show):$bind(this,this.hide))();
	}
	,isHidden: function() {
		return this._hidden;
	}
	,isCached: function() {
		return this._cached;
	}
	,init: function(s) {
		this.calculateGeometry(new tannus_geom_CRectangle(0,0,s.canvas.canvas.width,s.canvas.canvas.height));
	}
	,update: function(s) {
		var _g = 0;
		var _g1 = this.effects;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.active(this)) e.affect(this);
		}
	}
	,render: function(s,c) {
		null;
	}
	,addSibling: function(sibling) {
		var _g = this;
		if(this.stage == null) this.on("activated",function(s) {
			_g.addSibling(sibling);
		}); else if(this.parent != null) this.parent.addChild(sibling); else this.stage.addChild(sibling);
	}
	,containsPoint: function(p) {
		return false;
	}
	,calculateGeometry: function(r) {
		null;
	}
	,'is': function(selector) {
		var sel = new tannus_nore_CSelector(selector);
		return sel.test(this);
	}
	,addEffect: function(e) {
		if(!Lambda.has(this.effects,e)) {
			e.attach(this);
			this.effects.push(e);
		}
	}
	,removeEffect: function(e) {
		HxOverrides.remove(this.effects,e);
	}
	,getChildren: function() {
		return [];
	}
	,parentUntil: function(test) {
		if(this.parent == null) return null; else if(test(this.parent)) return this.parent; else return this.parent.parentUntil(test);
	}
	,set_parent: function(p) {
		if(p != null && !js_Boot.__instanceof(p,gryffin_core_EntityContainer)) throw new js__$Boot_HaxeError("Not a container!");
		return this.parent = p;
	}
	,__class__: gryffin_core_Entity
	,__properties__: {set_parent:"set_parent"}
});
var gryffin_core_Container = function() { };
$hxClasses["gryffin.core.Container"] = gryffin_core_Container;
gryffin_core_Container.__name__ = ["gryffin","core","Container"];
gryffin_core_Container.prototype = {
	__class__: gryffin_core_Container
};
var gryffin_core_EntityContainer = function() {
	gryffin_core_Entity.call(this);
	this.children = [];
};
$hxClasses["gryffin.core.EntityContainer"] = gryffin_core_EntityContainer;
gryffin_core_EntityContainer.__name__ = ["gryffin","core","EntityContainer"];
gryffin_core_EntityContainer.__interfaces__ = [gryffin_core_Container];
gryffin_core_EntityContainer.__super__ = gryffin_core_Entity;
gryffin_core_EntityContainer.prototype = $extend(gryffin_core_Entity.prototype,{
	addChild: function(e) {
		var _g = this;
		if(!Lambda.has(this.children,e)) {
			this.children.push(e);
			e.set_parent(this);
			if(this.stage != null) {
				{
					this.stage.registry.set(e.id,e);
					e;
				}
				e.stage = this.stage;
				this.calculateGeometry(this.stage.get_rect());
				e.dispatch("activated",this.stage);
			} else this.on("activated",function(s) {
				{
					s.registry.set(e.id,e);
					e;
				}
				e.stage = s;
				_g.calculateGeometry(new tannus_geom_CRectangle(0,0,s.canvas.canvas.width,s.canvas.canvas.height));
				e.dispatch("activated",s);
			});
		}
	}
	,hasChild: function(child) {
		return Lambda.has(this.getChildren(),child);
	}
	,getChildren: function() {
		return this.children.filter($bind(this,this.isValidChild));
	}
	,get: function(selector) {
		return new gryffin_core_Selection(new tannus_nore_CSelector(selector),$bind(this,this.getChildren));
	}
	,update: function(s) {
		gryffin_core_Entity.prototype.update.call(this,s);
		var filt = tannus_ds_ArrayTools.splitfilter(this.children,function(e) {
			return !e.destroyed;
		});
		var _g = 0;
		var _g1 = filt.fail;
		while(_g < _g1.length) {
			var e1 = _g1[_g];
			++_g;
			this.stage.registry.remove(e1.id);
		}
		this.children = filt.pass;
		haxe_ds_ArraySort.sort(this.children,function(a,b) {
			return a.priority - b.priority;
		});
		var _g2 = 0;
		var _g11 = this.getChildren();
		while(_g2 < _g11.length) {
			var e2 = _g11[_g2];
			++_g2;
			if(!e2._cached && this.shouldChildUpdate(e2)) e2.update(s);
		}
	}
	,render: function(s,c) {
		gryffin_core_Entity.prototype.render.call(this,s,c);
		var _g = 0;
		var _g1 = this.getChildren();
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(!e._hidden && this.shouldChildRender(e)) e.render(s,c);
		}
	}
	,calculateGeometry: function(rect) {
		gryffin_core_Entity.prototype.calculateGeometry.call(this,rect);
		var _g = 0;
		var _g1 = this.getChildren();
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			e.calculateGeometry(rect);
		}
	}
	,getEntitiesAtPoint: function(p) {
		var res = [];
		var _g = 0;
		var _g1 = this.getChildren();
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.containsPoint(p)) {
				res.push(e);
				if(js_Boot.__instanceof(e,gryffin_core_EntityContainer)) {
					var c = e;
					res = res.concat(c.getEntitiesAtPoint(p));
				}
			}
		}
		return res;
	}
	,getEntityAtPoint: function(p) {
		var target = null;
		var targets;
		var _this = this.getChildren();
		targets = _this.slice();
		targets.reverse();
		var _g = 0;
		while(_g < targets.length) {
			var e = targets[_g];
			++_g;
			if(e.containsPoint(p)) {
				target = e;
				if(js_Boot.__instanceof(e,gryffin_core_EntityContainer)) {
					var c = e;
					var etarget = c.getEntityAtPoint(p);
					if(etarget != null) target = etarget;
				}
				break;
			}
		}
		return target;
	}
	,getEntityAt: function(x,y) {
		return this.getEntityAtPoint(new tannus_geom_TPoint(x,y,0));
	}
	,isValidChild: function(child) {
		return true;
	}
	,shouldChildUpdate: function(child) {
		return true;
	}
	,shouldChildRender: function(child) {
		return true;
	}
	,__class__: gryffin_core_EntityContainer
});
var gryffin_ui_Page = function() {
	var _g = this;
	gryffin_core_EntityContainer.call(this);
	this._opened = false;
	this.prev_page = null;
	this.scrollY = 0;
	this.scroll_jump = 1;
	this.bar = new gryffin_ui_ScrollBar($bind(this,this.get_contentRect),$bind(this,this.get_viewport),new tannus_io__$Pointer_Ref(function() {
		return _g.scrollY;
	},function(v) {
		return _g.scrollY = v;
	}));
	this.addChild(this.bar);
};
$hxClasses["gryffin.ui.Page"] = gryffin_ui_Page;
gryffin_ui_Page.__name__ = ["gryffin","ui","Page"];
gryffin_ui_Page.__super__ = gryffin_core_EntityContainer;
gryffin_ui_Page.prototype = $extend(gryffin_core_EntityContainer.prototype,{
	open: function() {
		if(this.stage != null) {
			var pages = this.stage.get("~gryffin.ui.Page:_opened");
			if(pages.selected.length > 0) {
				this.prev_page = pages.at(0);
				this.prev_page.close();
			}
			this._opened = true;
			this.dispatch("open",null);
			this.stage.on("scroll",$bind(this,this.scroll));
		} else throw new js__$Boot_HaxeError("PageError: Cannot open Page before it is activated!");
	}
	,close: function() {
		this._opened = false;
		this.dispatch("close",null);
	}
	,isOpen: function() {
		return this._opened;
	}
	,update: function(s) {
		if(this.isOpen()) gryffin_core_EntityContainer.prototype.update.call(this,s);
	}
	,render: function(s,c) {
		if(this.isOpen()) gryffin_core_EntityContainer.prototype.render.call(this,s,c);
	}
	,scroll: function(e) {
		var cr = this.get_contentRect();
		var vp = this.get_viewport();
		var diff = cr.height - vp.height;
		this.scrollY -= this.scroll_jump * e.delta;
		this.scrollY = tannus_math_TMath.clamp_Float(this.scrollY,0,diff);
	}
	,getEntitiesAtPoint: function(p) {
		if(this.isOpen()) return gryffin_core_EntityContainer.prototype.getEntitiesAtPoint.call(this,p); else return [];
	}
	,containsPoint: function(p) {
		return this.get_contentRect().containsPoint(p);
	}
	,get_contentRect: function() {
		if(this.stage == null) return new tannus_geom_CRectangle(0,0,0,0); else return new tannus_geom_CRectangle(0,0,this.stage.canvas.canvas.width,this.stage.canvas.canvas.height);
	}
	,get_viewport: function() {
		return this.stage.get_rect();
	}
	,__class__: gryffin_ui_Page
	,__properties__: $extend(gryffin_core_EntityContainer.prototype.__properties__,{get_viewport:"get_viewport",get_contentRect:"get_contentRect"})
});
var PlayerPage = function() {
	gryffin_ui_Page.call(this);
	this.win = window;
	this.canvas = new gryffin_display_Canvas();
	this.win.document.body.appendChild(this.canvas.canvas);
	this.stag = new gryffin_core_Stage(this.canvas.canvas);
	this.stag.fill();
	this.stag.addChild(this);
};
$hxClasses["PlayerPage"] = PlayerPage;
PlayerPage.__name__ = ["PlayerPage"];
PlayerPage.main = function() {
	new PlayerPage();
};
PlayerPage.__super__ = gryffin_ui_Page;
PlayerPage.prototype = $extend(gryffin_ui_Page.prototype,{
	init: function(s) {
		gryffin_ui_Page.prototype.init.call(this,s);
		var self = tannus_ds_CObj.create(this.win);
		var val = this.stage;
		self.set("stage",val);
		this.player = new bp_core_Player(this.getOptions());
		var self1 = tannus_ds_CObj.create(this.win);
		var val1 = this.player;
		self1.set("player",val1);
		this.menu = new bp_ui_AppMenu(this.player);
		this.addChild(this.menu);
		this.addChild(this.player);
		this.consoleUtils();
		this.open();
	}
	,open: function() {
		gryffin_ui_Page.prototype.open.call(this);
		this.menu.closeAll();
		var pool = new tannus_ds_AsyncPool();
		var a = 65;
		var _g = 0;
		while(_g < 20) {
			var i = [_g++];
			pool.push((function(i) {
				return function(index,provide) {
					gryffin_Tools.defer(((function() {
						return function(f,a1,a2) {
							return (function() {
								return function() {
									f(a1,a2);
								};
							})();
						};
					})())(provide,null,String.fromCharCode(a + i[0])));
				};
			})(i));
		}
		pool.run(function(results) {
			console.log(results.map(function(item) {
				return item.value;
			}));
		});
	}
	,consoleUtils: function() {
		var _g = this;
		this.win.__defineGetter__("track",function() {
			return _g.player.pane.video.currentTrack;
		});
	}
	,getOptions: function() {
		var wo = tannus_ds_CObj.create(this.win);
		var o = { 'autoRestore' : true, 'launchData' : Reflect.getProperty(wo.o,"launchData")};
		return o;
	}
	,buildMenu: function() {
		var pb = this.menu.item(tannus_ds_CObj.create({ 'label' : "Playback"}));
		this.buildPlaybackMenu(pb);
		var vid = this.menu.item(tannus_ds_CObj.create({ 'label' : "Video"}));
		this.buildVideoMenu(vid);
		var tools = this.menu.item(tannus_ds_CObj.create({ 'label' : "Tools"}));
	}
	,buildMediaMenu: function(media) {
		var _g = this;
		var open = media.item(tannus_ds_CObj.create({ 'label' : "Open...", 'key' : "Ctrl+O", 'click' : function() {
			_g.player.open();
		}}));
		var openDir = media.item(tannus_ds_CObj.create({ 'label' : "Open Folder...", 'key' : "Ctrl+Shift+O", 'click' : function() {
			_g.player.openDirectory();
		}}));
		var savePlaylist = media.item(tannus_ds_CObj.create({ 'label' : "Save Playlist...", 'click' : function() {
			var enc = new bp_bpls_Writer();
			var fp = tannus_chrome_FileSystem.saveAs("playlist.bpls");
			fp.then(function(entry) {
				var wp = tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$.writer(entry);
				wp.then(function(writer) {
					var data = enc.write(_g.player.playlist);
					writer.w.truncate(0);
					writer.write(data);
				});
			});
		}}));
	}
	,buildVideoMenu: function(m) {
		var _g = this;
		m.item(tannus_ds_CObj.create({ 'label' : "Favorite", 'click' : function() {
			if(_g.player.pane.video.currentTrack != null) _g.player.pane.video.currentTrack.favorite();
		}}));
		var marks = null;
		var updateMarksButton;
		var updateMarksButton1 = null;
		updateMarksButton1 = function(track) {
			if(track != null) {
				if(marks != null) marks["delete"]();
				marks = new gryffin_ui_MenuItem();
				marks.set_label("Bookmarks");
				m.root.append(marks);
				marks.item(tannus_ds_CObj.create({ 'label' : "Add Bookmark", 'click' : function() {
					_g.player.bookmark();
				}}));
				track.meta.watchKey("marks",function() {
					gryffin_Tools.defer(function() {
						updateMarksButton1(track);
					});
				});
				var map = track.getMarks();
				var $it0 = map.keys();
				while( $it0.hasNext() ) {
					var time = $it0.next();
					var time1 = [time];
					var name = map.get(time1[0]);
					marks.item(tannus_ds_CObj.create({ 'label' : name, 'click' : (function(time1) {
						return function() {
							_g.player.pane.video.vid.currentTime = 3600 * time1[0].hours + 60 * time1[0].minutes + time1[0].seconds;
						};
					})(time1)}));
				}
			}
		};
		updateMarksButton = updateMarksButton1;
		this.player.ontrackchange.listen(function(change) {
			updateMarksButton(change[0]);
		},false);
	}
	,buildPlaybackMenu: function(pb) {
		var _g = this;
		var play = pb.item(tannus_ds_CObj.create({ 'label' : "Play", 'key' : "Spacebar"}));
		play.on("click",function(e) {
			_g.player.togglePlayback();
			play.set_label(_g.player.pane.video.vid.paused?"Play":"Pause");
		});
		var stop = pb.item(tannus_ds_CObj.create({ 'label' : "Stop", 'key' : "Ctrl+L", 'click' : function() {
			_g.player.clearPlaylist();
		}}));
	}
	,buildToolsMenu: function(tools) {
		var _g = this;
		this.player.once("data-ready",function(data) {
			var canload = _g.player.data.hasAttribute("session");
			if(canload) {
				var load = tools.item(tannus_ds_CObj.create({ 'label' : "Restore Previous Session"}));
				load.on("click",function(e) {
					_g.player.restoreState(function() {
						_g.player.data.setAttribute("session",null);
					});
				});
			}
			var save = tools.item(tannus_ds_CObj.create({ 'label' : "Save Current Session", 'click' : function() {
				_g.player.saveState();
			}}));
			var screenshot = tools.item(tannus_ds_CObj.create({ 'label' : "Capture Screenshot", 'click' : function() {
				_g.player.screenshot();
			}}));
			var remwatched = tools.item(tannus_ds_CObj.create({ 'label' : "Remove Viewed from Playlist", 'click' : function() {
				var sfr = tannus_ds_ArrayTools.splitfilter(_g.player.playlist.tracks,function(item) {
					return !item.meta.get_watched();
				});
				var _g1 = 0;
				var _g2 = sfr.fail;
				while(_g1 < _g2.length) {
					var t = _g2[_g1];
					++_g1;
					_g.player.playlist.removeTrack(t);
				}
			}}));
		});
	}
	,__class__: PlayerPage
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) return null; else if(o.__properties__ && (tmp = o.__properties__["get_" + field])) return o[tmp](); else return o[field];
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	if(o.__properties__ && (tmp = o.__properties__["set_" + field])) o[tmp](value); else o[field] = value;
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
Reflect.compare = function(a,b) {
	if(a == b) return 0; else if(a > b) return 1; else return -1;
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) return true;
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false;
	return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
};
Reflect.isObject = function(v) {
	if(v == null) return false;
	var t = typeof(v);
	return t == "string" || t == "object" && v.__enum__ == null || t == "function" && (v.__name__ || v.__ename__) != null;
};
Reflect.isEnumValue = function(v) {
	return v != null && v.__enum__ != null;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) return false;
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		Reflect.setField(o2,f,Reflect.field(o,f));
	}
	return o2;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	add: function(x) {
		this.b += Std.string(x);
	}
	,addSub: function(s,pos,len) {
		if(len == null) this.b += HxOverrides.substr(s,pos,null); else this.b += HxOverrides.substr(s,pos,len);
	}
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.startsWith = function(s,start) {
	return s.length >= start.length && HxOverrides.substr(s,0,start.length) == start;
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	return slen >= elen && HxOverrides.substr(s,slen - elen,elen) == end;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	return c > 8 && c < 14 || c == 32;
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) r++;
	if(r > 0) return HxOverrides.substr(s,r,l - r); else return s;
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) r++;
	if(r > 0) return HxOverrides.substr(s,0,l - r); else return s;
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) return s;
	while(s.length < l) s = c + s;
	return s;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) return null; else return js_Boot.getClass(o);
};
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) return null;
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) return null;
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
	return null;
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) throw new js__$Boot_HaxeError("No such constructor " + constr);
	if(Reflect.isFunction(f)) {
		if(params == null) throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		return Reflect.callMethod(e,f,params);
	}
	if(params != null && params.length != 0) throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) throw new js__$Boot_HaxeError(index + " is not a valid enum constructor index");
	return Type.createEnum(e,c,params);
};
Type.getEnumConstructs = function(e) {
	var a = e.__constructs__;
	return a.slice();
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "string":
		return ValueType.TClass(String);
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) return ValueType.TInt;
		return ValueType.TFloat;
	case "object":
		if(v == null) return ValueType.TNull;
		var e = v.__enum__;
		if(e != null) return ValueType.TEnum(e);
		var c = js_Boot.getClass(v);
		if(c != null) return ValueType.TClass(c);
		return ValueType.TObject;
	case "function":
		if(v.__name__ || v.__ename__) return ValueType.TObject;
		return ValueType.TFunction;
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) return true;
	try {
		if(a[0] != b[0]) return false;
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) return false;
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) return false;
	} catch( e1 ) {
		if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
		return false;
	}
	return true;
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get_nodeValue: function() {
		if(this.nodeType == Xml.Document || this.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + this.nodeType);
		return this.nodeValue;
	}
	,get: function(att) {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.attributeMap.get(att);
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		this.attributeMap.set(att,value);
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.attributeMap.exists(att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.attributeMap.keys();
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		var ret;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) _g.push(child);
		}
		ret = _g;
		return HxOverrides.iter(ret);
	}
	,firstChild: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		return this.children[0];
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		if(x.parent == this) return; else if(x.parent != null) x.parent.removeChild(x);
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		return HxOverrides.remove(this.children,x);
	}
	,__class__: Xml
	,__properties__: {get_nodeValue:"get_nodeValue"}
};
var bp_bml_Reader = function() {
	null;
};
$hxClasses["bp.bml.Reader"] = bp_bml_Reader;
bp_bml_Reader.__name__ = ["bp","bml","Reader"];
bp_bml_Reader.prototype = {
	read: function(d) {
		this.data = d;
		this.data.position = 0;
		this.marks = [];
		{
			var _g = this["int"]();
			var _g1 = this["int"]();
			var _g2 = this["int"]();
			switch(_g) {
			case 66:
				switch(_g1) {
				case 77:
					switch(_g2) {
					case 76:
						null;
						break;
					default:
						throw new js__$Boot_HaxeError(new tannus_utils_JavaScriptError("Invalid BML file"));
					}
					break;
				default:
					throw new js__$Boot_HaxeError(new tannus_utils_JavaScriptError("Invalid BML file"));
				}
				break;
			default:
				throw new js__$Boot_HaxeError(new tannus_utils_JavaScriptError("Invalid BML file"));
			}
		}
		var markCount = this["int"]();
		var _g3 = 0;
		while(_g3 < markCount) {
			var i = _g3++;
			this.marks.push(this.mark());
		}
		return this.marks;
	}
	,mark: function() {
		var time;
		var i = this["int"]();
		time = tannus_media_CDur.fromSecondsI(i);
		var trackId = this.data.readString(this["int"]());
		var typeId = this["int"]();
		var params = [];
		if(typeId == 0) params.push(this.data.readString(this["int"]()));
		var type = Type.createEnumIndex(bp_ds_BookmarkType,typeId,params);
		var m = new bp_ds_Bookmark(trackId,type,time);
		return m;
	}
	,'int': function() {
		var this1 = this.data.readByte();
		return this1;
	}
	,str: function() {
		return this.data.readString(this["int"]());
	}
	,__class__: bp_bml_Reader
};
var bp_bml_Writer = function() {
	var this1;
	this1 = tannus_io_impl_BrowserBinary.alloc(0);
	this.buffer = this1;
	this.bmc = [];
};
$hxClasses["bp.bml.Writer"] = bp_bml_Writer;
bp_bml_Writer.__name__ = ["bp","bml","Writer"];
bp_bml_Writer.prototype = {
	print: function(c) {
		var this1;
		this1 = tannus_io_impl_BrowserBinary.alloc(0);
		this.buffer = this1;
		this.bmc = c.slice();
		this.buffer.push(66);
		this.buffer.push(77);
		this.buffer.push(76);
		this.buffer.push(this.bmc.length);
		var _g1 = 0;
		var _g = this.bmc.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.mark(this.bmc[i]);
		}
		return this.buffer;
	}
	,mark: function(m) {
		this.buffer.push((function($this) {
			var $r;
			var this1 = m.time;
			$r = 3600 * this1.hours + 60 * this1.minutes + this1.seconds;
			return $r;
		}(this)));
		this.str(m.track);
		var typeIndex = m.type[1];
		this.buffer.push(typeIndex);
		if(typeIndex == 0) {
			var name = Std.string(m.type.slice(2)[0]);
			this.buffer.push(name.length);
			this.buffer.appendString(name);
		}
	}
	,'int': function(i) {
		this.buffer.push(i);
	}
	,str: function(s) {
		this.buffer.push(s.length);
		this.buffer.appendString(s);
	}
	,__class__: bp_bml_Writer
};
var tannus_io_LexerBase = function() { };
$hxClasses["tannus.io.LexerBase"] = tannus_io_LexerBase;
tannus_io_LexerBase.__name__ = ["tannus","io","LexerBase"];
tannus_io_LexerBase.prototype = {
	readGroup: function(start,end,esc,recursive) {
		if(recursive == null) recursive = true;
		var level = 1;
		var data;
		var this1;
		this1 = tannus_io_impl_BrowserBinary.alloc(0);
		data = this1;
		var escaped = false;
		while(!(this.buffer != null && this.buffer.get_empty()) && level > 0) {
			var c = this.buffer.peek(null);
			if(!escaped) {
				if(c == start) {
					if(start != end) level++; else level--;
				} else if(c == end) level--; else if(esc != null && c == esc) escaped = true;
			} else escaped = false;
			if(level > 0) data.push(c);
			this.buffer.pop();
		}
		return data;
	}
	,readUntil: function(end,esc) {
		var d;
		var this1;
		this1 = tannus_io_impl_BrowserBinary.alloc(0);
		d = this1;
		var escaped = false;
		while(!(this.buffer != null && this.buffer.get_empty())) {
			var c = this.buffer.peek(null);
			if(!escaped) {
				if(c == end) {
					this.buffer.pop();
					break;
				} else if(esc != null && c == esc) escaped = true;
			} else escaped = false;
			d.push(this.buffer.pop());
		}
		return d;
	}
	,next: function(dis) {
		return this.buffer.peek(dis);
	}
	,advance: function() {
		return this.buffer.pop();
	}
	,get_done: function() {
		return this.buffer != null && this.buffer.get_empty();
	}
	,__class__: tannus_io_LexerBase
	,__properties__: {get_done:"get_done"}
};
var bp_bplash_Lexer = function() {
	null;
};
$hxClasses["bp.bplash.Lexer"] = bp_bplash_Lexer;
bp_bplash_Lexer.__name__ = ["bp","bplash","Lexer"];
bp_bplash_Lexer.parseString = function(s) {
	return new bp_bplash_Lexer().lex(tannus_io_impl_BrowserBinary.ofString(s));
};
bp_bplash_Lexer.__super__ = tannus_io_LexerBase;
bp_bplash_Lexer.prototype = $extend(tannus_io_LexerBase.prototype,{
	lex: function(b) {
		this.tokens = [];
		this.buffer = new tannus_io_ByteStack(b);
		while(!this.buffer.get_empty()) {
			var t = this.token();
			if(t != null) this.tokens.push(t);
		}
		return this.tokens;
	}
	,token: function() {
		if(this.buffer != null && this.buffer.get_empty()) return null;
		var c = this.buffer.peek(null);
		if(Lambda.has([9,10,11,12,13,32],c)) {
			this.buffer.pop();
			return this.token();
		} else if(c >= 48 && c <= 57) {
			var snum = String.fromCharCode(c);
			this.buffer.pop();
			while(!(this.buffer != null && this.buffer.get_empty()) && ((function($this) {
				var $r;
				var this1 = $this.buffer.peek(null);
				$r = this1 >= 48 && this1 <= 57;
				return $r;
			}(this)) || (function($this) {
				var $r;
				var this2 = $this.buffer.peek(null);
				$r = this2 == 46;
				return $r;
			}(this)))) {
				var this3 = this.buffer.pop();
				snum += String.fromCharCode(this3);
			}
			var num = parseFloat(snum);
			var unit = "";
			while(!(this.buffer != null && this.buffer.get_empty()) && this.isUnitChar(this.buffer.peek(null))) {
				var this4 = this.buffer.pop();
				unit += String.fromCharCode(this4);
			}
			if(unit.length == 0) unit = null;
			return bp_bplash_Token.TConst(bp_bplash_Constant.CNumber(num,unit));
		} else if(c == 34 || c == 39 || c == 96) {
			var delim = this.buffer.pop();
			var str = "";
			while(!(this.buffer != null && this.buffer.get_empty()) && this.buffer.peek(null) != delim) {
				var this5 = this.buffer.pop();
				str += String.fromCharCode(this5);
			}
			this.buffer.pop();
			return bp_bplash_Token.TConst(bp_bplash_Constant.CString(str,(function($this) {
				var $r;
				switch(delim) {
				case 34:
					$r = 2;
					break;
				case 39:
					$r = 1;
					break;
				case 96:
					$r = 3;
					break;
				default:
					$r = -1;
				}
				return $r;
			}(this))));
		} else if(c >= 65 && c <= 90 || c >= 97 && c <= 122) {
			var word;
			var this6 = this.buffer.pop();
			word = String.fromCharCode(this6);
			while(!(this.buffer != null && this.buffer.get_empty()) && !(function($this) {
				var $r;
				var this7 = $this.buffer.peek(null);
				$r = Lambda.has([9,10,11,12,13,32],this7);
				return $r;
			}(this))) {
				var this8 = this.buffer.pop();
				word += String.fromCharCode(this8);
			}
			return bp_bplash_Token.TConst(bp_bplash_Constant.CWord(word));
		} else throw new js__$Boot_HaxeError("Error: Unexpected " + String.fromCharCode(c));
	}
	,isUnitChar: function(c) {
		return !(Lambda.has([9,10,11,12,13,32],c) || c >= 48 && c <= 57);
	}
	,__class__: bp_bplash_Lexer
});
var bp_bplash_Token = $hxClasses["bp.bplash.Token"] = { __ename__ : ["bp","bplash","Token"], __constructs__ : ["TConst"] };
bp_bplash_Token.TConst = function(c) { var $x = ["TConst",0,c]; $x.__enum__ = bp_bplash_Token; $x.toString = $estr; return $x; };
var bp_bplash_Constant = $hxClasses["bp.bplash.Constant"] = { __ename__ : ["bp","bplash","Constant"], __constructs__ : ["CWord","CString","CNumber"] };
bp_bplash_Constant.CWord = function(w) { var $x = ["CWord",0,w]; $x.__enum__ = bp_bplash_Constant; $x.toString = $estr; return $x; };
bp_bplash_Constant.CString = function(s,quote) { var $x = ["CString",1,s,quote]; $x.__enum__ = bp_bplash_Constant; $x.toString = $estr; return $x; };
bp_bplash_Constant.CNumber = function(n,unit) { var $x = ["CNumber",2,n,unit]; $x.__enum__ = bp_bplash_Constant; $x.toString = $estr; return $x; };
var bp_bpls_Writer = function() {
	null;
};
$hxClasses["bp.bpls.Writer"] = bp_bpls_Writer;
bp_bpls_Writer.__name__ = ["bp","bpls","Writer"];
bp_bpls_Writer.prototype = {
	write: function(list) {
		this.playlist = list;
		this.root = new tannus_xml_Elem("playlist");
		this.title = new tannus_xml_Elem("title",this.root);
		this.title.text = this.playlist.title;
		this.description = new tannus_xml_Elem("description",this.root);
		this.description.text = this.playlist.description;
		this.creator = new tannus_xml_Elem("creator",this.root);
		this.creator.text = this.playlist.creator;
		this.createdOn = new tannus_xml_Elem("created-on",this.root);
		this.createdOn.text = this.encodeDate();
		this.tracklist = new tannus_xml_Elem("tracklist",this.root);
		this.writeTracks();
		var xmlCode = this.root.print(true);
		return tannus_io_impl_BrowserBinary.ofString(xmlCode);
	}
	,writeTracks: function() {
		var $it0 = this.playlist.iterator();
		while( $it0.hasNext() ) {
			var track = $it0.next();
			null;
		}
	}
	,encodeDate: function() {
		var s = "";
		var now = new Date();
		s += [now.getFullYear(),now.getMonth(),now.getDay()].map(Std.string).map(function(item) {
			return StringTools.lpad(item,"0",2);
		}).join("-");
		s += "T";
		s += [now.getHours(),now.getMinutes(),now.getSeconds()].map(Std.string).map(function(item1) {
			return StringTools.lpad(item1,"0",2);
		}).join(":");
		return s;
	}
	,get_pl: function() {
		return this.playlist;
	}
	,__class__: bp_bpls_Writer
	,__properties__: {get_pl:"get_pl"}
};
var bp_core_Ent = function() {
	this._cc = false;
	gryffin_core_EntityContainer.call(this);
	this.rect = new tannus_geom_CRectangle(0,0,0,0);
};
$hxClasses["bp.core.Ent"] = bp_core_Ent;
bp_core_Ent.__name__ = ["bp","core","Ent"];
bp_core_Ent.__super__ = gryffin_core_EntityContainer;
bp_core_Ent.prototype = $extend(gryffin_core_EntityContainer.prototype,{
	containsPoint: function(p) {
		return this.rect.contains(p.get_x(),p.get_y());
	}
	,update: function(stage) {
		gryffin_core_EntityContainer.prototype.update.call(this,stage);
	}
	,getPage: function() {
		var _g = this;
		return this.parentUntil(function(e) {
			return e["is"]("gryffin.ui.Page") && e.hasChild(_g);
		});
	}
	,get_x: function() {
		return this.rect.x;
	}
	,set_x: function(v) {
		return this.rect.x = v;
	}
	,get_y: function() {
		return this.rect.y;
	}
	,set_y: function(v) {
		return this.rect.y = v;
	}
	,get_w: function() {
		return this.rect.width;
	}
	,set_w: function(v) {
		return this.rect.width = v;
	}
	,get_h: function() {
		return this.rect.height;
	}
	,set_h: function(v) {
		return this.rect.height = v;
	}
	,get_pos: function() {
		var _g = this;
		var x = new tannus_io__$Pointer_Ref(function() {
			return _g.rect.x;
		},function(v) {
			return _g.rect.x = v;
		});
		var y = new tannus_io__$Pointer_Ref(function() {
			return _g.rect.y;
		},function(v1) {
			return _g.rect.y = v1;
		});
		return new tannus_geom_LinkedPoint(x,y,null);
	}
	,set_pos: function(v) {
		var x = this.set_x(v.get_x());
		var y = this.set_y(v.get_y());
		return new tannus_geom_TPoint(x,y,0);
	}
	,get_centerX: function() {
		return this.rect.x + this.get_w() / 2;
	}
	,set_centerX: function(v) {
		return this.set_x(v - this.get_w() / 2);
	}
	,get_centerY: function() {
		return this.rect.y + this.get_h() / 2;
	}
	,set_centerY: function(v) {
		return this.set_y(v - this.get_h() / 2);
	}
	,get_center: function() {
		var _g = this;
		var x = new tannus_io__$Pointer_Ref(function() {
			return _g.get_centerX();
		},function(v) {
			return _g.set_centerX(v);
		});
		var y = new tannus_io__$Pointer_Ref(function() {
			return _g.get_centerY();
		},function(v1) {
			return _g.set_centerY(v1);
		});
		return new tannus_geom_LinkedPoint(x,y,null);
	}
	,set_center: function(v) {
		return this.rect.set_center(v);
	}
	,__class__: bp_core_Ent
	,__properties__: $extend(gryffin_core_EntityContainer.prototype.__properties__,{set_center:"set_center",get_center:"get_center",set_centerY:"set_centerY",get_centerY:"get_centerY",set_centerX:"set_centerX",get_centerX:"get_centerX",set_pos:"set_pos",get_pos:"get_pos",set_h:"set_h",get_h:"get_h",set_w:"set_w",get_w:"get_w",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"})
});
var bp_core_Player = function(opts) {
	this.history = [];
	bp_core_Ent.call(this);
	this.options = opts;
	this.playlist = new bp_ds_Playlist();
	this.set_show_ui(false);
	this.menu = null;
	this.pane = new bp_display_VideoPane(this);
	this.addChild(this.pane);
	this.controls = new bp_ui_Controls(this);
	this.addChild(this.controls);
	this.titleView = new bp_ui_TitleDisplay(this);
	this.addChild(this.titleView);
	this.status = new bp_ui_StatusBox(this);
	this.addChild(this.status);
	this.hist = new bp_hist_History(this);
	this.v = new gryffin_display_Video();
	this.app = chrome_Windows.lib.current();
	this.notifications = new bp_ui_NotificationDrawer(this);
	this.ontrackchange = new tannus_io_Signal();
	bp_core_Player.instance = this;
};
$hxClasses["bp.core.Player"] = bp_core_Player;
bp_core_Player.__name__ = ["bp","core","Player"];
bp_core_Player.getInstance = function() {
	return bp_core_Player.instance;
};
bp_core_Player.__super__ = bp_core_Ent;
bp_core_Player.prototype = $extend(bp_core_Ent.prototype,{
	init: function(stage) {
		var _g = this;
		bp_core_Ent.prototype.init.call(this,stage);
		this.keyControls = new bp_ui_KeyControls(this);
		this.parent.cache();
		this.parent.hide();
		bp_ds_AppData.getStorage(function(s) {
			_g.data = new bp_ds_AppData(s);
			_g.data.init(function() {
				_g.parent.uncache();
				_g.parent.show();
				_g.applySettings();
				_g.applyOptions();
				_g.listen();
				_g.dispatch("data-ready",_g.data);
				_g.dispatch("add-widgets",null);
			});
		});
		this.on("click",$bind(this,this.onclick));
	}
	,update: function(stage) {
		bp_core_Ent.prototype.update.call(this,stage);
		if(this.menu == null) {
			this.menu = stage.get("..AppMenu").selected[0];
			if(this.menu != null) this.calculateGeometry(new tannus_geom_CRectangle(0,0,stage.canvas.canvas.width,stage.canvas.canvas.height));
		}
		var showEvents = ["mousemove","click","keyup","keydown"];
		var times = showEvents.map($bind(stage,stage.mostRecentOccurrenceTime)).filter(function(item) {
			return item != null;
		}).map(function(item1) {
			return new Date().getTime() - item1;
		});
		if(!Lambda.empty(times)) {
			var last = tannus_ds_ArrayTools.min(times,function(v) {
				return v;
			});
			this.set_show_ui(last <= 3000);
		} else this.set_show_ui(false);
	}
	,render: function(stage,c) {
		bp_core_Ent.prototype.render.call(this,stage,c);
	}
	,calculateGeometry: function(r) {
		this.set_w(r.width);
		this.set_h(r.height);
		if(this.menu != null) {
			var _g = this;
			_g.set_h(_g.get_h() - this.menu.get_h());
			this.set_y(this.menu.get_y() + this.menu.get_h());
		}
		bp_core_Ent.prototype.calculateGeometry.call(this,r);
	}
	,load: function(entries,done) {
		var loader = new bp_ds_TrackLoader(this);
		var loadbar = new bp_ui_LoadingBar(this,loader);
		this.addChild(loadbar);
		loader.load(entries,function() {
			loadbar["delete"]();
			done();
		});
	}
	,userLoad: function(entries,done) {
		var _g = this;
		if(this.playlist != null) {
			var currtl = this.playlist.tracks;
			this.load(entries,function() {
				var added = tannus_ds_ArrayTools.without(_g.playlist.tracks,currtl);
				_g.hist.action(bp_hist_Action.ALoad(added));
				done();
			});
		} else this.load(entries,function() {
			_g.hist.action(bp_hist_Action.ALoad(_g.playlist.tracks));
			done();
		});
	}
	,reload: function(entries,done) {
		var loader = new bp_ds_TrackLoader(this);
		loader.restoring = true;
		var loadbar = new bp_ui_LoadingBar(this,loader);
		this.addChild(loadbar);
		loader.load(entries,function() {
			loadbar["delete"]();
			done();
		});
	}
	,loadEntries: function(entries,cb) {
		this.load(this.entrySources(entries),cb);
	}
	,entrySources: function(entries) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < entries.length) {
			var e = entries[_g1];
			++_g1;
			_g.push(bp_ds_VideoSource.VSFile(e,null));
		}
		return _g;
	}
	,restart: function() {
		this.saveState(function() {
			chrome_Runtime.rt.reload();
		});
	}
	,open: function(cb) {
		var _g = this;
		var options = { 'acceptsMultiple' : true};
		tannus_chrome_FileSystem.chooseEntry(options,function(entries) {
			var sources = entries.map(function(item) {
				return bp_ds_VideoSource.VSFile(item,null);
			});
			_g.userLoad(sources,function() {
				_g.saveState(cb);
			});
		});
	}
	,openDirectory: function(cb) {
		var _g = this;
		var dirp = tannus_chrome_FileSystem.chooseDirectory();
		dirp.then(function(dir) {
			var gallery = new bp_ds_Gallery(_g,{ entry : dir});
			gallery.open();
		});
		dirp.unless(function(error) {
			console.log(error);
		});
	}
	,addTrack: function(track,loadIfNeeded,cb) {
		if(loadIfNeeded == null) loadIfNeeded = true;
		var first = Lambda.empty(this.playlist.tracks);
		this.playlist.addTrack(track);
		if(first && loadIfNeeded) this["goto"](track,null,cb); else if(cb != null) cb();
	}
	,'goto': function(track,can_manip,can_play) {
		var _g = this;
		var vstate = this.pane.video.getState();
		var playing = !this.pane.video.vid.paused;
		var _ct = this.pane.video.currentTrack;
		var ocp = function() {
			if(playing) _g.pane.video.play();
			if(can_play != null) can_play();
			var trackChange = [_g.pane.video.currentTrack,_ct];
			_g.ontrackchange.broadcast(trackChange);
		};
		this.pane.video.loadTrack(track,function() {
			_g.pane.video.setState(vstate);
			_g.pane.video.oncanplay.once(ocp);
			_g.pane.video.set_currentTime(track.startTime());
			if(can_manip != null) can_manip();
		});
	}
	,seek: function(time) {
		this.pane.video.vid.currentTime = 3600 * time.hours + 60 * time.minutes + time.seconds;
	}
	,nextTrack: function(cm,cp) {
		if(this.pane.video.currentTrack != null) {
			if(this.pane.video.currentTrack.nextTrack() != null) this["goto"](this.pane.video.currentTrack.nextTrack(),cm,cp); else {
				var track = this.playlist.tracks[0];
				this["goto"](track,cm,cp);
			}
			this.status.message("nav","Jumped to next Track",null);
		}
	}
	,previewNextTrack: function(cm,cp) {
		if(this.pane.video.currentTrack != null) {
			if(this.pane.video.currentTrack.nextTrack() != null) {
				var nt = this.pane.video.currentTrack.nextTrack();
				var pp = new bp_ui_PreviewPane(this,nt);
				if(cm != null) pp.canManipulate.once(cm);
				if(cp != null) pp.canPlay.once(cp);
				this.addChild(pp);
			}
		}
	}
	,prevTrack: function(cb) {
		if(this.pane.video.currentTrack != null) {
			if(this.pane.video.vid.currentTime > 30) {
				this.pane.video.vid.currentTime = 0;
				this.status.message("nav","Jumped to beggining of Track",null);
				if(cb != null) cb();
			} else {
				if(this.pane.video.currentTrack.prevTrack() != null) this["goto"](this.pane.video.currentTrack.prevTrack(),cb); else {
					var track = this.playlist.tracks[this.playlist.tracks.length - 1];
					this["goto"](track,cb);
				}
				this.status.message("nav","Jumped to previous Track",null);
			}
		} else if(cb != null) cb();
	}
	,randomTrack: function(cb) {
		if(this.playlist != null && this.playlist.tracks.length > 0) this["goto"](new tannus_math_Random().choice(this.playlist.tracks));
	}
	,randomTime: function() {
		this.pane.video.set_currentTime(tannus_media_CDur.fromSecondsI(Math.floor(this.pane.video.vid.duration)).get_totalSeconds() * ((function($this) {
			var $r;
			var this1;
			{
				var f = tannus_math_RandomTools.randint([0,10000]) / 100;
				this1 = f;
			}
			$r = this1;
			return $r;
		}(this)) / 100));
	}
	,togglePlayback: function() {
		if(this.pane.video.vid.paused) this.getSelectedPane().video.play(); else this.getSelectedPane().video.pause();
		this.saveState();
	}
	,toggleFullscreen: function() {
		if(this.app.isFullscreen()) this.app.restore(); else this.app.fullscreen();
	}
	,bookmark: function(cb) {
		var _g = this;
		var paused = this.pane.video.vid.paused;
		this.pane.video.pause();
		var pb = new bp_ui_PromptBox();
		pb.once("line",function(value) {
			value = StringTools.trim(value);
			if(!(value.length == 0) && _g.pane.video.currentTrack != null) {
				var time = _g.pane.video.vid.currentTime;
				(bp_core_Player.instance != null?bp_core_Player.instance.data.bookmarks:null).addBookmark((bp_core_Player.instance != null?bp_core_Player.instance.data.bookmarks:null).namedMark(_g.pane.video.currentTrack.meta.trackId,tannus_media_CDur.fromSecondsI(Math.floor(time)),value));
				_g.status.message("track-meta","Added bookmark to track",null);
				if(cb != null) cb();
			}
		});
		pb.open();
		pb.input.focus();
	}
	,prompt: function(onsubmit,manip) {
		var box = new bp_ui_PromptBox();
		box.once("line",function(value) {
			onsubmit(value.substring(1));
		});
		box.open();
		box.input.focus();
		if(manip != null) manip(box);
	}
	,seekPrompt: function() {
		var shell = new bp_ui_JumpToTimeBox(this);
		shell.input.once("keyup",function(event) {
			event.preventDefault();
			event.cancel();
		});
		shell.open();
		gryffin_Tools.defer($bind(shell,shell.focus));
	}
	,speedPrompt: function() {
		var shell = new bp_ui_PlaybackRateBox(this);
		shell.open();
		shell.input.focus();
	}
	,galleryNamePrompt: function(suggestion,callback) {
		var box = new bp_ui_PromptBox();
		box.once("line",function(gname) {
			callback(gname);
		});
		if(suggestion != null) {
			box.set_value(suggestion);
			box.input.get_iel().select();
		}
		box.open();
		box.input.focus();
	}
	,log: function(type,text,dur) {
		this.status.message(type,text,dur);
	}
	,error: function(type,text,dur) {
		this.status.error(type,text,dur);
	}
	,onclick: function(event) {
		var disqualifiers = [this.controls];
		var p = event.position;
		var _g = 0;
		while(_g < disqualifiers.length) {
			var e = disqualifiers[_g];
			++_g;
			if(e.containsPoint(p)) return;
		}
		if(!this.pane.containsPoint(p)) return;
		if(this.lastClick != null && new Date().getTime() - this.lastClick < 400) this.toggleFullscreen(); else this.lastClick = new Date().getTime();
	}
	,getSelectedPane: function() {
		var pp = this.get("..PreviewPane:selected").selected[0];
		if(pp != null) return pp.pane; else return this.pane;
	}
	,getSelectedVideo: function() {
		return this.getSelectedPane().video;
	}
	,shiftSelection: function() {
		var panes = this.get("..PreviewPane").selected;
		var selectedIndex = tannus_ds_ArrayTools.firstMatchIndex(panes,function(item) {
			return item.selected;
		});
		if(selectedIndex > -1 && selectedIndex < panes.length) panes[selectedIndex].selected = false;
		if(selectedIndex == panes.length - 1) selectedIndex = -1; else selectedIndex = selectedIndex + 1;
		var p = panes[selectedIndex];
		if(p != null) p.selected = true;
	}
	,showPlaylist: function() {
		var _g = this;
		if(this.playlist.tracks.length > 0) {
			var plPage = new bp_ui_PlaylistPage(this);
			this.stage.addChild(plPage);
			plPage.open();
			if(!this.pane.video.vid.paused) {
				this.pane.video.pause();
				plPage.once("close",function(x) {
					_g.pane.video.play();
				});
			}
		}
	}
	,showHelp: function() {
		var _g = this;
		var helpPage = new bp_ui_HelpPage(this);
		this.stage.addChild(helpPage);
		helpPage.open();
		if(!this.pane.video.vid.paused) {
			this.pane.video.pause();
			helpPage.once("close",function(x) {
				_g.pane.video.play();
			});
		}
	}
	,showSettings: function() {
		var wi = tannus_ds_CObj.create(this.app.contentWindow);
		Reflect.getProperty(wi.o,"__backgroundPage").openSettings(this);
	}
	,showMediaTrackManager: function() {
		((function($this) {
			var $r;
			var this1 = tannus_ds_CObj.create($this.app.contentWindow);
			$r = Reflect.getProperty(this1.o,"__backgroundPage");
			return $r;
		}(this))).openMediaManager(this);
	}
	,clearPlaylist: function() {
		this.pane.video.pause();
		this.pane.video = new bp_ds_Video();
		this.playlist.clear();
		this.pane.video.currentTrack = null;
		this.data.session.clearAttributes();
		this.status.message("edit:pl","Cleared Playlist",null);
	}
	,getThumbnailAt: function(time,cb) {
		var _g = this;
		if(this.pane.video.currentTrack != null) {
			var m = this.pane.video.currentTrack.thumbs;
			var nearestKey = function() {
				var i = 3600 * time.hours + 60 * time.minutes + time.seconds;
				while(i % 5 != 0) i--;
				if(m.h.hasOwnProperty(i)) return i; else {
					i += 5;
					return i;
				}
			};
			var key = nearestKey();
			var getCapture = function() {
				if(m.h.hasOwnProperty(key)) cb(m.h[key]); else {
					_g.v.vid.currentTime = 3600 * time.hours + 60 * time.minutes + time.seconds;
					_g.v.oncanplay.once(function() {
						console.log(_g.v.vid.currentTime);
						var can = _g.v.capture();
						m.h[key] = can;
						cb(can);
					});
				}
			};
			if(this.v.get_src() != this.pane.video.currentTrack.get_location()) this.v.load(this.pane.video.currentTrack.get_location(),getCapture); else getCapture();
		}
	}
	,screenshot: function(done) {
		var _g = this;
		if(this.canGetPixels()) {
			var can = this.pane.video.capture();
			var data;
			var s = tannus_ds_StringUtils.after(can.dataURI("image/jpeg"),",");
			data = tannus_io_impl_BrowserBinary.fromBase64(s);
			this.saveSnapshot(this.getScreenshotName(),data,function() {
				_g.status.message("capture","Snapshot saved..",null);
				if(done != null) done();
			});
		} else this.status.error("capture","Cannot capture from non-local video",null);
	}
	,saveSnapshot: function(name,imgData,done) {
		var _g = this;
		var stack = new tannus_ds_AsyncStack();
		stack.under(function(next) {
			var opts = { type : "saveFile", 'suggestedName' : name};
			tannus_chrome_FileSystem.chooseEntry(opts,function(entries) {
				if(chrome.runtime.lastError != null) next(); else _g.writeSnapshot(entries[0],imgData,next);
			});
		});
		stack.under(function(next1) {
			_g.data.getThumbsDirectory(function(tdir) {
				var thumb_path;
				var this1 = new tannus_sys_CPath(tdir.fullPath);
				thumb_path = tannus_sys_CPath.join([this1,tannus_sys__$Path_Path_$Impl_$.fromString(name)]);
				var thumb_fp = new tannus_ds_Promise((function(f,a1,a2) {
					return function(a3,a4) {
						f(a1,a2,a3,a4);
					};
				})(($_=tdir,$bind($_,$_.getFile)),thumb_path,{ 'create' : true}));
				thumb_fp.then(function(entry) {
					_g.writeSnapshot(entry,imgData,next1);
				});
				thumb_fp.unless(function(error) {
					_g.status.message("error","An Error has occurred",null);
				});
			});
		});
		stack.run(done);
	}
	,writeSnapshot: function(fileEntry,fileData,callback) {
		var _g = this;
		var writer_p = tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$.writer(fileEntry);
		writer_p.then(function(writer) {
			writer.write(fileData);
			callback();
		});
		writer_p.unless(function(error) {
			_g.status.message("error","An Error has Occurred :c",null);
		});
	}
	,getScreenshotName: function() {
		var d = tannus_media_CDur.fromSecondsI(Math.floor(this.pane.video.vid.currentTime));
		var timeString = [d.hours,d.minutes,d.seconds].map(function(item) {
			return StringTools.lpad(item == null?"null":"" + item,"0",2);
		}).join("-");
		var p;
		var s = this.pane.video.currentTrack.get_title();
		p = new tannus_sys_CPath(s);
		var fname = tannus_ds_StringUtils.beforeLast(p.get_basename(),".");
		var name = "snapshot-of-(" + fname + ")-@" + timeString + ".jpg";
		return name;
	}
	,parseSnapshotTitle: function(name) {
		var glob = new tannus_sys_CGlobStar("snapshot-of-(<name>)-@<time>.jpg","i");
		if(glob.test(name)) {
			var raw_data = glob.match(name);
			var time;
			var a = raw_data.time.split("-").map(Std.parseInt);
			time = tannus_media__$Duration_Duration_$Impl_$._new(a[0],a[1],a[2]);
			var data = { name : raw_data.name, time : time};
			return data;
		} else return null;
	}
	,listen: function() {
		var _g = this;
		var qSave;
		var qSave1 = null;
		qSave1 = function() {
			if(_g.pane.video.currentTrack != null && !_g.pane.video.vid.paused) _g.saveState(function() {
				window.setTimeout(qSave1,10000);
			}); else window.setTimeout(qSave1,10000);
		};
		qSave = qSave1;
		qSave();
		this.pane.video.onended.on(function() {
			_g.nextTrack(null,function() {
				_g.pane.video.play();
			});
		});
		this.pane.video.onpause.on(function() {
			_g.saveState();
		});
	}
	,applySettings: function() {
		var noLaunchData = this.options.launchData == null || this.options.launchData.items == null;
		if(this.get_persistentSession() && noLaunchData && this.data.session.hasState()) {
			var _g = this.data.settings.preferences.get_sessionLoadMode();
			switch(_g) {
			case 0:
				this.loadState();
				break;
			case 1:
				console.log("ask me");
				this.ask_loadState();
				break;
			default:
				null;
			}
		}
		this.pane.video.set_volume(this.data.settings.get_volume());
		this.pane.video.set_playbackRate(this.data.settings.get_speed());
	}
	,ask_loadState: function(cb) {
		var _g = this;
		var pr = new bp_ui_dia_ConfirmNotification();
		pr.leftButton.text.set("Load Session");
		pr.rightButton.text.set("Dismiss");
		pr.th.set_text("Restore Session?");
		pr.tp.set_text("You have a previous session stored. Would you like to restore it?");
		pr.leftButton.click = function(event) {
			pr.close();
			_g.loadState(cb);
		};
		pr.rightButton.click = function(event1) {
			pr.close();
			if(cb != null) cb();
		};
		this.notifications.addNotification(pr);
		pr.open();
	}
	,loadState: function(cb) {
		var _g = this;
		this.restoreState(function() {
			_g.pane.video.set_volume(_g.data.settings.get_volume());
			_g.pane.video.set_playbackRate(_g.data.settings.get_speed());
			_g.status.message("edit:pl","Restored saved session");
			if(cb != null) cb();
		});
	}
	,applyOptions: function() {
		if(this.options.launchData != null) {
			var ld = this.options.launchData;
			this.processLaunchData(ld);
		}
	}
	,processLaunchData: function(ld,callback) {
		if(ld.items != null) {
			var entries = ld.items.map(function(item) {
				return bp_ds_VideoSource.VSFile(item.entry,null);
			});
			var loader = new bp_ds_TrackLoader(this);
			loader.load(entries,function() {
				if(callback != null) callback();
			});
		}
	}
	,getState: function() {
		return new bp_ds_PlayerState(this);
	}
	,saveState: function(cb) {
		this.data.session.saveState(this,cb);
	}
	,restoreState: function(cb) {
		this.data.session.restoreState(this,cb);
	}
	,dragEvent: function(event) {
	}
	,canGetPixels: function() {
		if(this.pane.video.currentTrack == null) return true; else return !(function($this) {
			var $r;
			var _g = $this.pane.video.currentTrack.source;
			$r = (function($this) {
				var $r;
				switch(_g[1]) {
				case 1:
					$r = true;
					break;
				default:
					$r = false;
				}
				return $r;
			}($this));
			return $r;
		}(this));
	}
	,get_video: function() {
		return this.pane.video;
	}
	,get_selectedVideo: function() {
		return this.getSelectedPane().video;
	}
	,get_currentTrack: function() {
		return this.pane.video.currentTrack;
	}
	,get_shuffle: function() {
		return this.data.settings.get_shuffle();
	}
	,set_shuffle: function(v) {
		this.data.settings.setAttribute("shuffle",v);
		if(this.data.settings.get_shuffle()) this.playlist.shuffle();
		return this.data.settings.get_shuffle();
	}
	,get_prefs: function() {
		return this.data.settings.preferences;
	}
	,get_slm: function() {
		return this.data.settings.preferences.get_sessionLoadMode();
	}
	,get_persistentSession: function() {
		var _g = this.data.settings.preferences.get_sessionLoadMode();
		switch(_g) {
		case 0:case 1:
			return true;
		case 2:
			return false;
		}
	}
	,get_win: function() {
		return this.app.contentWindow;
	}
	,set_show_ui: function(v) {
		var _sui = this.show_ui;
		this.show_ui = v;
		switch(_sui) {
		case false:
			switch(v) {
			case true:
				this.stage.set_cursor("default");
				break;
			default:
				null;
			}
			break;
		case true:
			switch(v) {
			case false:
				this.stage.set_cursor("none");
				break;
			default:
				null;
			}
			break;
		}
		return this.show_ui;
	}
	,get_fullscreen: function() {
		return this.app.isFullscreen();
	}
	,__class__: bp_core_Player
	,__properties__: $extend(bp_core_Ent.prototype.__properties__,{get_fullscreen:"get_fullscreen",set_show_ui:"set_show_ui",get_win:"get_win",get_persistentSession:"get_persistentSession",get_slm:"get_slm",get_prefs:"get_prefs",set_shuffle:"set_shuffle",get_shuffle:"get_shuffle",get_currentTrack:"get_currentTrack",get_selectedVideo:"get_selectedVideo",get_video:"get_video"})
});
var bp_display_Icons = function() { };
$hxClasses["bp.display.Icons"] = bp_display_Icons;
bp_display_Icons.__name__ = ["bp","display","Icons"];
bp_display_Icons.canvas = function(w,h) {
	return gryffin_display_Canvas.create(w,h);
};
bp_display_Icons.playIcon = function(w,h,bg) {
	return bp_display_Icons.icon(w,h,function(svg) {
		var path = new vex_svg_SVGPath();
		svg.append(path);
		path.style.set_fill(bg);
		var c = path.edit();
		c.moveTo(30.0833,22.1667);
		c.lineTo(50.6665,37.6043);
		c.lineTo(50.6665,38.7918);
		c.lineTo(30.0833,53.8333);
		c.lineTo(30.0833,22.1667);
		c.close();
		c.save();
	});
};
bp_display_Icons.pauseIcon = function(w,h,bg) {
	return bp_display_Icons.icon(w,h,function(svg) {
		var p = new vex_svg_SVGPath();
		svg.append(p);
		p.style.set_fill(bg);
		var c = p.edit();
		c.moveTo(26.9167,23.75);
		c.lineTo(33.25,23.75);
		c.lineTo(33.25,52.25);
		c.lineTo(26.9167,52.25);
		c.lineTo(26.9167,23.75);
		c.close();
		c.moveTo(42.75,23.75);
		c.lineTo(49.0833,23.75);
		c.lineTo(49.0833,52.25);
		c.lineTo(42.75,52.25);
		c.lineTo(42.75,23.75);
		c.close();
		c.save();
	});
};
bp_display_Icons.icon = function(w,h,f) {
	var svg = new vex_svg_SVGDocument();
	svg.set_width(w);
	svg.set_height(h);
	svg.set_viewBox(tannus_geom__$Rectangle_Rectangle_$Impl_$.fromArray([76,76]));
	f(svg);
	var svgCode = svg.print();
	var blob;
	var dat = tannus_io_impl_BrowserBinary.ofString(svgCode);
	blob = new tannus_io_CBlob("blob","image/svg+xml",dat);
	return gryffin_display_Image.load(URL.createObjectURL(new Blob([blob.data.b],{ 'type' : blob.type})));
};
var bp_display_VideoPane = function(p) {
	this.menu = null;
	bp_core_Ent.call(this);
	this.video = new bp_ds_Video();
	this.player = p;
	this.par = null;
};
$hxClasses["bp.display.VideoPane"] = bp_display_VideoPane;
bp_display_VideoPane.__name__ = ["bp","display","VideoPane"];
bp_display_VideoPane.__super__ = bp_core_Ent;
bp_display_VideoPane.prototype = $extend(bp_core_Ent.prototype,{
	init: function(stage) {
		bp_core_Ent.prototype.init.call(this,stage);
	}
	,update: function(s) {
		bp_core_Ent.prototype.update.call(this,s);
		if(this.par == null) this.par = this.parentUntil(function(e) {
			return js_Boot.__instanceof(e,bp_core_Ent);
		});
		if(this.menu == null) this.menu = this.stage.get("bp.ui.AppMenu").selected[0];
		if(this.par != null) this.rect.cloneFrom(this.par.rect);
		if(this.menu != null && this.menu.get_hideMenu()) this.rect.y = 0;
	}
	,render: function(s,c) {
		c.ctx.save();
		c.set_fillStyle("black");
		c.fillRect(this.rect.x,this.rect.y,this.get_w(),this.get_h());
		var vr = this.get_videoRect();
		c.drawComponent(this.video,0,0,this.video.vid.videoWidth,this.video.vid.videoHeight,vr.x,vr.y,vr.width,vr.height);
		c.ctx.restore();
	}
	,get_entParent: function() {
		return this.parentUntil(function(e) {
			return js_Boot.__instanceof(e,bp_core_Ent);
		});
	}
	,get_videoRect: function() {
		var r = this.rect.clone();
		r.set_w(this.video.get_aspectRatio().topValue(r.height));
		r.set_centerX(this.get_centerX());
		return r;
	}
	,__class__: bp_display_VideoPane
	,__properties__: $extend(bp_core_Ent.prototype.__properties__,{get_videoRect:"get_videoRect",get_entParent:"get_entParent"})
});
var tannus_io_EventDispatcher = function() {
	this.__checkEvents = true;
	this._sigs = new haxe_ds_StringMap();
};
$hxClasses["tannus.io.EventDispatcher"] = tannus_io_EventDispatcher;
tannus_io_EventDispatcher.__name__ = ["tannus","io","EventDispatcher"];
tannus_io_EventDispatcher.prototype = {
	addSignal: function(name,sig) {
		var v;
		var alt = new tannus_io_Signal();
		if(sig != null) v = sig; else v = alt;
		this._sigs.set(name,v);
		v;
	}
	,addSignals: function(names) {
		var _g = 0;
		while(_g < names.length) {
			var name = names[_g];
			++_g;
			this.addSignal(name);
		}
	}
	,getSignal: function(name) {
		if(!this.canDispatch(name)) {
			if(this.__checkEvents) throw new js__$Boot_HaxeError("InvalidEvent: \"" + name + "\" is not a valid Event"); else {
				var v = new tannus_io_Signal();
				this._sigs.set(name,v);
				v;
			}
		}
		return this._sigs.get(name);
	}
	,canDispatch: function(name) {
		return this._sigs.exists(name);
	}
	,on: function(name,action,once) {
		this.getSignal(name).on(action,once);
	}
	,once: function(name,action) {
		this.on(name,action,true);
	}
	,dispatch: function(name,data) {
		this.getSignal(name).call(data);
	}
	,off: function(name,action) {
		var sig = this.getSignal(name);
		if(action != null) sig.ignore(action); else sig.handlers = [];
	}
	,when: function(name,test,action) {
		this.getSignal(name).when(test,action);
	}
	,__class__: tannus_io_EventDispatcher
};
var tannus_ds_Destructible = function() { };
$hxClasses["tannus.ds.Destructible"] = tannus_ds_Destructible;
tannus_ds_Destructible.__name__ = ["tannus","ds","Destructible"];
tannus_ds_Destructible.prototype = {
	__class__: tannus_ds_Destructible
};
var tannus_mvc_Asset = function() { };
$hxClasses["tannus.mvc.Asset"] = tannus_mvc_Asset;
tannus_mvc_Asset.__name__ = ["tannus","mvc","Asset"];
tannus_mvc_Asset.__interfaces__ = [tannus_ds_Destructible];
tannus_mvc_Asset.prototype = {
	__class__: tannus_mvc_Asset
};
var tannus_mvc_Model = function() {
	this.autoSave = false;
	var _g = this;
	tannus_io_EventDispatcher.call(this);
	this.am = new tannus_mvc_ModelCollection(this);
	this.change = new tannus_io_Signal();
	this.assets = [];
	this.readyReqs = new tannus_mvc_Requirements();
	this._ready = new tannus_io_VoidSignal();
	this._a = new haxe_ds_StringMap();
	this._bindMethodsToEvents();
	var saving = false;
	this.change.listen(function(c) {
		if(_g.autoSave && !saving) {
			saving = true;
			_g.sync(function() {
				saving = false;
			});
		}
	},false);
};
$hxClasses["tannus.mvc.Model"] = tannus_mvc_Model;
tannus_mvc_Model.__name__ = ["tannus","mvc","Model"];
tannus_mvc_Model.__interfaces__ = [tannus_mvc_Asset];
tannus_mvc_Model.__super__ = tannus_io_EventDispatcher;
tannus_mvc_Model.prototype = $extend(tannus_io_EventDispatcher.prototype,{
	init: function(cb) {
		var _g = this;
		if(cb != null) this._ready.once(cb);
		this.readyReqs.meet(function() {
			_g.sync(function() {
				_g._ready.call();
			});
		});
	}
	,onready: function(f) {
		this._ready.once(f);
	}
	,link: function(item) {
		this.assets.push(item);
	}
	,unlink: function(item) {
		HxOverrides.remove(this.assets,item);
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.assets;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			a.destroy();
		}
	}
	,detach: function() {
		var _g = 0;
		var _g1 = this.assets;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			a.detach();
		}
	}
	,require: function(name,task) {
		this.readyReqs.tasks.set(name,task);
	}
	,sync: function(done) {
		done();
	}
	,save: function() {
		this.sync(function() {
			null;
		});
	}
	,watch: function(f) {
		this.change.listen(f,false);
	}
	,unwatch: function(f) {
		if(f == null) this.change.handlers = []; else this.change.ignore(f);
	}
	,watchKey: function(key,f) {
		this.change.listen(function(c) {
			if(c.name == key) f();
		},false);
	}
	,getAttribute: function(key) {
		return this._a.get(key);
	}
	,get: function(k) {
		return this.getAttribute(k);
	}
	,mget: function(k) {
		return this.getAttribute(k);
	}
	,setAttribute: function(key,value) {
		var d = { name : key, value : (function($this) {
			var $r;
			var prev = $this.getAttribute(key);
			$r = [value,prev];
			return $r;
		}(this))};
		this._a.set(key,value);
		var curr = this._a.get(key);
		this.change.broadcast(d);
		return curr;
	}
	,set: function(key,value) {
		return this.setAttribute(key,value);
	}
	,reference: function(key) {
		var ref;
		var g = (function(f,a1) {
			return function() {
				return f(a1);
			};
		})($bind(this,this.getAttribute),key);
		var s = (function(f1,a11) {
			return function(a2) {
				return f1(a11,a2);
			};
		})($bind(this,this.setAttribute),key);
		ref = new tannus_io__$Pointer_Ref(g,s);
		return ref;
	}
	,attribute: function(key,dv) {
		var a = new tannus_mvc_Attribute(this,key);
		if(dv != null) a.defaultValue = dv;
		return this.bindAttribute(a);
	}
	,listAttribute: function(key,dv) {
		var a = new tannus_mvc_ListAttribute(this,key);
		if(dv != null) a.defaultValue = dv;
		return this.bindAttribute(a);
	}
	,bindAttribute: function(a) {
		if(a.model != this) a.rebind(this);
		this.am.addAttribute(a);
		return a;
	}
	,hasAttribute: function(name) {
		return this._a.exists(name);
	}
	,exists: function(key) {
		return this.hasAttribute(key);
	}
	,removeAttribute: function(name) {
		return this._a.remove(name);
	}
	,remove: function(key) {
		return this.removeAttribute(key);
	}
	,allAttributes: function() {
		var _g = [];
		var $it0 = this._a.keys();
		while( $it0.hasNext() ) {
			var k = $it0.next();
			_g.push(k);
		}
		return _g;
	}
	,keys: function() {
		return this.allAttributes();
	}
	,clearAttributes: function() {
		var _g = 0;
		var _g1 = this.allAttributes();
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			this.removeAttribute(item);
		}
		this.save();
	}
	,clear: function() {
		this.clearAttributes();
	}
	,_bindMethodsToEvents: function() {
		var cclass = js_Boot.getClass(this);
		var data = haxe_rtti_Meta.getFields(cclass);
		var _g = 0;
		var _g1 = Reflect.fields(data);
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			var field;
			{
				var this1 = Reflect.getProperty(data,name);
				if(this1 != null) field = this1; else field = this1;
			}
			if(Object.prototype.hasOwnProperty.call(field,"handle")) {
				var events = Reflect.getProperty(field,"handle");
				var val = Reflect.getProperty(this,name);
				if(!Reflect.isFunction(val)) throw new js__$Boot_HaxeError("TypeError: Cannot bind field " + name + "!");
				var _g2 = 0;
				while(_g2 < events.length) {
					var event = events[_g2];
					++_g2;
					if(!this.canDispatch(event)) this.addSignal(event);
					this.on(event,val);
				}
			}
		}
	}
	,__class__: tannus_mvc_Model
});
var tannus_mvc_StoredModel = function() {
	tannus_mvc_Model.call(this);
};
$hxClasses["tannus.mvc.StoredModel"] = tannus_mvc_StoredModel;
tannus_mvc_StoredModel.__name__ = ["tannus","mvc","StoredModel"];
tannus_mvc_StoredModel.__super__ = tannus_mvc_Model;
tannus_mvc_StoredModel.prototype = $extend(tannus_mvc_Model.prototype,{
	getAttribute: function(key) {
		return this.storage.get(this.map_key(key));
	}
	,setAttribute: function(key,value) {
		var c = { name : key, value : (function($this) {
			var $r;
			var prev = $this.getAttribute(key);
			$r = [value,prev];
			return $r;
		}(this))};
		var curr = this.storage.set(this.map_key(key),value);
		this.change.broadcast(c);
		return curr;
	}
	,removeAttribute: function(key) {
		var c = { name : this.map_key(key), value : (function($this) {
			var $r;
			var prev = $this.getAttribute(key);
			$r = [null,prev];
			return $r;
		}(this))};
		var had = this.storage.exists(this.map_key(key));
		this.storage.remove(this.map_key(key));
		this.change.broadcast(c);
		return had;
	}
	,hasAttribute: function(key) {
		return this.storage.exists(this.map_key(key));
	}
	,allAttributes: function() {
		return this.storage.keys();
	}
	,map_key: function(key) {
		return key;
	}
	,sync: function(f) {
		var _g = this;
		this.storage.fetch(function() {
			_g.storage.push(f);
		});
	}
	,rollback: function(cb) {
		this.storage.rollback();
		this.storage.fetch(function() {
			if(cb != null) cb();
		});
	}
	,set_storage: function(v) {
		var _g = this;
		this.storage = v;
		this.readyReqs.tasks.set("storage",function(met) {
			_g.storage.init(met);
		});
		return this.storage;
	}
	,__class__: tannus_mvc_StoredModel
	,__properties__: {set_storage:"set_storage"}
});
var bp_ds_AppData = function(s) {
	tannus_mvc_StoredModel.call(this);
	this.set_storage(s);
	this.attach_submodels();
};
$hxClasses["bp.ds.AppData"] = bp_ds_AppData;
bp_ds_AppData.__name__ = ["bp","ds","AppData"];
bp_ds_AppData.getStorage = function(cb) {
	var storage = new tannus_storage_chrome_ChromeStorage(chrome.storage.local);
	cb(storage);
};
bp_ds_AppData.__super__ = tannus_mvc_StoredModel;
bp_ds_AppData.prototype = $extend(tannus_mvc_StoredModel.prototype,{
	attach_submodels: function() {
		this.settings = new bp_ds_Settings(this);
		this.session = new bp_ds_Session(this);
		this.registry = new bp_ds_TrackMetas(this);
		this.bookmarks = new bp_ds_BookmarkLibrary(this);
		this.tags = new bp_tags_Tags(this);
	}
	,getAppDir: function(prompt) {
		if(prompt == null) prompt = false;
		var _g = this;
		var prom = new tannus_ds_Promise(function(accept,reject) {
			var adp = _g.getApplicationDirectory(prompt);
			adp.then(function(dir) {
				_g.set_appDirectoryId(chrome.fileSystem.retainEntry(dir));
				_g.save();
				accept(dir);
			});
			adp.unless(function(err) {
				if(typeof(err) == "string") {
					var error = err;
					switch(error) {
					case "cnr":
						_g.getAppDir(true).then(accept).unless(reject);
						break;
					case "nds":
						accept(null);
						break;
					}
				} else reject(err);
			});
		},null);
		return prom;
	}
	,getApplicationDirectory: function(prompt) {
		if(prompt == null) prompt = false;
		var _g = this;
		return new tannus_ds_Promise(function(accept,reject) {
			if(_g.getAttribute("adi") != null && !prompt) tannus_chrome_FileSystem.isRestorable(_g.getAttribute("adi"),function(canRestore) {
				if(canRestore) tannus_chrome_FileSystem.restoreEntry(_g.getAttribute("adi"),function(entry) {
					var dentry = entry;
					accept(dentry);
				}); else reject("cnr");
			}); else _g.appDirPrompt(function(d) {
				if(d == null) reject("nds"); else accept(d);
			});
		},null);
	}
	,appDirPrompt: function(cb) {
		var cdn = new bp_ui_dia_ChooseDirectoryNotification();
		cdn.th.set_text("No Folder Selected");
		cdn.tp.set_text("You haven't selected a Folder for BPlayer to store things in. You can choose one now.");
		cdn.chosen.listen(function(dir) {
			cb(dir);
		},true);
		cdn.dismissed.once(function() {
			cb(null);
		});
		var nd = bp_core_Player.instance.notifications;
		nd.addNotification(cdn);
		cdn.open();
	}
	,getThumbsDirectory: function(callback) {
		var fp = this.getAppDir();
		fp.then(function(dir) {
			var d = dir;
			var thump;
			var path = tannus_sys__$Path_Path_$Impl_$.fromString("thumbs");
			thump = new tannus_ds_Promise((function(f,a1,a2) {
				return function(a3,a4) {
					f(a1,a2,a3,a4);
				};
			})(($_=d,$bind($_,$_.getDirectory)),path,{ 'create' : true}));
			thump.then(function(thumbs) {
				callback(thumbs);
			});
		});
	}
	,get_lastSession: function() {
		if(this.hasAttribute("session")) return this.getAttribute("session"); else return null;
	}
	,set_lastSession: function(v) {
		return this.setAttribute("session",v);
	}
	,get_appDirectoryId: function() {
		return this.getAttribute("adi");
	}
	,set_appDirectoryId: function(v) {
		return this.setAttribute("adi",v);
	}
	,get_cmd_history: function() {
		if(this.hasAttribute("history")) return this.getAttribute("history"); else return [];
	}
	,set_cmd_history: function(v) {
		return this.setAttribute("history",v);
	}
	,__class__: bp_ds_AppData
	,__properties__: $extend(tannus_mvc_StoredModel.prototype.__properties__,{set_cmd_history:"set_cmd_history",get_cmd_history:"get_cmd_history",set_appDirectoryId:"set_appDirectoryId",get_appDirectoryId:"get_appDirectoryId",set_lastSession:"set_lastSession",get_lastSession:"get_lastSession"})
});
var bp_ds_Bookmark = function(track,type,time) {
	this.track = track;
	this.type = type;
	this.time = time;
};
$hxClasses["bp.ds.Bookmark"] = bp_ds_Bookmark;
bp_ds_Bookmark.__name__ = ["bp","ds","Bookmark"];
bp_ds_Bookmark.prototype = {
	equals: function(other) {
		return this.track == other.track && Type.enumEq(this.type,other.type) && this.time.equals(other.time);
	}
	,get_name: function() {
		{
			var _g = this.type;
			switch(_g[1]) {
			case 0:
				var n = _g[2];
				return n;
			case 1:
				return "Beginning of Track";
			case 2:
				return "End of Track";
			}
		}
	}
	,get_isStart: function() {
		var _g = this.type;
		switch(_g[1]) {
		case 1:
			return true;
		default:
			return false;
		}
	}
	,get_isEnd: function() {
		var _g = this.type;
		switch(_g[1]) {
		case 2:
			return true;
		default:
			return false;
		}
	}
	,get_isNamed: function() {
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return true;
		default:
			return false;
		}
	}
	,__class__: bp_ds_Bookmark
	,__properties__: {get_isNamed:"get_isNamed",get_isEnd:"get_isEnd",get_isStart:"get_isStart",get_name:"get_name"}
};
var bp_ds__$BookmarkCollection_BookmarkCollection_$Impl_$ = {};
$hxClasses["bp.ds._BookmarkCollection.BookmarkCollection_Impl_"] = bp_ds__$BookmarkCollection_BookmarkCollection_$Impl_$;
bp_ds__$BookmarkCollection_BookmarkCollection_$Impl_$.__name__ = ["bp","ds","_BookmarkCollection","BookmarkCollection_Impl_"];
bp_ds__$BookmarkCollection_BookmarkCollection_$Impl_$._new = function(list) {
	return list != null?list:[];
};
bp_ds__$BookmarkCollection_BookmarkCollection_$Impl_$.hasStart = function(this1) {
	return tannus_ds_ArrayTools.firstMatch(this1,function(item) {
		return item.get_isStart();
	}) != null;
};
bp_ds__$BookmarkCollection_BookmarkCollection_$Impl_$.hasEnd = function(this1) {
	return tannus_ds_ArrayTools.firstMatch(this1,function(item) {
		return item.get_isEnd();
	}) != null;
};
bp_ds__$BookmarkCollection_BookmarkCollection_$Impl_$.getStart = function(this1) {
	return tannus_ds_ArrayTools.firstMatch(this1,function(item) {
		return item.get_isStart();
	});
};
bp_ds__$BookmarkCollection_BookmarkCollection_$Impl_$.getEnd = function(this1) {
	return tannus_ds_ArrayTools.firstMatch(this1,function(item) {
		return item.get_isEnd();
	});
};
bp_ds__$BookmarkCollection_BookmarkCollection_$Impl_$.getByName = function(this1,name) {
	return tannus_ds_ArrayTools.firstMatch(this1,function(item) {
		return item.get_isNamed() && item.get_name() == name;
	});
};
bp_ds__$BookmarkCollection_BookmarkCollection_$Impl_$.hasMarkNamed = function(this1,name) {
	return (function($this) {
		var $r;
		var name1 = name;
		$r = tannus_ds_ArrayTools.firstMatch(this1,function(item) {
			return item.get_isNamed() && item.get_name() == name1;
		});
		return $r;
	}(this)) != null;
};
var tannus_utils_JavaScriptError = function(message) {
	Error.call(this,message);
};
$hxClasses["tannus.utils.JavaScriptError"] = tannus_utils_JavaScriptError;
tannus_utils_JavaScriptError.__name__ = ["tannus","utils","JavaScriptError"];
tannus_utils_JavaScriptError.__super__ = Error;
tannus_utils_JavaScriptError.prototype = $extend(Error.prototype,{
	__class__: tannus_utils_JavaScriptError
});
var bp_ds_BookmarkError = function(type) {
	tannus_utils_JavaScriptError.call(this,bp_ds_BookmarkError.messageFor(type));
	this.type = type;
};
$hxClasses["bp.ds.BookmarkError"] = bp_ds_BookmarkError;
bp_ds_BookmarkError.__name__ = ["bp","ds","BookmarkError"];
bp_ds_BookmarkError.messageFor = function(type) {
	{
		var o = type[2];
		return "A bookmark named \"" + o.get_name() + "\" is already attached to Track \"" + o.track + "\"";
	}
};
bp_ds_BookmarkError.__super__ = tannus_utils_JavaScriptError;
bp_ds_BookmarkError.prototype = $extend(tannus_utils_JavaScriptError.prototype,{
	__class__: bp_ds_BookmarkError
});
var bp_ds_BookmarkErrorType = $hxClasses["bp.ds.BookmarkErrorType"] = { __ename__ : ["bp","ds","BookmarkErrorType"], __constructs__ : ["BMEDuplicateNamed"] };
bp_ds_BookmarkErrorType.BMEDuplicateNamed = function(original) { var $x = ["BMEDuplicateNamed",0,original]; $x.__enum__ = bp_ds_BookmarkErrorType; $x.toString = $estr; return $x; };
var bp_ds_BookmarkLibrary = function(dat) {
	var _g = this;
	tannus_mvc_StoredModel.call(this);
	this.data = dat;
	var sub = new tannus_storage_SubStorage(function() {
		return _g.data.storage;
	});
	sub.prefix = "bml:";
	this.set_storage(sub);
	this.data.require("marks",$bind(this,this.init));
};
$hxClasses["bp.ds.BookmarkLibrary"] = bp_ds_BookmarkLibrary;
bp_ds_BookmarkLibrary.__name__ = ["bp","ds","BookmarkLibrary"];
bp_ds_BookmarkLibrary.__super__ = tannus_mvc_StoredModel;
bp_ds_BookmarkLibrary.prototype = $extend(tannus_mvc_StoredModel.prototype,{
	addBookmark: function(m) {
		var id;
		try {
			id = (this.hasAttribute("lastId")?this.getAttribute("lastId"):-1) + 1;
			this.updateBookmark(id,m);
			this.setAttribute("lastId",id);
		} catch( error ) {
			if (error instanceof js__$Boot_HaxeError) error = error.val;
			if( js_Boot.__instanceof(error,bp_ds_BookmarkError) ) {
				window.console.error(error);
				{
					var _g = error.type;
					var o = _g[2];
					id = o.id;
					this.updateBookmark(id,m);
				}
			} else throw(error);
		}
		return new bp_ds_LibraryBookmark(this,id,m);
	}
	,updateBookmark: function(id,m) {
		if(this.hasBookmark(id)) {
			var lm = new bp_ds_LibraryBookmark(this,id,m);
			this.validateBookmarkUpdate(lm);
		} else this.validateBookmarkCreate(m);
		var key;
		if(id == null) key = "null"; else key = "" + id;
		var data = [];
		var itime;
		var this1 = m.time;
		itime = 3600 * this1.hours + 60 * this1.minutes + this1.seconds;
		data.push(itime);
		data.push(m.track);
		data.push(m.type[1]);
		var params = m.type.slice(2);
		var _g = 0;
		while(_g < params.length) {
			var item = params[_g];
			++_g;
			data.push(item);
		}
		console.log(data);
		this.setAttribute(key,data);
	}
	,removeBookmarkById: function(id) {
		return this.removeAttribute(id + "");
	}
	,removeBookmark: function(mark) {
		return this.removeBookmarkById(mark.id);
	}
	,hasBookmark: function(id) {
		return this.hasAttribute(id == null?"null":"" + id);
	}
	,getBookmarkById: function(id) {
		if(this.hasAttribute(id + "")) {
			var data = this.getAttribute(id + "");
			data = data.slice();
			var n = (function(f) {
				return function() {
					return f();
				};
			})($bind(data,data.shift));
			var time;
			var i = n();
			time = tannus_media_CDur.fromSecondsI(i);
			var track = n();
			var typeIndex = n();
			var type;
			var params = data.slice();
			type = Type.createEnumIndex(bp_ds_BookmarkType,typeIndex,params);
			var mark = new bp_ds_Bookmark(track,type,time);
			return new bp_ds_LibraryBookmark(this,id,mark);
		} else return null;
	}
	,allIds: function() {
		var idKeys = this.allAttributes().filter(function(item) {
			return tannus_ds_StringUtils.isNumeric(item);
		});
		var ids = idKeys.map(Std.parseInt);
		return ids;
	}
	,all: function(filterer) {
		if(filterer == null) filterer = function(m) {
			return true;
		};
		var results = [];
		var ids = this.allIds();
		var _g = 0;
		while(_g < ids.length) {
			var id = ids[_g];
			++_g;
			var mark = this.getBookmarkById(id);
			if(filterer(mark)) results.push(mark);
		}
		return results != null?results:[];
	}
	,getBookmarksByTrackId: function(id) {
		return this.all(function(mark) {
			return mark.track == id;
		});
	}
	,getBookmarksByTrack: function(track) {
		return this.getBookmarksByTrackId(track.id);
	}
	,search: function(term) {
		var res = [];
		var checks = [];
		if(term.track != null) checks.push(function(x) {
			return x.track == term.track;
		});
		if(term.type != null) checks.push(function(x1) {
			return Type.enumEq(x1.type,term.type);
		});
		if(term.time != null) checks.push(function(x2) {
			return x2.time.equals(term.time);
		});
		var $it0 = (function($this) {
			var $r;
			var _this = $this.all();
			$r = HxOverrides.iter(_this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var m = $it0.next();
			var m1 = [m];
			var vals = checks.map((function(m1) {
				return function(item) {
					return item(m1[0]);
				};
			})(m1));
			if(!Lambda.has(vals,false)) res.push(m1[0]);
		}
		return res;
	}
	,mark: function(trackId,time,type) {
		return new bp_ds_Bookmark(trackId,type,time);
	}
	,startMark: function(track,time) {
		return new bp_ds_Bookmark(track,bp_ds_BookmarkType.BMStart,time);
	}
	,endMark: function(track,time) {
		return new bp_ds_Bookmark(track,bp_ds_BookmarkType.BMEnd,time);
	}
	,namedMark: function(track,time,name) {
		return this.mark(track,time,bp_ds_BookmarkType.BMNamed(name));
	}
	,validateBookmarkUpdate: function(m) {
		var bag = this.getBookmarksByTrackId(m.track);
		if(m.get_isStart() && tannus_ds_ArrayTools.firstMatch(bag,function(item) {
			return item.get_isStart();
		}) != null) {
			var bs = tannus_ds_ArrayTools.firstMatch(bag,function(item1) {
				return item1.get_isStart();
			});
			if(!m.equals(bs)) bs.remove();
		}
		if(m.get_isEnd() && tannus_ds_ArrayTools.firstMatch(bag,function(item2) {
			return item2.get_isEnd();
		}) != null) {
			var e = tannus_ds_ArrayTools.firstMatch(bag,function(item3) {
				return item3.get_isEnd();
			});
			if(!m.equals(e)) e.remove();
		}
	}
	,validateBookmarkCreate: function(m) {
		var bag = this.getBookmarksByTrackId(m.track);
		if(m.get_isNamed()) {
			var name = m.get_name();
			if((function($this) {
				var $r;
				var name1 = name;
				$r = tannus_ds_ArrayTools.firstMatch(bag,function(item) {
					return item.get_isNamed() && item.get_name() == name1;
				});
				return $r;
			}(this)) != null) {
				var pm;
				var name2 = name;
				pm = tannus_ds_ArrayTools.firstMatch(bag,function(item1) {
					return item1.get_isNamed() && item1.get_name() == name2;
				});
				pm.remove();
			}
		}
	}
	,nextId: function() {
		return (this.hasAttribute("lastId")?this.getAttribute("lastId"):-1) + 1;
	}
	,get_lastId: function() {
		if(this.hasAttribute("lastId")) return this.getAttribute("lastId"); else return -1;
	}
	,set_lastId: function(v) {
		return this.setAttribute("lastId",v);
	}
	,__class__: bp_ds_BookmarkLibrary
	,__properties__: $extend(tannus_mvc_StoredModel.prototype.__properties__,{set_lastId:"set_lastId",get_lastId:"get_lastId"})
});
var bp_ds_BookmarkType = $hxClasses["bp.ds.BookmarkType"] = { __ename__ : ["bp","ds","BookmarkType"], __constructs__ : ["BMNamed","BMStart","BMEnd"] };
bp_ds_BookmarkType.BMNamed = function(name) { var $x = ["BMNamed",0,name]; $x.__enum__ = bp_ds_BookmarkType; $x.toString = $estr; return $x; };
bp_ds_BookmarkType.BMStart = ["BMStart",1];
bp_ds_BookmarkType.BMStart.toString = $estr;
bp_ds_BookmarkType.BMStart.__enum__ = bp_ds_BookmarkType;
bp_ds_BookmarkType.BMEnd = ["BMEnd",2];
bp_ds_BookmarkType.BMEnd.toString = $estr;
bp_ds_BookmarkType.BMEnd.__enum__ = bp_ds_BookmarkType;
var bp_ds_Gallery = function(p,options) {
	this._awaitingMeta = false;
	this.player = p;
	this.options = options;
	this._onmeta = new tannus_io_VoidSignal();
	this.tracks = [];
};
$hxClasses["bp.ds.Gallery"] = bp_ds_Gallery;
bp_ds_Gallery.__name__ = ["bp","ds","Gallery"];
bp_ds_Gallery.prototype = {
	open: function() {
		var _g = this;
		this.met(function() {
			console.log("Gallery metadata retrieved");
			_g.loadAll(function(tracks) {
				var location = _g.player.data.galleries.getGalleryLocation({ id : null, name : _g.meta.id});
				if(location == null) _g.player.data.galleries.addGallery(_g);
			});
		});
	}
	,getMetaData: function(cb) {
		var _g = this;
		this._awaitingMeta = true;
		var met = { };
		var stack = new tannus_ds_AsyncStack();
		if(this.options.id != null) stack.under(function(next) {
			met.id = _g.options.id;
			chrome.fileSystem.restoreEntry(_g.options.id,function(e) {
				met.entry = e;
				next();
			});
		}); else if(this.options.entry != null) {
			met.id = chrome.fileSystem.retainEntry(this.options.entry);
			met.entry = this.options.entry;
		}
		if(this.options.name != null) met.name = this.options.name; else stack.under(function(next1) {
			_g.player.galleryNamePrompt(null,function(s) {
				met.name = s;
				next1();
			});
		});
		stack.run(function() {
			_g.meta = met;
			_g._awaitingMeta = false;
			_g._onmeta.call();
			cb();
		});
	}
	,loadAll: function(cb) {
		var _g = this;
		var el = this.player.playlist.tracks.slice();
		var entryPromise = tannus_html_fs__$WebDirectoryReader_WebDirectoryReader_$Impl_$.read(this.meta.entry.createReader());
		entryPromise.then(function(entries) {
			entries = entries.filter(function(item) {
				return item.isFile;
			});
			_g.player.loadEntries(entries,function() {
				var tracks = _g.player.playlist.tracks;
				tracks = tannus_ds_ArrayTools.without(tracks,el);
				cb(tracks);
			});
		});
		entryPromise.unless(function(error) {
			console.log(error);
		});
	}
	,getLocation: function() {
		return this.player.data.galleries.getGalleryLocation({ id : null, name : this.meta.id});
	}
	,met: function(f) {
		if(this.meta == null) {
			if(this._awaitingMeta) this._onmeta.once(f); else this.getMetaData(f);
		} else gryffin_Tools.defer(f);
	}
	,get_name: function() {
		return this.meta.name;
	}
	,set_name: function(v) {
		return this.meta.name = v;
	}
	,get_id: function() {
		return this.meta.id;
	}
	,set_id: function(v) {
		return this.meta.id = v;
	}
	,get_entry: function() {
		return this.meta.entry;
	}
	,__class__: bp_ds_Gallery
	,__properties__: {get_entry:"get_entry",set_id:"set_id",get_id:"get_id",set_name:"set_name",get_name:"get_name"}
};
var bp_ds_GalleryLibrary = function(dat) {
	var _g = this;
	tannus_mvc_StoredModel.call(this);
	this.data = dat;
	var sub = new tannus_storage_SubStorage(function() {
		return _g.data.storage;
	});
	sub.prefix = "gl:";
	this.set_storage(sub);
	this.data.require("marks",$bind(this,this.init));
	this.loaded = new haxe_ds_IntMap();
};
$hxClasses["bp.ds.GalleryLibrary"] = bp_ds_GalleryLibrary;
bp_ds_GalleryLibrary.__name__ = ["bp","ds","GalleryLibrary"];
bp_ds_GalleryLibrary.__super__ = tannus_mvc_StoredModel;
bp_ds_GalleryLibrary.prototype = $extend(tannus_mvc_StoredModel.prototype,{
	nextId: function() {
		var current = this.getAttribute("autoIncrement");
		if(!(current != null)) current = -1;
		return ++current;
	}
	,autoIncrement: function() {
		this.set("autoIncrement",this.nextId());
	}
	,addGallery: function(g) {
		var location = [-1,g.meta.id];
		this.addGalleryLocation(location);
		this.setAttribute("gallery[" + location[0] + "]",g.meta.name);
	}
	,getAllGalleries: function() {
		var _g2 = this;
		var pool = new tannus_ds_AsyncPool();
		var _g = 0;
		var _g1 = this.getAllIds();
		while(_g < _g1.length) {
			var id = [_g1[_g]];
			++_g;
			pool.push((function(id) {
				return function(index,provide) {
					_g2.getGalleryById(id[0],(function() {
						return function(gallery) {
							provide(null,gallery);
						};
					})());
				};
			})(id));
		}
		return new tannus_ds_Promise(function(accept,reject) {
			pool.run(function(results) {
				accept(results.map(function(item) {
					return item.value;
				}));
			});
		},null).array();
	}
	,getAllIds: function() {
		return this.getGalleryLocations().map(function(item) {
			return item[0];
		});
	}
	,getGalleryById: function(id,callback) {
		var _g = this;
		if(!this.loaded.h.hasOwnProperty(id)) {
			var lname = this.getGalleryLocationName(id);
			var smeta_0 = this.getAttribute("gallery[" + id + "]");
			var smeta_1 = lname;
			var meta = { id : smeta_1, name : smeta_0};
			var gallery = new bp_ds_Gallery(bp_core_Player.instance,meta);
			gallery.getMetaData(function() {
				{
					_g.loaded.h[id] = gallery;
					gallery;
				}
				callback(gallery);
			});
		} else callback(this.loaded.h[id]);
	}
	,getGalleryLocationName: function(id) {
		var l = this.getGalleryLocation({ id : id, name : null});
		if(l != null) return l[1]; else return null;
	}
	,getGalleryLocationId: function(name) {
		var l = this.getGalleryLocation({ id : null, name : name});
		if(l != null) return l[0]; else return null;
	}
	,getGalleryLocations: function() {
		if(!this.hasAttribute("locations")) this.set("locations",[]);
		return this.getAttribute("locations");
	}
	,setGalleryLocations: function(list) {
		return this.setAttribute("locations",list);
	}
	,edit_locs: function(action) {
		var l = this.getGalleryLocations();
		action(l);
		this.setAttribute("locations",l);
	}
	,addGalleryLocation: function(location) {
		var sameName = this.getGalleryLocation({ id : null, name : location[1]});
		if(sameName != null && !(sameName[0] == location[0] && sameName[1] == location[1])) return; else {
			var v = this.nextId();
			location[0] = v;
		}
		this.edit_locs(function(locs) {
			locs.push(location);
		});
		this.set("autoIncrement",this.nextId());
	}
	,searchGalleryLocations: function(term) {
		var locs = this.getGalleryLocations();
		var results = [];
		results = locs.filter(function(location) {
			return term.id != null && term.id == location[0] || term.name != null && term.name == location[1];
		});
		return results;
	}
	,getGalleryLocation: function(key) {
		var locs = this.searchGalleryLocations(key);
		return locs[0];
	}
	,__class__: bp_ds_GalleryLibrary
});
var bp_ds__$GalleryLibrary_GalleryLocation_$Impl_$ = {};
$hxClasses["bp.ds._GalleryLibrary.GalleryLocation_Impl_"] = bp_ds__$GalleryLibrary_GalleryLocation_$Impl_$;
bp_ds__$GalleryLibrary_GalleryLocation_$Impl_$.__name__ = ["bp","ds","_GalleryLibrary","GalleryLocation_Impl_"];
bp_ds__$GalleryLibrary_GalleryLocation_$Impl_$.__properties__ = {set_name:"set_name",get_name:"get_name",set_id:"set_id",get_id:"get_id"}
bp_ds__$GalleryLibrary_GalleryLocation_$Impl_$._new = function(id,sid) {
	return [id,sid];
};
bp_ds__$GalleryLibrary_GalleryLocation_$Impl_$.equals = function(this1,other) {
	return this1[0] == other[0] && this1[1] == other[1];
};
bp_ds__$GalleryLibrary_GalleryLocation_$Impl_$.get_id = function(this1) {
	return this1[0];
};
bp_ds__$GalleryLibrary_GalleryLocation_$Impl_$.set_id = function(this1,v) {
	return this1[0] = v;
};
bp_ds__$GalleryLibrary_GalleryLocation_$Impl_$.get_name = function(this1) {
	return this1[1];
};
bp_ds__$GalleryLibrary_GalleryLocation_$Impl_$.set_name = function(this1,v) {
	return this1[1] = v;
};
var bp_ds__$GalleryLibrary_GalleryLocationKey_$Impl_$ = {};
$hxClasses["bp.ds._GalleryLibrary.GalleryLocationKey_Impl_"] = bp_ds__$GalleryLibrary_GalleryLocationKey_$Impl_$;
bp_ds__$GalleryLibrary_GalleryLocationKey_$Impl_$.__name__ = ["bp","ds","_GalleryLibrary","GalleryLocationKey_Impl_"];
bp_ds__$GalleryLibrary_GalleryLocationKey_$Impl_$._new = function(id,name) {
	return { id : id, name : name};
};
bp_ds__$GalleryLibrary_GalleryLocationKey_$Impl_$.fromString = function(s) {
	return { id : null, name : s};
};
bp_ds__$GalleryLibrary_GalleryLocationKey_$Impl_$.fromInt = function(i) {
	return { id : i, name : null};
};
bp_ds__$GalleryLibrary_GalleryLocationKey_$Impl_$.fromDynamic = function(x) {
	var key = null;
	if(typeof(x) == "string") {
		var name = x;
		key = { id : null, name : name};
	} else if(((x | 0) === x)) {
		var id = x;
		key = { id : id, name : null};
	} else throw new js__$Boot_HaxeError("Error: " + Std.string(x) + " cannot be used as a Gallery Location key");
	return key;
};
var bp_ds_LibraryBookmark = function(l,id,m) {
	bp_ds_Bookmark.call(this,m.track,m.type,m.time);
	this.library = l;
	this.id = id;
};
$hxClasses["bp.ds.LibraryBookmark"] = bp_ds_LibraryBookmark;
bp_ds_LibraryBookmark.__name__ = ["bp","ds","LibraryBookmark"];
bp_ds_LibraryBookmark.__super__ = bp_ds_Bookmark;
bp_ds_LibraryBookmark.prototype = $extend(bp_ds_Bookmark.prototype,{
	update: function() {
		this.library.updateBookmark(this.id,this);
	}
	,remove: function() {
		this.library.removeBookmark(this);
	}
	,rename: function(newname) {
		if(this.get_isNamed()) {
			this.type = bp_ds_BookmarkType.BMNamed(newname);
			this.update();
			return true;
		} else return false;
	}
	,equals: function(other) {
		var eq = bp_ds_Bookmark.prototype.equals.call(this,other);
		if(eq && js_Boot.__instanceof(other,bp_ds_LibraryBookmark)) return this.id == (js_Boot.__cast(other , bp_ds_LibraryBookmark)).id; else return eq;
	}
	,__class__: bp_ds_LibraryBookmark
});
var bp_ds_PlayerError = $hxClasses["bp.ds.PlayerError"] = { __ename__ : ["bp","ds","PlayerError"], __constructs__ : ["ELoadFailed","EInvalidType","ECustom"] };
bp_ds_PlayerError.ELoadFailed = function(name) { var $x = ["ELoadFailed",0,name]; $x.__enum__ = bp_ds_PlayerError; $x.toString = $estr; return $x; };
bp_ds_PlayerError.EInvalidType = function(name) { var $x = ["EInvalidType",1,name]; $x.__enum__ = bp_ds_PlayerError; $x.toString = $estr; return $x; };
bp_ds_PlayerError.ECustom = function(error) { var $x = ["ECustom",2,error]; $x.__enum__ = bp_ds_PlayerError; $x.toString = $estr; return $x; };
var tannus_async_Async = function() { };
$hxClasses["tannus.async.Async"] = tannus_async_Async;
tannus_async_Async.__name__ = ["tannus","async","Async"];
var bp_ds_PlayerState = function(p) {
	this.playing = null;
	this.playlist = [];
	this.errors = [];
	if(p != null) this.extractData(p);
};
$hxClasses["bp.ds.PlayerState"] = bp_ds_PlayerState;
bp_ds_PlayerState.__name__ = ["bp","ds","PlayerState"];
bp_ds_PlayerState.__interfaces__ = [tannus_async_Async];
bp_ds_PlayerState.prototype = {
	extractData: function(player) {
		this.playlist = [];
		var $it0 = player.playlist.iterator();
		while( $it0.hasNext() ) {
			var track = $it0.next();
			var td = track.getState();
			if(td != null) this.playlist.push(td);
		}
		if(player.pane.video.currentTrack != null) this.playing = { 'trackId' : player.pane.video.currentTrack.id, 'time' : player.pane.video.vid.currentTime, 'paused' : player.pane.video.vid.paused};
	}
	,apply: function(player,cb) {
		var _g = this;
		this.lpl(player,function() {
			var playingTrack = player.playlist.getTrackById(_g.playing.trackId);
			player["goto"](playingTrack,function() {
				player.pane.video.vid.currentTime = _g.playing.time;
			},function() {
				if(!_g.playing.paused) player.pane.video.play();
				if(cb != null) cb();
			});
		});
	}
	,sources: function() {
		var _g = this;
		return new tannus_ds_Promise(function(accept,reject) {
			console.log("promise func");
			var list = [];
			var pl = _g.playlist;
			var stack = new tannus_ds_AsyncStack();
			var _g1 = 0;
			while(_g1 < pl.length) {
				var t = [pl[_g1]];
				++_g1;
				stack.under((function(t) {
					return function(next) {
						t[0].getSource((function() {
							return function(src,error) {
								if(error == null) {
									list.push(src);
									next();
								}
							};
						})());
					};
				})(t));
			}
			stack.run(function() {
				accept(list);
			});
		},null).array();
	}
	,test: function() {
		return new tannus_ds_Promise(function(accept,reject) {
			gryffin_Tools.defer(function() {
				accept(false);
			});
		},null).bool();
	}
	,tt: function() {
		var promis = this.test();
		promis.then(function(status) {
			console.log(status);
		});
		promis.unless(function(err) {
			if(((err | 0) === err)) console.log("Error Code: " + Std.string(err)); else if(typeof(err) == "string") console.log("Error Message: " + Std.string(err)); else if(js_Boot.__instanceof(err,Dynamic)) console.log("Error: " + Std.string(err));
		});
		console.log("escaped async");
	}
	,lpl: function(player,lpl_cb) {
		var _g1 = this;
		var list = [];
		var pl = this.playlist;
		var stack = new tannus_ds_AsyncStack();
		var _g = 0;
		while(_g < pl.length) {
			var t = [pl[_g]];
			++_g;
			stack.under((function(t) {
				return function(next) {
					t[0].getSource((function() {
						return function(src,error) {
							if(error != null) _g1.errors.push(error); else list.push(src);
							next();
						};
					})());
				};
			})(t));
		}
		stack.run(function() {
			player.reload(list,function() {
				gryffin_Tools.defer(lpl_cb);
			});
		});
	}
	,loadPlaylist: function(player,cb) {
		var _g1 = this;
		var stack = new tannus_ds_AsyncStack();
		var list = [];
		var pl = this.playlist;
		var _g = 0;
		while(_g < pl.length) {
			var t = [pl[_g]];
			++_g;
			stack.under((function(t) {
				return function(next) {
					t[0].getSource((function() {
						return function(src,error) {
							if(error != null) {
								_g1.errors.push(error);
								next();
							} else {
								list.push(src);
								next();
							}
						};
					})());
				};
			})(t));
		}
		stack.run(function() {
			player.reload(list,function() {
				gryffin_Tools.defer(cb);
			});
		});
	}
	,__class__: bp_ds_PlayerState
};
var bp_ds_Playlist = function() {
	this.title = "Playlist";
	this.description = "";
	this.creator = "Ryan Davis";
	this.tracks = [];
	this.alteration = new tannus_io_VoidSignal();
};
$hxClasses["bp.ds.Playlist"] = bp_ds_Playlist;
bp_ds_Playlist.__name__ = ["bp","ds","Playlist"];
bp_ds_Playlist.prototype = {
	clone: function() {
		var c = new bp_ds_Playlist();
		var _g = 0;
		var _g1 = this.tracks;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			c.addTrack(t.clone());
		}
		return c;
	}
	,addTrack: function(track,index) {
		if(index == null) this.tracks.push(track); else this.tracks.splice(index,0,track);
		this.alteration.call();
		track.list = this;
	}
	,moveTrack: function(track,index) {
		if(Lambda.has(this.tracks,track)) this.detachTrack(track);
		this.addTrack(track,index);
	}
	,detachTrack: function(track) {
		var rem = HxOverrides.remove(this.tracks,track);
		if(rem) track.list = null;
		this.alteration.call();
		return rem;
	}
	,removeTrack: function(track) {
		var removed = HxOverrides.remove(this.tracks,track);
		if(removed) {
			track.list = null;
			track["delete"]();
		}
		this.alteration.call();
		return removed;
	}
	,hasTrack: function(track) {
		return Lambda.has(this.tracks,track);
	}
	,sort: function(predicate) {
		haxe_ds_ArraySort.sort(this.tracks,predicate);
	}
	,getTrackByIndex: function(index) {
		return this.tracks[index];
	}
	,getTrackById: function(id) {
		var _g = 0;
		var _g1 = this.tracks;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.id == id) return t;
		}
		return null;
	}
	,getTrackByTitle: function(title) {
		var _g = 0;
		var _g1 = this.tracks;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.get_title() == title) return t;
		}
		return null;
	}
	,getTrackByLocation: function(location) {
		var _g = 0;
		var _g1 = this.tracks;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.get_location() == location) return t;
		}
		return null;
	}
	,filter: function(test) {
		var result = new bp_ds_Playlist();
		var resultTracks = this.tracks.filter(test);
		var _g = 0;
		while(_g < resultTracks.length) {
			var t = resultTracks[_g];
			++_g;
			result.addTrack(t);
		}
		return result;
	}
	,search: function(sel) {
		var tester = this.compileOre(sel);
		return this.tracks.filter(tester);
	}
	,clear: function() {
		this.tracks = [];
		this.alteration.call();
	}
	,shuffle: function() {
		this.tracks = new tannus_math_Random().shuffle(this.tracks);
		this.alteration.call();
	}
	,compileOre: function(s) {
		var comp = new tannus_nore_Compiler();
		var func = comp.compileString(s);
		return func;
	}
	,iterator: function() {
		return HxOverrides.iter(this.tracks);
	}
	,alt: function() {
		this.alteration.call();
	}
	,get_length: function() {
		return this.tracks.length;
	}
	,__class__: bp_ds_Playlist
	,__properties__: {get_length:"get_length"}
};
var bp_ds_Preferences = function(s) {
	tannus_mvc_StoredModel.call(this);
	var sub = new tannus_storage_SubStorage(function() {
		return s.storage;
	});
	sub.prefix = "preferences:";
	this.set_storage(sub);
	s.require("prefs",$bind(this,this.init));
};
$hxClasses["bp.ds.Preferences"] = bp_ds_Preferences;
bp_ds_Preferences.__name__ = ["bp","ds","Preferences"];
bp_ds_Preferences.__super__ = tannus_mvc_StoredModel;
bp_ds_Preferences.prototype = $extend(tannus_mvc_StoredModel.prototype,{
	get_sessionLoadMode: function() {
		var this1 = this.getAttribute("slm");
		if(this1 != null) return this1; else return 1;
	}
	,set_sessionLoadMode: function(v) {
		return this.setAttribute("slm",v);
	}
	,get_snapshotSaveMode: function() {
		var this1 = this.getAttribute("ssm");
		if(this1 != null) return this1; else return 0;
	}
	,set_snapshotSaveMode: function(v) {
		return this.setAttribute("ssm",v);
	}
	,get_snapshotDirectoryId: function() {
		return this.getAttribute("ssd");
	}
	,set_snapshotDirectoryId: function(v) {
		return this.setAttribute("ssd",v);
	}
	,__class__: bp_ds_Preferences
	,__properties__: $extend(tannus_mvc_StoredModel.prototype.__properties__,{set_snapshotDirectoryId:"set_snapshotDirectoryId",get_snapshotDirectoryId:"get_snapshotDirectoryId",set_snapshotSaveMode:"set_snapshotSaveMode",get_snapshotSaveMode:"get_snapshotSaveMode",set_sessionLoadMode:"set_sessionLoadMode",get_sessionLoadMode:"get_sessionLoadMode"})
});
var bp_ds_Session = function(db) {
	tannus_mvc_StoredModel.call(this);
	var sub = new tannus_storage_SubStorage(function() {
		return db.storage;
	});
	sub.prefix = "session.";
	sub.autoPush = false;
	this.set_storage(sub);
	db.require("session",$bind(this,this.init));
};
$hxClasses["bp.ds.Session"] = bp_ds_Session;
bp_ds_Session.__name__ = ["bp","ds","Session"];
bp_ds_Session.__super__ = tannus_mvc_StoredModel;
bp_ds_Session.prototype = $extend(tannus_mvc_StoredModel.prototype,{
	restoreState: function(player,cb) {
		if(this.get_playing() != null) {
			var state = new bp_ds_PlayerState();
			state.playlist = this.get_playlist();
			state.playing = this.get_playing();
			state.apply(player,cb);
			state.tt();
		}
	}
	,saveState: function(player,cb) {
		var state = new bp_ds_PlayerState(player);
		this.set_playlist(state.playlist);
		this.setAttribute("playing",state.playing);
		this.sync(function() {
			if(cb != null) cb();
		});
	}
	,getTrack: function(index) {
		var key = "track[" + index + "]";
		if(!this.hasAttribute(key)) return null; else {
			var str = this.getAttribute(key);
			var args = str.split("|");
			return bp_ds__$TrackData_TrackData_$Impl_$._new(args[0],args[1]);
		}
	}
	,hasState: function() {
		return this.hasAttribute("playlist") && this.getAttribute("playlist") > 0;
	}
	,destroy: function() {
		tannus_mvc_StoredModel.prototype.destroy.call(this);
		var _g = 0;
		var _g1 = this.storage.keys();
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			this.removeAttribute(key);
		}
		this.save();
	}
	,get_playlist: function() {
		if(!this.hasAttribute("playlist")) return []; else {
			var count = this.getAttribute("playlist");
			var results = [];
			var _g = 0;
			while(_g < count) {
				var index = _g++;
				results.push(this.getTrack(index));
			}
			return results;
		}
	}
	,set_playlist: function(v) {
		if(this.hasAttribute("playlist")) {
			var count = this.getAttribute("playlist");
			var _g = 0;
			while(_g < count) {
				var i = _g++;
				this.removeAttribute("track[" + i + "]");
			}
		}
		var _g1 = 0;
		var _g2 = v.length;
		while(_g1 < _g2) {
			var index = _g1++;
			var t = v[index];
			this.setAttribute("track[" + index + "]",t.id + "|" + t._src);
		}
		this.setAttribute("playlist",v.length);
		return v;
	}
	,get_playing: function() {
		if(!this.hasAttribute("playing")) return null; else return this.getAttribute("playing");
	}
	,set_playing: function(v) {
		return this.setAttribute("playing",v);
	}
	,__class__: bp_ds_Session
	,__properties__: $extend(tannus_mvc_StoredModel.prototype.__properties__,{set_playing:"set_playing",get_playing:"get_playing",set_playlist:"set_playlist",get_playlist:"get_playlist"})
});
var bp_ds_Settings = function(db) {
	tannus_mvc_StoredModel.call(this);
	var sub = new tannus_storage_SubStorage(function() {
		return db.storage;
	});
	sub.prefix = "settings-";
	this.set_storage(sub);
	this.preferences = new bp_ds_Preferences(this);
	db.require("settings",$bind(this,this.init));
};
$hxClasses["bp.ds.Settings"] = bp_ds_Settings;
bp_ds_Settings.__name__ = ["bp","ds","Settings"];
bp_ds_Settings.__super__ = tannus_mvc_StoredModel;
bp_ds_Settings.prototype = $extend(tannus_mvc_StoredModel.prototype,{
	get_muted: function() {
		if(this.hasAttribute("muted")) return this.getAttribute("muted"); else return false;
	}
	,set_muted: function(v) {
		return this.setAttribute("muted",v);
	}
	,get_volume: function() {
		if(this.hasAttribute("volume")) return this.getAttribute("volume"); else return 1.0;
	}
	,set_volume: function(v) {
		return this.setAttribute("volume",v);
	}
	,get_speed: function() {
		if(this.hasAttribute("speed")) return this.getAttribute("speed"); else return 1.0;
	}
	,set_speed: function(v) {
		console.log("playback-rate is being changed");
		return this.setAttribute("speed",v);
	}
	,get_shuffle: function() {
		if(this.hasAttribute("shuffle")) return this.getAttribute("shuffle"); else return false;
	}
	,set_shuffle: function(v) {
		return this.setAttribute("shuffle",v);
	}
	,get_fullscreen: function() {
		if(this.hasAttribute("fullscreen")) return this.getAttribute("fullscreen"); else return false;
	}
	,set_fullscreen: function(v) {
		return this.setAttribute("fullscreen",v);
	}
	,__class__: bp_ds_Settings
	,__properties__: $extend(tannus_mvc_StoredModel.prototype.__properties__,{set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_shuffle:"set_shuffle",get_shuffle:"get_shuffle",set_speed:"set_speed",get_speed:"get_speed",set_volume:"set_volume",get_volume:"get_volume",set_muted:"set_muted",get_muted:"get_muted"})
});
var bp_ds_Track = function(src,p) {
	this._ready = false;
	this.focused = false;
	this._location = null;
	var _g = this;
	this.source = src;
	this.player = p;
	this.ready = new tannus_io_VoidSignal();
	var metaKey = this.getIdentifier();
	this.meta = new bp_ds_TrackMeta(this.player.data,metaKey);
	this.meta.init(function() {
		_g._ready = true;
		_g.consoleUtils();
		_g.ready.call();
	});
	this.duration = tannus_media__$Duration_Duration_$Impl_$._new();
	this.id = metaKey;
	this.list = null;
	this.thumbs = new haxe_ds_IntMap();
	this.tags = [];
	this.gallery = null;
};
$hxClasses["bp.ds.Track"] = bp_ds_Track;
bp_ds_Track.__name__ = ["bp","ds","Track"];
bp_ds_Track.prototype = {
	onready: function(action) {
		if(this._ready) gryffin_Tools.defer(action); else this.ready.once(action);
	}
	,consoleUtils: function() {
		var _g = this;
		var self = tannus_ds_CObj.create(this);
		Reflect.callMethod(self.o,Reflect.getProperty(self.o,"__defineGetter__"),["title",function() {
			return _g.get_title();
		}]);
		Reflect.callMethod(self.o,Reflect.getProperty(self.o,"__defineGetter__"),["location",function() {
			return _g.get_location();
		}]);
		Reflect.callMethod(self.o,Reflect.getProperty(self.o,"__defineGetter__"),["index",function() {
			if(_g.list == null) return -1; else return HxOverrides.indexOf(_g.list.tracks,_g,0);
		}]);
	}
	,clone: function() {
		var src;
		{
			var _g = this.source;
			switch(_g[1]) {
			case 0:
				var f = _g[3];
				var e = _g[2];
				src = bp_ds_VideoSource.VSFile(e,f);
				break;
			case 1:
				var url = _g[2];
				src = bp_ds_VideoSource.VSUrl(url);
				break;
			}
		}
		return new bp_ds_Track(src,this.player);
	}
	,titleWords: function() {
		var res = tannus_ds_StringUtils.strip(tannus_ds_StringUtils.beforeLast(this.get_title(),"."),(function($this) {
			var $r;
			var v = new EReg("[\"',]","");
			$r = (function($this) {
				var $r;
				var e = tannus_ds_Either.Right(v);
				$r = e;
				return $r;
			}($this));
			return $r;
		}(this)));
		res = res.split("-").join(" ");
		var words = tannus_nlp_Words.create(res).map(function(word) {
			var s = tannus_ds_StringUtils.capitalize(word);
			return s;
		});
		return words;
	}
	,prettyTitle: function() {
		return this.titleWords().join(" ");
	}
	,prettySize: function() {
		var thresh = 1024;
		var units = ["kB","MB","GB","TB","PB","EB","ZB","YB"];
		var u = -1;
		var bytes = this.get_size();
		do {
			bytes /= thresh;
			++u;
		} while(Math.abs(bytes) >= thresh && u < units.length - 1);
		return tannus_math_TMath.toFixed(bytes,1) + " " + units[u];
	}
	,'delete': function() {
		tannus_ds_Memory.freeRandomId(this.id);
	}
	,remove: function() {
		if(this.list != null) return this.list.removeTrack(this); else return false;
	}
	,'is': function(sel) {
		var selector = new tannus_nore_CSelector(sel);
		return selector.test(this);
	}
	,focusin: function(video) {
		this.focused = true;
		var doc;
		var this1 = window;
		doc = this1.document;
		doc.title = this.prettyTitle();
		video.onplay.once($bind(this,this.setWatched));
	}
	,focusout: function(video) {
		this.focused = false;
		var doc;
		var this1 = window;
		doc = this1.document;
		doc.title = "BPlayer";
		video.onplay.ignore($bind(this,this.setWatched));
	}
	,setWatched: function() {
		this.meta.set_watched(true);
		this.meta.save();
	}
	,nextTrack: function(distance) {
		if(distance == null) distance = 1;
		if(this.list != null) return this.list.getTrackByIndex((this.list == null?-1:HxOverrides.indexOf(this.list.tracks,this,0)) + distance); else return null;
	}
	,prevTrack: function(distance) {
		if(distance == null) distance = 1;
		if(this.list != null) return this.list.getTrackByIndex((this.list == null?-1:HxOverrides.indexOf(this.list.tracks,this,0)) - distance); else return null;
	}
	,favorite: function() {
		this.meta.set_favorited(true);
	}
	,unfavorite: function() {
		this.meta.set_favorited(false);
	}
	,getMarks: function() {
		return this.meta.getMarks();
	}
	,mark: function(time,name) {
		return (bp_core_Player.instance != null?bp_core_Player.instance.data.bookmarks:null).addBookmark((bp_core_Player.instance != null?bp_core_Player.instance.data.bookmarks:null).namedMark(this.meta.trackId,tannus_media_CDur.fromSecondsI(Math.floor(time)),name));
	}
	,startTime: function(v) {
		if(v == null) return this.meta.get_startTime(); else {
			this.meta.set_startTime(v);
			this.meta.save();
			return this.meta.get_startTime();
		}
	}
	,getState: function() {
		return bp_ds__$TrackData_TrackData_$Impl_$.extract(this);
	}
	,getIdentifier: function() {
		{
			var _g = this.source;
			switch(_g[1]) {
			case 0:
				var file = _g[3];
				return "" + file.file.size + "#" + file.file.name;
			case 1:
				var url = _g[2];
				return url.toString();
			}
		}
	}
	,serializeSource: function() {
		{
			var _g = this.source;
			switch(_g[1]) {
			case 0:
				var entry = _g[2];
				return "f" + chrome.fileSystem.retainEntry(entry);
			case 1:
				var url = _g[2];
				return "a" + url.toString();
			}
		}
	}
	,buildMenu: function(cm) {
		var _g = this;
		cm.button("Play Next",function(e) {
			_g.moveTo(_g.player.pane.video.currentTrack.get_index() + 1);
			cm["delete"]();
		});
	}
	,moveTo: function(index) {
		this.list.moveTrack(this,index);
	}
	,playNext: function() {
		this.moveTo(this.player.pane.video.currentTrack.get_index() + 1);
	}
	,get_title: function() {
		{
			var _g = this.source;
			switch(_g[1]) {
			case 0:
				var e = _g[2];
				return e.name;
			case 1:
				var url = _g[2];
				return new tannus_sys_CPath(url.pathname).get_name();
			}
		}
	}
	,get_location: function() {
		{
			var _g = this.source;
			switch(_g[1]) {
			case 0:
				var file = _g[3];
				return file.getObjectURL();
			case 1:
				var url = _g[2];
				return url.toString();
			}
		}
	}
	,get_size: function() {
		{
			var _g = this.source;
			switch(_g[1]) {
			case 0:
				var file = _g[3];
				return file.file.size;
			case 1:
				return null;
			}
		}
	}
	,get_index: function() {
		if(this.list == null) return -1; else return HxOverrides.indexOf(this.list.tracks,this,0);
	}
	,get_hasNext: function() {
		return this.nextTrack() != null;
	}
	,get_hasPrev: function() {
		return this.prevTrack() != null;
	}
	,get_path: function() {
		var s = this.get_title();
		return new tannus_sys_CPath(s);
	}
	,__class__: bp_ds_Track
	,__properties__: {get_path:"get_path",get_hasPrev:"get_hasPrev",get_hasNext:"get_hasNext",get_index:"get_index",get_size:"get_size",get_location:"get_location",get_title:"get_title"}
};
var bp_ds__$TrackData_TrackData_$Impl_$ = {};
$hxClasses["bp.ds._TrackData.TrackData_Impl_"] = bp_ds__$TrackData_TrackData_$Impl_$;
bp_ds__$TrackData_TrackData_$Impl_$.__name__ = ["bp","ds","_TrackData","TrackData_Impl_"];
bp_ds__$TrackData_TrackData_$Impl_$._new = function(id,src) {
	return new bp_ds_CTrackData(id,src);
};
bp_ds__$TrackData_TrackData_$Impl_$.extract = function(track) {
	return bp_ds__$TrackData_TrackData_$Impl_$._new(track.getIdentifier(),track.serializeSource());
};
var tannus_ds_Comparable = function() { };
$hxClasses["tannus.ds.Comparable"] = tannus_ds_Comparable;
tannus_ds_Comparable.__name__ = ["tannus","ds","Comparable"];
tannus_ds_Comparable.prototype = {
	__class__: tannus_ds_Comparable
};
var bp_ds_CTrackData = function(id,src) {
	this.id = id;
	this._src = src;
};
$hxClasses["bp.ds.CTrackData"] = bp_ds_CTrackData;
bp_ds_CTrackData.__name__ = ["bp","ds","CTrackData"];
bp_ds_CTrackData.__interfaces__ = [tannus_ds_Comparable];
bp_ds_CTrackData.prototype = {
	equals: function(other) {
		return this.id == other.id && this._src == other._src;
	}
	,getSource: function(cb) {
		var _g1 = this;
		var _g = this._src.substring(0,1);
		switch(_g) {
		case "f":
			tannus_chrome_FileSystem.isRestorable(this._src.substring(1),function(canRestore) {
				if(canRestore) tannus_chrome_FileSystem.restoreEntry(_g1._src.substring(1),function(entry) {
					if(entry == null) cb(null,bp_ds_PlayerError.ELoadFailed(_g1._src.substring(1))); else cb(bp_ds_VideoSource.VSFile(entry,null),null);
				}); else cb(null,bp_ds_PlayerError.ELoadFailed(_g1._src.substring(1)));
			});
			break;
		case "a":
			try {
				cb(bp_ds_VideoSource.VSUrl((function($this) {
					var $r;
					var s = $this._src.substring(1);
					$r = new tannus_http_CUrl(s);
					return $r;
				}(this))),null);
			} catch( error ) {
				if (error instanceof js__$Boot_HaxeError) error = error.val;
				cb(null,bp_ds_PlayerError.ECustom(error));
			}
			break;
		}
	}
	,get_sourceCode: function() {
		return this._src.substring(1);
	}
	,get_sourceType: function() {
		return this._src.substring(0,1);
	}
	,__class__: bp_ds_CTrackData
	,__properties__: {get_sourceType:"get_sourceType",get_sourceCode:"get_sourceCode"}
};
var tannus_ds_Task = function() {
	this._doing = false;
	this.onkill = new tannus_io_VoidSignal();
	this.onfinish = new tannus_io_VoidSignal();
};
$hxClasses["tannus.ds.Task"] = tannus_ds_Task;
tannus_ds_Task.__name__ = ["tannus","ds","Task"];
tannus_ds_Task.prototype = {
	start: function() {
		if(!this._doing) this._doing = true; else throw new js__$Boot_HaxeError("Error: Task already running");
	}
	,perform: function(done) {
		this.start();
		this.onfinish.once(done);
		this.action($bind(this,this.finish));
	}
	,action: function(done) {
		done();
	}
	,finish: function() {
		this._doing = false;
		this.onfinish.call();
	}
	,abort: function() {
		if(this._doing) {
			this.onkill.call();
			this._doing = false;
		} else throw new js__$Boot_HaxeError("Error: Cannot abort a Task that is not running!");
	}
	,toAsync: function() {
		return (function(f) {
			return function(a1) {
				f(a1);
			};
		})($bind(this,this.perform));
	}
	,get_doing: function() {
		return this._doing;
	}
	,__class__: tannus_ds_Task
	,__properties__: {get_doing:"get_doing"}
};
var tannus_ds_ProgressiveTask = function() {
	tannus_ds_Task.call(this);
	this.onProgress = new tannus_io_Signal();
	this.set_completion(0);
};
$hxClasses["tannus.ds.ProgressiveTask"] = tannus_ds_ProgressiveTask;
tannus_ds_ProgressiveTask.__name__ = ["tannus","ds","ProgressiveTask"];
tannus_ds_ProgressiveTask.__super__ = tannus_ds_Task;
tannus_ds_ProgressiveTask.prototype = $extend(tannus_ds_Task.prototype,{
	progress: function(amount) {
		this.set_completion(this.completion + amount);
	}
	,set_completion: function(v) {
		this.onProgress.broadcast(v);
		return this.completion = v;
	}
	,__class__: tannus_ds_ProgressiveTask
	,__properties__: $extend(tannus_ds_Task.prototype.__properties__,{set_completion:"set_completion"})
});
var tannus_ds_StandardTask = function() {
	tannus_ds_ProgressiveTask.call(this);
	this.statusChange = new tannus_io_Signal();
	this.resultChange = new tannus_io_Signal();
	this._res = null;
	this._status = null;
};
$hxClasses["tannus.ds.StandardTask"] = tannus_ds_StandardTask;
tannus_ds_StandardTask.__name__ = ["tannus","ds","StandardTask"];
tannus_ds_StandardTask.__super__ = tannus_ds_ProgressiveTask;
tannus_ds_StandardTask.prototype = $extend(tannus_ds_ProgressiveTask.prototype,{
	get_status: function() {
		return this._status;
	}
	,set_status: function(v) {
		var change;
		var prev = this.get_status();
		change = [v,prev];
		var r = this._status = v;
		this.statusChange.broadcast(change);
		return r;
	}
	,get_result: function() {
		return this._res;
	}
	,set_result: function(v) {
		var change = [v,this._res];
		var r = this._res = v;
		this.resultChange.broadcast(change);
		return r;
	}
	,__class__: tannus_ds_StandardTask
	,__properties__: $extend(tannus_ds_ProgressiveTask.prototype.__properties__,{set_result:"set_result",get_result:"get_result",set_status:"set_status",get_status:"get_status"})
});
var bp_ds_TrackLoader = function(p) {
	this.restoring = false;
	tannus_ds_StandardTask.call(this);
	this.player = p;
	this.entries = [];
	this.errors = [];
};
$hxClasses["bp.ds.TrackLoader"] = bp_ds_TrackLoader;
bp_ds_TrackLoader.__name__ = ["bp","ds","TrackLoader"];
bp_ds_TrackLoader.__super__ = tannus_ds_StandardTask;
bp_ds_TrackLoader.prototype = $extend(tannus_ds_StandardTask.prototype,{
	load: function(list,done) {
		this.entries = list;
		this.perform(done);
	}
	,action: function(done) {
		var _g1 = this;
		var pool = new tannus_ds_AsyncPool();
		this.set_result([]);
		if(this.player.data.settings.get_shuffle() && !this.restoring) this.entries = new tannus_math_Random().shuffle(this.entries);
		var _g = 0;
		var _g11 = this.entries;
		while(_g < _g11.length) {
			var entry = _g11[_g];
			++_g;
			this.loadEntry(pool,entry);
		}
		pool.run(function(res) {
			var adders = new tannus_ds_AsyncStack();
			var _g2 = 0;
			while(_g2 < res.length) {
				var track = [res[_g2]];
				++_g2;
				if(track[0].error == null) adders.under((function(track) {
					return function(next) {
						_g1.player.addTrack(track[0].value,!_g1.restoring,next);
					};
				})(track)); else _g1.errors.push(track[0].error);
			}
			adders.run(done);
		});
	}
	,loadEntry: function(pool,source) {
		var _g = this;
		var step = 100 / (this.entries.length * 2);
		pool.push(function(index,provide) {
			switch(source[1]) {
			case 0:
				var entry = source[2];
				var fp;
				var this1 = entry;
				fp = new tannus_html_fs_FilePromise(function(give) {
					give(this1);
				});
				_g.set_status("Loading " + entry.name + "..");
				fp.then(function(file) {
					var p = new tannus_sys_CPath(file.file.name);
					if(_g.isMedia(p)) {
						var track = new bp_ds_Track(bp_ds_VideoSource.VSFile(entry,file),_g.player);
						_g.set_completion(_g.completion + step);
						track.onready(function() {
							_g.set_completion(_g.completion + step);
							provide(null,track);
						});
					} else {
						_g.set_completion(_g.completion + step);
						provide(bp_ds_PlayerError.EInvalidType(entry.name),null);
					}
				});
				fp.unless(function(error) {
					provide(bp_ds_PlayerError.ELoadFailed(entry.name),null);
				});
				break;
			case 1:
				var url = source[2];
				var track1 = new bp_ds_Track(bp_ds_VideoSource.VSUrl(url.clone()),_g.player);
				_g.set_completion(_g.completion + step);
				track1.onready(function() {
					_g.set_completion(_g.completion + step);
					provide(null,track1);
				});
				break;
			}
		});
	}
	,checkFile: function(p) {
		return this.isMedia(p);
	}
	,isMedia: function(p) {
		return (function($this) {
			var $r;
			var this1 = p.get_mime();
			$r = tannus_ds_StringUtils.has(this1,"/")?this1.substring(0,this1.indexOf("/")):this1;
			return $r;
		}(this)) == "video";
	}
	,isPlaylist: function(p) {
		return Lambda.has(["bpls"],p.get_extension());
	}
	,__class__: bp_ds_TrackLoader
});
var bp_ds_TrackMeta = function(db,name) {
	this.gallery = null;
	tannus_mvc_StoredModel.call(this);
	this.db = db;
	this.trackId = name;
	var sub = new tannus_storage_SubStorage(function() {
		return db.registry.storage;
	});
	sub.prefix = name;
	sub.autoPush = false;
	this.set_storage(sub);
};
$hxClasses["bp.ds.TrackMeta"] = bp_ds_TrackMeta;
bp_ds_TrackMeta.__name__ = ["bp","ds","TrackMeta"];
bp_ds_TrackMeta.__super__ = tannus_mvc_StoredModel;
bp_ds_TrackMeta.prototype = $extend(tannus_mvc_StoredModel.prototype,{
	init: function(f) {
		var _g = this;
		tannus_mvc_StoredModel.prototype.init.call(this,f);
		this.watch(function(change) {
			if(change.value[0] != _g.getAttribute(change.name)) _g.rollback();
			if(change.name == "::test") console.log(change);
		});
	}
	,getMarks: function() {
		var all = new tannus_ds_dict_ComparableDict();
		var $it0 = (function($this) {
			var $r;
			var _this = $this.get_marks();
			$r = HxOverrides.iter(_this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var mark = $it0.next();
			var value = mark.get_name();
			all.set(mark.time,value);
		}
		return all;
	}
	,hasMark: function(mark) {
		return (bp_core_Player.instance != null?bp_core_Player.instance.data.bookmarks:null).hasBookmark(mark.id);
	}
	,addMark: function(time,name) {
		return (bp_core_Player.instance != null?bp_core_Player.instance.data.bookmarks:null).addBookmark((bp_core_Player.instance != null?bp_core_Player.instance.data.bookmarks:null).namedMark(this.trackId,tannus_media_CDur.fromSecondsI(Math.floor(time)),name));
	}
	,removeMark: function(mark) {
		if(mark.track == this.trackId) return (bp_core_Player.instance != null?bp_core_Player.instance.data.bookmarks:null).removeBookmark(mark); else return false;
	}
	,mark: function(m) {
		var l;
		if(bp_core_Player.instance != null) l = bp_core_Player.instance.data.bookmarks; else l = null;
		if(l != null) return l.addBookmark(m); else return null;
	}
	,_getGallery: function(callback) {
		var _g = this;
		var location = this.getAttribute("gallery");
		if(location == null) {
			this.gallery = null;
			callback();
		} else this.db.galleries.getGalleryById(location[0],function(g) {
			_g.gallery = g;
			callback();
		});
	}
	,getGallery: function() {
		return this.gallery;
	}
	,setGallery: function(g) {
		this.set_galleryLocation(g != null?g.getLocation():null);
	}
	,get_galleryLocation: function() {
		return this.getAttribute("gallery");
	}
	,set_galleryLocation: function(v) {
		return this.setAttribute("gallery",v);
	}
	,get_favorited: function() {
		if(this.hasAttribute("favorited")) return this.getAttribute("favorited"); else return false;
	}
	,set_favorited: function(v) {
		var res = this.setAttribute("favorited",v);
		this.save();
		return res;
	}
	,get_watched: function() {
		if(this.hasAttribute("watched")) return this.getAttribute("watched"); else return false;
	}
	,set_watched: function(v) {
		var res = this.setAttribute("watched",v);
		this.save();
		return res;
	}
	,get_marks: function() {
		var lib;
		if(bp_core_Player.instance != null) lib = bp_core_Player.instance.data.bookmarks; else lib = null;
		if(lib == null) return []; else return lib.getBookmarksByTrackId(this.trackId);
	}
	,get_startTime: function() {
		var ml = this.get_marks();
		if(tannus_ds_ArrayTools.firstMatch(ml,function(item) {
			return item.get_isStart();
		}) != null) {
			var this1 = tannus_ds_ArrayTools.firstMatch(ml,function(item1) {
				return item1.get_isStart();
			}).time;
			return 3600 * this1.hours + 60 * this1.minutes + this1.seconds + 0.0;
		} else return 0.0;
	}
	,set_startTime: function(v) {
		var sm = (bp_core_Player.instance != null?bp_core_Player.instance.data.bookmarks:null).startMark(this.trackId,tannus_media_CDur.fromSecondsI(Math.floor(v)));
		{
			var this1 = (bp_core_Player.instance != null?bp_core_Player.instance.data.bookmarks:null).addBookmark(sm).time;
			return 3600 * this1.hours + 60 * this1.minutes + this1.seconds;
		}
	}
	,get_name: function() {
		return tannus_ds_StringUtils.after((js_Boot.__cast(this.storage , tannus_storage_SubStorage)).prefix,"#");
	}
	,get_tags: function() {
		if(!this.hasAttribute("tags")) return [];
		var s = this.getAttribute("tags");
		var ids = s.split(",").map(Std.parseInt);
		var tags = ids.map((function(f) {
			return function(id) {
				return f(id);
			};
		})(($_=this.db.tags,$bind($_,$_.getTag))));
		return tags;
	}
	,set_tags: function(v) {
		var ids = [];
		var _g = 0;
		while(_g < v.length) {
			var tag = v[_g];
			++_g;
			if(tag.id != null) ids.push(tag.id); else {
				this.db.tags.addTag(tag);
				ids.push(tag.id);
			}
		}
		this.set("tags",ids.join(","));
		return v;
	}
	,get_player: function() {
		return bp_core_Player.instance;
	}
	,get_library: function() {
		if(bp_core_Player.instance != null) return bp_core_Player.instance.data.bookmarks; else return null;
	}
	,__class__: bp_ds_TrackMeta
	,__properties__: $extend(tannus_mvc_StoredModel.prototype.__properties__,{get_library:"get_library",get_player:"get_player",set_tags:"set_tags",get_tags:"get_tags",get_name:"get_name",set_startTime:"set_startTime",get_startTime:"get_startTime",get_marks:"get_marks",set_watched:"set_watched",get_watched:"get_watched",set_favorited:"set_favorited",get_favorited:"get_favorited",set_galleryLocation:"set_galleryLocation",get_galleryLocation:"get_galleryLocation"})
});
var bp_ds_TrackMetas = function(db) {
	tannus_mvc_StoredModel.call(this);
	this.data = db;
	var sub = new tannus_storage_SubStorage(function() {
		return db.storage;
	});
	sub.prefix = "registry";
	this.set_storage(sub);
	db.require("tracks",$bind(this,this.init));
};
$hxClasses["bp.ds.TrackMetas"] = bp_ds_TrackMetas;
bp_ds_TrackMetas.__name__ = ["bp","ds","TrackMetas"];
bp_ds_TrackMetas.__super__ = tannus_mvc_StoredModel;
bp_ds_TrackMetas.prototype = $extend(tannus_mvc_StoredModel.prototype,{
	allRegistries: function(cb) {
		var types = tannus_sys_Mimes.getTypeToExtensionsMap();
		var videoExtensions = [];
		var $it0 = types.keys();
		while( $it0.hasNext() ) {
			var mime = $it0.next();
			if((tannus_ds_StringUtils.has(mime,"/")?mime.substring(0,mime.indexOf("/")):mime) == "video") videoExtensions = videoExtensions.concat(__map_reserved[mime] != null?types.getReserved(mime):types.h[mime]);
		}
		videoExtensions = tannus_ds_ArrayTools.unique(videoExtensions);
		var names = this.allAttributes().map(function(key) {
			var ext = haxe_io_Path.extension(key);
			var _g = 0;
			while(_g < videoExtensions.length) {
				var vext = videoExtensions[_g];
				++_g;
				if(StringTools.startsWith(ext,vext)) {
					ext = vext;
					break;
				}
			}
			console.log(ext);
			return tannus_ds_StringUtils.before(key,ext) + ext;
		});
		names = tannus_ds_ArrayTools.unique(names);
		names = names.filter(function(item) {
			return tannus_ds_StringUtils.has(item,"#");
		});
		var metas = [];
		var stack = new tannus_ds_AsyncStack();
		var _g1 = 0;
		while(_g1 < names.length) {
			var name = names[_g1];
			++_g1;
			var tm = new bp_ds_TrackMeta(this.data,name);
			metas.push(tm);
			stack.push((function(f1) {
				return function(f) {
					f1(f);
				};
			})($bind(tm,tm.init)));
		}
		stack.run((function(f2,a1) {
			return function() {
				f2(a1);
			};
		})(cb,metas));
	}
	,__class__: bp_ds_TrackMetas
});
var tannus_ds_Stateful = function() { };
$hxClasses["tannus.ds.Stateful"] = tannus_ds_Stateful;
tannus_ds_Stateful.__name__ = ["tannus","ds","Stateful"];
tannus_ds_Stateful.prototype = {
	__class__: tannus_ds_Stateful
};
var gryffin_display_Paintable = function() { };
$hxClasses["gryffin.display.Paintable"] = gryffin_display_Paintable;
gryffin_display_Paintable.__name__ = ["gryffin","display","Paintable"];
gryffin_display_Paintable.prototype = {
	__class__: gryffin_display_Paintable
};
var gryffin_display_Video = function(el) {
	gryffin_core_EventDispatcher.call(this);
	if(el != null) this.vid = el; else this.vid = gryffin_display_Video.createVid();
	this.onerror = new tannus_io_Signal();
	this.ondurationchange = new tannus_io_Signal();
	this.onvolumechange = new tannus_io_Signal();
	this.onratechange = new tannus_io_Signal();
	this.onstatechange = new tannus_io_Signal();
	this.onended = new tannus_io_VoidSignal();
	this.oncanplay = new tannus_io_VoidSignal();
	this.onplay = new tannus_io_VoidSignal();
	this.onpause = new tannus_io_VoidSignal();
	this.onload = new tannus_io_VoidSignal();
	this.onprogress = new tannus_io_Signal();
	this.onloadedmetadata = new tannus_io_VoidSignal();
	this.listen();
};
$hxClasses["gryffin.display.Video"] = gryffin_display_Video;
gryffin_display_Video.__name__ = ["gryffin","display","Video"];
gryffin_display_Video.__interfaces__ = [tannus_ds_Stateful,gryffin_display_Paintable];
gryffin_display_Video.createVid = function() {
	var _this = window.document;
	return _this.createElement("video");
};
gryffin_display_Video.__super__ = gryffin_core_EventDispatcher;
gryffin_display_Video.prototype = $extend(gryffin_core_EventDispatcher.prototype,{
	destroy: function() {
		this.vid.remove();
	}
	,paint: function(c,s,d) {
		c.drawImage(this.vid,s.x,s.y,s.width,s.height,d.x,d.y,d.width,d.height);
	}
	,capture: function(x,y,w,h) {
		if(y == null) y = 0;
		if(x == null) x = 0;
		if(w == null) w = this.vid.videoWidth - x;
		if(h == null) h = this.vid.videoHeight - y;
		var canvas = gryffin_display_Canvas.create(w,h);
		canvas._ctx.get().drawImage(this.vid,x,y,this.vid.videoWidth,this.vid.videoHeight,0,0,w,h);
		return canvas;
	}
	,frames: function(jumpSeconds,oncapture) {
		var _g = this;
		return new tannus_ds_Promise(function(accept,reject) {
			var stack = new tannus_ds_AsyncStack();
			var results = [];
			var i = 0;
			var len = tannus_media_CDur.fromSecondsI(Math.floor(_g.vid.duration)).get_totalSeconds();
			while(i < len) {
				stack.under(function(next) {
					_g.get_frame(i < 0?0:i > len?len:i,results,function(canvas) {
						oncapture(i,canvas);
						next();
					});
				});
				i += jumpSeconds;
			}
			stack.run(function() {
				accept(results);
			});
		},null).array();
	}
	,get_frame: function(n,list,done) {
		var _g = this;
		gryffin_Tools.defer(function() {
			_g.vid.currentTime = n;
			_g.oncanplay.once(function() {
				var c = _g.capture();
				list.push(c);
				done(c);
			});
		});
	}
	,frameCount: function() {
		return tannus_media_CDur.fromSecondsI(Math.floor(this.vid.duration)).get_totalSeconds() * 30;
	}
	,currentFrame: function() {
		var ct = tannus_media_CDur.fromSecondsI(Math.floor(this.vid.currentTime));
		return (3600 * ct.hours + 60 * ct.minutes + ct.seconds) * 30;
	}
	,gotoFrame: function(frameIndex) {
		var frameTime = 0.0333333333333333329;
		this.vid.currentTime = frameIndex * frameTime;
	}
	,play: function() {
		this.vid.play();
		this.dispatch("play",null);
	}
	,pause: function() {
		this.vid.pause();
		this.dispatch("pause",null);
	}
	,load: function(url,can_manipulate,can_play) {
		this.pause();
		this.set_src(url);
		this.onloadedmetadata.once(function() {
			console.log("video's metadata has been loaded");
			if(can_manipulate != null) can_manipulate();
		});
		this.oncanplay.once(function() {
			console.log("video can be played now");
			if(can_play != null) can_play();
		});
		this.onerror.listen(function(error) {
			window.console.error(error);
		},true);
	}
	,getState: function() {
		return { 'volume' : this.vid.volume, 'speed' : this.vid.playbackRate};
	}
	,setState: function(state) {
		this.set_volume(state.volume);
		this.set_playbackRate(state.speed);
	}
	,listen: function() {
		var _g = this;
		var on = (function(f) {
			return function(a1,a2) {
				f(a1,a2);
			};
		})(($_=this.vid,$bind($_,$_.addEventListener)));
		on("error",function() {
			_g.onerror.broadcast(_g.vid.error);
		});
		on("ended",($_=this.onended,$bind($_,$_.fire)));
		on("canplay",($_=this.oncanplay,$bind($_,$_.fire)));
		on("play",($_=this.onplay,$bind($_,$_.fire)));
		on("pause",($_=this.onpause,$bind($_,$_.fire)));
		on("load",($_=this.onload,$bind($_,$_.fire)));
		on("progress",function(e) {
			_g.onprogress.call(tannus_math__$Percent_Percent_$Impl_$.percent(_g.vid.currentTime,_g.vid.duration));
		});
		on("loadedmetadata",($_=this.onloadedmetadata,$bind($_,$_.fire)));
		this.durationChanged();
		this.volumeChanged();
		this.rateChanged();
	}
	,durationChanged: function() {
		var _g = this;
		var last_duration = null;
		this.vid.addEventListener("durationchange",function() {
			var cur_dur = tannus_media_CDur.fromSecondsI(Math.floor(_g.vid.duration));
			var delta = [cur_dur,last_duration];
			_g.ondurationchange.broadcast(delta);
			last_duration = cur_dur;
		});
	}
	,volumeChanged: function() {
		var _g = this;
		var last_vol = this.vid.volume;
		this.vid.addEventListener("volumechange",function() {
			var delta = [_g.vid.volume,last_vol];
			_g.onvolumechange.broadcast(delta);
			_g.onstatechange.call(_g.getState());
			_g.dispatch("volumechange",delta);
			last_vol = _g.vid.volume;
		});
	}
	,rateChanged: function() {
		var _g = this;
		var last_rate = this.vid.playbackRate;
		this.vid.addEventListener("ratechange",function() {
			var delta = [_g.vid.playbackRate,last_rate];
			_g.onratechange.broadcast(delta);
			_g.onstatechange.call(_g.getState());
			_g.dispatch("ratechange",delta);
			last_rate = _g.vid.playbackRate;
		});
	}
	,get_width: function() {
		return this.vid.videoWidth;
	}
	,get_height: function() {
		return this.vid.videoHeight;
	}
	,get_rect: function() {
		return new tannus_geom_CRectangle(0,0,this.vid.videoWidth,this.vid.videoHeight);
	}
	,get_src: function() {
		return Std.string(this.vid.currentSrc);
	}
	,set_src: function(v) {
		this.vid.src = v.toString();
		return this.get_src();
	}
	,get_duration: function() {
		return tannus_media_CDur.fromSecondsI(Math.floor(this.vid.duration));
	}
	,get_currentTime: function() {
		return this.vid.currentTime;
	}
	,set_currentTime: function(v) {
		return this.vid.currentTime = v;
	}
	,get_time: function() {
		return tannus_media_CDur.fromSecondsI(Math.floor(this.vid.currentTime));
	}
	,set_time: function(v) {
		this.vid.currentTime = 3600 * v.hours + 60 * v.minutes + v.seconds;
		return tannus_media_CDur.fromSecondsI(Math.floor(this.vid.currentTime));
	}
	,get_progress: function() {
		return tannus_math__$Percent_Percent_$Impl_$.percent(this.vid.currentTime,this.vid.duration);
	}
	,set_progress: function(v) {
		this.vid.currentTime = this.vid.duration * (v / 100);
		return tannus_math__$Percent_Percent_$Impl_$.percent(this.vid.currentTime,this.vid.duration);
	}
	,get_playbackRate: function() {
		return this.vid.playbackRate;
	}
	,set_playbackRate: function(v) {
		this.vid.playbackRate = v;
		this.vid.playbackRate = Math.round(this.vid.playbackRate * 100) / 100;
		return this.vid.playbackRate;
	}
	,get_paused: function() {
		return this.vid.paused;
	}
	,get_volume: function() {
		return this.vid.volume;
	}
	,set_volume: function(v) {
		return v < 0?this.vid.volume = 0:v > 1?this.vid.volume = 1:this.vid.volume = v;
	}
	,get_muted: function() {
		return this.vid.muted;
	}
	,set_muted: function(v) {
		return this.vid.muted = v;
	}
	,get_aspectRatio: function() {
		return new tannus_math_CRatio(this.vid.videoWidth,this.vid.videoHeight);
	}
	,__class__: gryffin_display_Video
	,__properties__: {get_aspectRatio:"get_aspectRatio",set_muted:"set_muted",get_muted:"get_muted",set_volume:"set_volume",get_volume:"get_volume",get_paused:"get_paused",set_playbackRate:"set_playbackRate",get_playbackRate:"get_playbackRate",set_progress:"set_progress",get_progress:"get_progress",set_time:"set_time",get_time:"get_time",set_currentTime:"set_currentTime",get_currentTime:"get_currentTime",get_duration:"get_duration",set_src:"set_src",get_src:"get_src",get_rect:"get_rect",get_height:"get_height",get_width:"get_width"}
});
var bp_ds_Video = function() {
	gryffin_display_Video.call(this);
	this.currentTrack = null;
	this.trackInteraction = true;
};
$hxClasses["bp.ds.Video"] = bp_ds_Video;
bp_ds_Video.__name__ = ["bp","ds","Video"];
bp_ds_Video.__super__ = gryffin_display_Video;
bp_ds_Video.prototype = $extend(gryffin_display_Video.prototype,{
	loadTrack: function(track,can_manip,can_play) {
		var _g = this;
		if(this.currentTrack != null && this.trackInteraction) {
			this.currentTrack.focusout(this);
			this.currentTrack = null;
		}
		this.load(track.get_location(),function() {
			_g.currentTrack = track;
			if(_g.trackInteraction) _g.currentTrack.focusin(_g);
			if(can_manip != null) can_manip();
		},can_play);
	}
	,__class__: bp_ds_Video
});
var bp_ds_VideoSource = $hxClasses["bp.ds.VideoSource"] = { __ename__ : ["bp","ds","VideoSource"], __constructs__ : ["VSFile","VSUrl"] };
bp_ds_VideoSource.VSFile = function(entry,file) { var $x = ["VSFile",0,entry,file]; $x.__enum__ = bp_ds_VideoSource; $x.toString = $estr; return $x; };
bp_ds_VideoSource.VSUrl = function(address) { var $x = ["VSUrl",1,address]; $x.__enum__ = bp_ds_VideoSource; $x.toString = $estr; return $x; };
var bp_hist_Action = $hxClasses["bp.hist.Action"] = { __ename__ : ["bp","hist","Action"], __constructs__ : ["ALoad","ARemove"] };
bp_hist_Action.ALoad = function(tracks) { var $x = ["ALoad",0,tracks]; $x.__enum__ = bp_hist_Action; $x.toString = $estr; return $x; };
bp_hist_Action.ARemove = function(track,index) { var $x = ["ARemove",1,track,index]; $x.__enum__ = bp_hist_Action; $x.toString = $estr; return $x; };
var bp_hist_ActionTools = function() { };
$hxClasses["bp.hist.ActionTools"] = bp_hist_ActionTools;
bp_hist_ActionTools.__name__ = ["bp","hist","ActionTools"];
bp_hist_ActionTools.undo = function(action,player) {
	switch(action[1]) {
	case 0:
		var tracks = action[2];
		var _g = 0;
		while(_g < tracks.length) {
			var t = tracks[_g];
			++_g;
			player.playlist.removeTrack(t);
		}
		break;
	case 1:
		var index = action[3];
		var track = action[2];
		player.playlist.addTrack(track,index);
		break;
	}
};
bp_hist_ActionTools.redo = function(action,player) {
	switch(action[1]) {
	case 0:
		var tracks = action[2];
		var _g = 0;
		while(_g < tracks.length) {
			var t = tracks[_g];
			++_g;
			player.addTrack(t);
		}
		break;
	case 1:
		var track = action[2];
		player.playlist.removeTrack(track);
		break;
	}
};
var bp_hist_History = function(p) {
	this.player = p;
	this.actions = [];
	this.index = -1;
};
$hxClasses["bp.hist.History"] = bp_hist_History;
bp_hist_History.__name__ = ["bp","hist","History"];
bp_hist_History.prototype = {
	action: function(a) {
		this.actions = tannus_ds_ArrayTools.without(this.actions,this.get_future());
		this.actions.push(a);
		this.index++;
	}
	,undo: function() {
		bp_hist_ActionTools.undo(this.actions[this.index],this.player);
		this.index--;
	}
	,redo: function() {
		this.index++;
		bp_hist_ActionTools.redo(this.actions[this.index],this.player);
	}
	,get_future: function() {
		return this.actions.slice(this.index + 1);
	}
	,get_current: function() {
		return this.actions[this.index];
	}
	,__class__: bp_hist_History
	,__properties__: {get_current:"get_current",get_future:"get_future"}
};
var bp_tags_Tag = function(checkList) {
	this.checks = checkList;
	this.id = null;
};
$hxClasses["bp.tags.Tag"] = bp_tags_Tag;
bp_tags_Tag.__name__ = ["bp","tags","Tag"];
bp_tags_Tag.prototype = {
	test: function(s) {
		var _g = 0;
		var _g1 = this.checks;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(bp_tags_TagCheckTools.check(c,s)) return true;
		}
		return false;
	}
	,get_name: function() {
		var _g = 0;
		var _g1 = this.checks;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			switch(c[1]) {
			case 0:
				var n = c[2];
				return n;
			default:
				continue;
			}
		}
		return "";
	}
	,__class__: bp_tags_Tag
	,__properties__: {get_name:"get_name"}
};
var bp_tags_TagCheck = $hxClasses["bp.tags.TagCheck"] = { __ename__ : ["bp","tags","TagCheck"], __constructs__ : ["TTitle","TGlobStar","TSuperTags"] };
bp_tags_TagCheck.TTitle = function(name) { var $x = ["TTitle",0,name]; $x.__enum__ = bp_tags_TagCheck; $x.toString = $estr; return $x; };
bp_tags_TagCheck.TGlobStar = function(gs) { var $x = ["TGlobStar",1,gs]; $x.__enum__ = bp_tags_TagCheck; $x.toString = $estr; return $x; };
bp_tags_TagCheck.TSuperTags = function(tagNames) { var $x = ["TSuperTags",2,tagNames]; $x.__enum__ = bp_tags_TagCheck; $x.toString = $estr; return $x; };
var bp_tags_TagCheckTools = function() { };
$hxClasses["bp.tags.TagCheckTools"] = bp_tags_TagCheckTools;
bp_tags_TagCheckTools.__name__ = ["bp","tags","TagCheckTools"];
bp_tags_TagCheckTools.check = function(c,s) {
	var sl = s.toLowerCase();
	switch(c[1]) {
	case 0:
		var n = c[2];
		return tannus_ds_StringUtils.has(sl,n.toLowerCase());
	case 1:
		var pattern = c[2];
		return pattern.test(s);
	case 2:
		var tagNames = c[2];
		console.log(tagNames);
		return false;
	}
};
var bp_tags_TagParser = function() {
	null;
};
$hxClasses["bp.tags.TagParser"] = bp_tags_TagParser;
bp_tags_TagParser.__name__ = ["bp","tags","TagParser"];
bp_tags_TagParser.parseBytes = function(d) {
	return new bp_tags_TagParser().parse(d);
};
bp_tags_TagParser.__super__ = tannus_io_LexerBase;
bp_tags_TagParser.prototype = $extend(tannus_io_LexerBase.prototype,{
	parse: function(d) {
		this.buffer = new tannus_io_ByteStack(d);
		this.checks = [];
		var this1;
		this1 = tannus_io_impl_BrowserBinary.alloc(0);
		this.tbuf = this1;
		while(!(this.buffer != null && this.buffer.get_empty())) {
			var c = this.check();
			if(c != null) this.checks.push(c);
		}
		return this.checks;
	}
	,check: function() {
		if(this.buffer != null && this.buffer.get_empty()) return null;
		var c = this.buffer.peek(null);
		if(Lambda.has([9,10,11,12,13,32],c)) {
			this.buffer.pop();
			return this.check();
		} else if(c == 35 && (function($this) {
			var $r;
			var this1 = $this.buffer.peek(1);
			$r = this1 == 40;
			return $r;
		}(this))) {
			this.buffer.pop();
			var gsb = this.readGroup(40,41);
			this.separator();
			return bp_tags_TagCheck.TGlobStar((function($this) {
				var $r;
				var s = gsb.toString();
				$r = new tannus_sys_CGlobStar(s,"");
				return $r;
			}(this)));
		} else if(c == 47) {
			this.buffer.pop();
			var gse = this.readUntil(47,92);
			this.separator();
			return bp_tags_TagCheck.TGlobStar((function($this) {
				var $r;
				var s1 = gse.toString();
				$r = new tannus_sys_CGlobStar(s1,"");
				return $r;
			}(this)));
		} else if(c == 60) {
			var stb;
			{
				var this2 = this.readGroup(60,62);
				stb = this2.toString();
			}
			this.separator();
			return bp_tags_TagCheck.TSuperTags([stb]);
		} else if(c == 44) {
			this.buffer.pop();
			if(this.tbuf._length == 0) return null; else {
				var title = this.tbuf.toString();
				var this3;
				this3 = tannus_io_impl_BrowserBinary.alloc(0);
				this.tbuf = this3;
				return bp_tags_TagCheck.TTitle(title);
			}
		} else {
			this.tbuf.push(c);
			this.buffer.pop();
			while(!(this.buffer != null && this.buffer.get_empty()) && !this.isSpecial(this.buffer.peek(null))) {
				c = this.buffer.peek(null);
				if(c == 44 || (c == 10 || c == 13)) break; else this.tbuf.push(this.buffer.pop());
			}
			if(!tannus_ds_StringUtils.empty(StringTools.trim(tannus_ds_StringUtils.remove(this.tbuf.toString(),",")))) {
				var title1 = this.tbuf.toString();
				var this4;
				this4 = tannus_io_impl_BrowserBinary.alloc(0);
				this.tbuf = this4;
				return bp_tags_TagCheck.TTitle(title1);
			} else {
				var this5;
				this5 = tannus_io_impl_BrowserBinary.alloc(0);
				this.tbuf = this5;
				return this.check();
			}
		}
	}
	,isSpecial: function(c) {
		return Lambda.has(["#","<"],String.fromCharCode(c));
	}
	,titleBuffered: function() {
		return !tannus_ds_StringUtils.empty(StringTools.trim(tannus_ds_StringUtils.remove(this.tbuf.toString(),",")));
	}
	,separator: function() {
		if(this.buffer != null && this.buffer.get_empty() || (function($this) {
			var $r;
			var this1 = $this.buffer.peek(null);
			$r = this1 == 44;
			return $r;
		}(this)) || (function($this) {
			var $r;
			var this2 = $this.buffer.peek(null);
			$r = this2 == 10 || this2 == 13;
			return $r;
		}(this))) return; else throw new js__$Boot_HaxeError((function($this) {
			var $r;
			var message;
			message = "SyntaxError: Unexpected \"" + (function($this) {
				var $r;
				var this3 = $this.buffer.peek(null);
				$r = String.fromCharCode(this3);
				return $r;
			}($this)) + "\"";
			$r = new tannus_utils_JavaScriptError(message);
			return $r;
		}(this)));
	}
	,sep: function() {
		this.separator();
	}
	,__class__: bp_tags_TagParser
});
var bp_tags_Tags = function(db) {
	tannus_mvc_StoredModel.call(this);
	var s = new tannus_storage_SubStorage(function() {
		return db.storage;
	});
	s.prefix = "tags:";
	this.set_storage(s);
	db.require("tags",$bind(this,this.init));
};
$hxClasses["bp.tags.Tags"] = bp_tags_Tags;
bp_tags_Tags.__name__ = ["bp","tags","Tags"];
bp_tags_Tags.__super__ = tannus_mvc_StoredModel;
bp_tags_Tags.prototype = $extend(tannus_mvc_StoredModel.prototype,{
	getAllIds: function() {
		if(!this.hasAttribute("all")) return [];
		var s = this.getAttribute("all");
		return s.split(",").map(Std.parseInt);
	}
	,setAllIds: function(list) {
		list = tannus_ds_ArrayTools.unique(list);
		list.sort(function(x,y) {
			return x - y;
		});
		var s = list.join(",");
		this.setAttribute("all",s);
	}
	,pushId: function(id) {
		var l = this.getAllIds();
		l.push(id);
		this.setAllIds(l);
	}
	,addTag: function(t) {
		var pairs = [];
		var _g = 0;
		var _g1 = t.checks;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var p;
			var r = this.checkString(c);
			p = new tannus_ds_CPair(c[1],r);
			pairs.push(p);
		}
		if(t.id == null) {
			t.id = (this.hasAttribute("last_id")?this.getAttribute("last_id"):0) + 1;
			this.setAttribute("last_id",t.id);
			this.pushId(t.id);
		}
		this.setAttribute("tag-" + t.id,pairs);
	}
	,getTag: function(id) {
		var pairs = this.getAttribute("tag-" + id);
		var checks = [];
		var _g = 0;
		while(_g < pairs.length) {
			var p = pairs[_g];
			++_g;
			var tn = Type.getEnumConstructs(bp_tags_TagCheck)[p.left];
			switch(tn) {
			case "TTitle":
				checks.push(bp_tags_TagCheck.TTitle(p.right));
				break;
			case "TGlobStar":
				checks.push(bp_tags_TagCheck.TGlobStar(new tannus_sys_CGlobStar(p.right,"")));
				break;
			case "TSuperTags":
				checks.push(bp_tags_TagCheck.TSuperTags(p.right.split(",")));
				break;
			}
		}
		var t = new bp_tags_Tag(checks);
		t.id = id;
		return t;
	}
	,allTags: function() {
		return new bp_tags_TagIterator(this);
	}
	,getTagByName: function(name) {
		var _g = new bp_tags_TagIterator(this);
		while(_g.it.hasNext()) {
			var t = _g.t.getTag(_g.it.next());
			if(t.get_name() == name) return t;
		}
		return null;
	}
	,nextId: function() {
		return (this.hasAttribute("last_id")?this.getAttribute("last_id"):0) + 1;
	}
	,idkey: function(id) {
		return "tag-" + id;
	}
	,checkString: function(c) {
		switch(c[1]) {
		case 0:
			var name = c[2];
			return name;
		case 1:
			var gs = c[2];
			return (js_Boot.__cast(gs , tannus_sys_CGlobStar)).spat;
		case 2:
			var names = c[2];
			return names.join(",");
		}
	}
	,get_lastId: function() {
		if(this.hasAttribute("last_id")) return this.getAttribute("last_id"); else return 0;
	}
	,set_lastId: function(v) {
		return this.setAttribute("last_id",v);
	}
	,__class__: bp_tags_Tags
	,__properties__: $extend(tannus_mvc_StoredModel.prototype.__properties__,{set_lastId:"set_lastId",get_lastId:"get_lastId"})
});
var bp_tags_TagIterator = function(tags) {
	this.t = tags;
	var _this = this.t.getAllIds();
	this.it = HxOverrides.iter(_this);
};
$hxClasses["bp.tags.TagIterator"] = bp_tags_TagIterator;
bp_tags_TagIterator.__name__ = ["bp","tags","TagIterator"];
bp_tags_TagIterator.prototype = {
	hasNext: function() {
		return this.it.hasNext();
	}
	,next: function() {
		return this.t.getTag(this.it.next());
	}
	,__class__: bp_tags_TagIterator
};
var gryffin_ui_Menu = function() {
	gryffin_core_Entity.call(this);
	this.rect = new tannus_geom_CRectangle(0,0,0,0);
	this.items = [];
	this.backgroundColor = tannus_graphics__$Color_TColor.fromString("#515147");
	this.orientation = false;
};
$hxClasses["gryffin.ui.Menu"] = gryffin_ui_Menu;
gryffin_ui_Menu.__name__ = ["gryffin","ui","Menu"];
gryffin_ui_Menu.__super__ = gryffin_core_Entity;
gryffin_ui_Menu.prototype = $extend(gryffin_core_Entity.prototype,{
	init: function(stage) {
		this._listen();
	}
	,item: function(options) {
		var i = new gryffin_ui_MenuItem(options);
		this.append(i);
		return i;
	}
	,append: function(child) {
		if(!Lambda.has(this.items,child)) {
			this.items.push(child);
			child.set_root(this);
		}
	}
	,render: function(s,c) {
		c.ctx.save();
		var lg = this.gradient(c);
		c.set_fillStyle(lg);
		c.fillRect(this.get_x(),this.get_y(),this.get_w(),this.get_h());
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(item.enabled) item.render(s,c);
		}
		c.ctx.restore();
	}
	,update: function(s) {
		gryffin_core_Entity.prototype.update.call(this,s);
		this.positionItems(s);
	}
	,gradient: function(c) {
		var amount = 8;
		var start = this.backgroundColor.lighten(amount - 2);
		var end = this.backgroundColor.darken(amount + 1);
		var lg = c.createLinearGradient(this.get_x(),this.get_y(),this.get_x(),this.get_y() + this.get_h());
		lg.addColorStop(0.0,start.toString());
		lg.addColorStop(1.0,end.toString());
		return lg;
	}
	,walk: function(list) {
		if(list == null) list = this.items;
		var results = [];
		var _g = 0;
		while(_g < list.length) {
			var item = list[_g];
			++_g;
			results.push(item);
			results = results.concat(this.walk(item.items));
		}
		return results;
	}
	,itemClicked: function(item) {
		if(!(!Lambda.empty(item.items))) {
			var _g = 0;
			var _g1 = this.walk();
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				i.set_showChildren(false);
			}
		}
	}
	,closeAll: function() {
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.close();
		}
	}
	,isAnyOpen: function() {
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.showChildren) return true;
		}
		return false;
	}
	,positionItems: function(s) {
		var ix = 10;
		var iy = 0;
		var itm = null;
		var maxw = 0;
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.update(s);
			itm = item;
			if(!item.enabled) continue;
			var _g2 = this.orientation;
			switch(_g2) {
			case false:
				ix += item.padding.left;
				item.set_x(this.get_x() + ix);
				item.set_y(this.get_y() + (this.get_h() - item.get_h()) / 2);
				maxw = tannus_math_TMath.max(item.get_w(),maxw);
				ix += item.get_w();
				ix += item.padding.right;
				break;
			case true:
				iy += item.padding.top;
				item.set_x(this.get_x() + ix + (this.get_w() - item.get_w()) / 2);
				item.set_y(this.get_y() + iy);
				maxw = tannus_math_TMath.max(item.get_w(),maxw);
				iy += item.get_h();
				iy += item.padding.bottom;
				break;
			}
		}
		if(this.orientation == true && itm != null) {
			this.set_h(iy);
			this.set_w(maxw);
		}
	}
	,containsPoint: function(p) {
		return this.rect.contains(p.get_x(),p.get_y());
	}
	,_listen: function() {
		var _g = this;
		this.stage.on("click",function(event) {
			if(!_g.containsPoint(event.position)) {
				var _g1 = 0;
				var _g2 = _g.items;
				while(_g1 < _g2.length) {
					var item = _g2[_g1];
					++_g1;
					if(item.hierarchyContainsPoint(event.position)) return;
				}
				_g.closeAll();
			}
		});
	}
	,get_x: function() {
		return this.rect.x;
	}
	,set_x: function(v) {
		return this.rect.x = v;
	}
	,get_y: function() {
		return this.rect.y;
	}
	,set_y: function(v) {
		return this.rect.y = v;
	}
	,get_w: function() {
		return this.rect.width;
	}
	,set_w: function(v) {
		return this.rect.width = v;
	}
	,get_h: function() {
		return this.rect.height;
	}
	,set_h: function(v) {
		return this.rect.height = v;
	}
	,get_pos: function() {
		var _g = this;
		var x = new tannus_io__$Pointer_Ref(function() {
			return _g.get_x();
		},function(v) {
			return _g.set_x(v);
		});
		var y = new tannus_io__$Pointer_Ref(function() {
			return _g.get_y();
		},function(v1) {
			return _g.set_y(v1);
		});
		return new tannus_geom_LinkedPoint(x,y,null);
	}
	,__class__: gryffin_ui_Menu
	,__properties__: $extend(gryffin_core_Entity.prototype.__properties__,{get_pos:"get_pos",set_h:"set_h",get_h:"get_h",set_w:"set_w",get_w:"get_w",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"})
});
var bp_ui_AppMenu = function(p) {
	gryffin_ui_Menu.call(this);
	this.player = p;
	this.win = chrome_Windows.lib.current();
	this.box = new gryffin_display_TextBox();
	this.box.set_fontFamily("Ubuntu");
	this.box.set_fontSize(11);
	this.box.set_color(tannus_graphics__$Color_TColor.fromString("#FFFFFF"));
	this.mx = 0;
};
$hxClasses["bp.ui.AppMenu"] = bp_ui_AppMenu;
bp_ui_AppMenu.__name__ = ["bp","ui","AppMenu"];
bp_ui_AppMenu.__super__ = gryffin_ui_Menu;
bp_ui_AppMenu.prototype = $extend(gryffin_ui_Menu.prototype,{
	init: function(stage) {
		var media = new gryffin_ui_MenuItem();
		media.set_label("Media");
		this.append(media);
		media.append(new bp_ui_menu_OpenFilesButton());
		this.append(new bp_ui_menu_PlaylistButton());
		this.append(new bp_ui_menu_TrackButton());
		this.append(new bp_ui_menu_ToolsButton());
		this.append(new bp_ui_menu_HelpButton());
		gryffin_ui_Menu.prototype.init.call(this,stage);
	}
	,update: function(stage) {
		gryffin_ui_Menu.prototype.update.call(this,stage);
		this.set_w(stage.canvas.canvas.width);
		this.set_h(28);
		this.box.set_text("");
		var higherPriority = stage.get("[priority > " + this.priority + "]").selected;
		if(!Lambda.empty(higherPriority)) {
			var highest = tannus_ds_ArrayTools.max(higherPriority,function(val) {
				return val.priority;
			}).priority;
			this.priority = highest + 1;
		}
		if(this.player.app.isFullscreen() && !this.player.show_ui) this.set_h(0);
	}
	,render: function(stage,c) {
		if(!(this.player.app.isFullscreen() && !this.player.show_ui)) gryffin_ui_Menu.prototype.render.call(this,stage,c);
	}
	,positionItems: function(s) {
		gryffin_ui_Menu.prototype.positionItems.call(this,s);
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			this.mx = tannus_math_TMath.max(this.mx,item.get_x() + item.get_w());
		}
	}
	,get_hideMenu: function() {
		return this.player.app.isFullscreen() && !this.player.show_ui;
	}
	,__class__: bp_ui_AppMenu
	,__properties__: $extend(gryffin_ui_Menu.prototype.__properties__,{get_hideMenu:"get_hideMenu"})
});
var bp_ui_IconButton = function() {
	bp_core_Ent.call(this);
	this.tip = new gryffin_ui_Tooltip();
	this.tip.hide();
	this.tip.box.multiline = true;
	this.addSibling(this.tip);
	this.labelBox = new gryffin_display_TextBox();
	this.labelBox.set_fontSize(9);
	this.labelBox.set_color(tannus_graphics__$Color_TColor.fromString("#FFAD30"));
	this.hovered = false;
	this.enabled = true;
	this.lastHoverChange = null;
	this.on("click",$bind(this,this.click));
};
$hxClasses["bp.ui.IconButton"] = bp_ui_IconButton;
bp_ui_IconButton.__name__ = ["bp","ui","IconButton"];
bp_ui_IconButton.__super__ = bp_core_Ent;
bp_ui_IconButton.prototype = $extend(bp_core_Ent.prototype,{
	update: function(stage) {
		bp_core_Ent.prototype.update.call(this,stage);
		var _hov = this.hovered;
		this.hovered = false;
		var mp = stage.getMousePosition();
		this.hovered = mp != null && this.containsPoint(mp);
		if(this.hovered != _hov) this.lastHoverChange = new Date().getTime();
		if(this.hovered) {
			this.tip.target = this.rect;
			this.tip.direction = 0;
		}
	}
	,render: function(stage,c) {
		if(this.enabled) {
			if(this.icon != null) {
				c.drawComponent(this.icon,0,0,this.icon.img.naturalWidth,this.icon.img.naturalHeight,this.rect.x,this.rect.y,this.get_w(),this.get_h());
				if(this.labelBox.get_text() != "") {
					var lb = this.labelBox;
					var lw = lb.get_width();
					var lh = lb.get_height();
					var ly = this.rect.y + this.get_h() - lh - 5;
					var lx = this.rect.x + this.get_w() - lw;
					c.drawComponent(lb,0,0,lw,lh,lx,ly,lw,lh);
				}
			}
			if(!tannus_ds_StringUtils.empty(this.tip.box.get_text()) && this.hovered && this.lastHoverChange != null && new Date().getTime() - this.lastHoverChange >= 1000) this.tip.render(stage,c);
		}
	}
	,click: function(event) {
		console.log("You fucking clicked me");
	}
	,set_iconName: function(v) {
		if(v != this.iconName) this.icon = gryffin_display_Image.load("../assets/icons/" + v + ".png");
		return this.iconName = v;
	}
	,get_tooltip: function() {
		return this.tip.box.get_text();
	}
	,set_tooltip: function(v) {
		return this.tip.box.set_text(v);
	}
	,get_label: function() {
		return this.labelBox.get_text();
	}
	,set_label: function(v) {
		return this.labelBox.set_text(v);
	}
	,get_showTooltip: function() {
		return !tannus_ds_StringUtils.empty(this.tip.box.get_text()) && this.hovered && this.lastHoverChange != null && new Date().getTime() - this.lastHoverChange >= 1000;
	}
	,__class__: bp_ui_IconButton
	,__properties__: $extend(bp_core_Ent.prototype.__properties__,{get_showTooltip:"get_showTooltip",set_label:"set_label",get_label:"get_label",set_tooltip:"set_tooltip",get_tooltip:"get_tooltip",set_iconName:"set_iconName"})
});
var bp_ui_BackButton = function(bar) {
	bp_ui_IconButton.call(this);
	this.bar = bar;
	this.set_iconName("back");
};
$hxClasses["bp.ui.BackButton"] = bp_ui_BackButton;
bp_ui_BackButton.__name__ = ["bp","ui","BackButton"];
bp_ui_BackButton.__super__ = bp_ui_IconButton;
bp_ui_BackButton.prototype = $extend(bp_ui_IconButton.prototype,{
	init: function(stage) {
		var _g = this;
		bp_ui_IconButton.prototype.init.call(this,stage);
		var maybeExit;
		var maybeExit1 = null;
		maybeExit1 = function(event) {
			if(event.key == 8) {
				stage.off("keyup",maybeExit1);
				_g.bar.back();
			}
		};
		maybeExit = maybeExit1;
		stage.on("keyup",maybeExit);
	}
	,update: function(stage) {
		bp_ui_IconButton.prototype.update.call(this,stage);
	}
	,calculateGeometry: function(r) {
		this.set_w(this.set_h(this.bar.get_h()));
		this.rect.x = this.bar.rect.x + 8;
		this.rect.y = this.bar.rect.y;
	}
	,click: function(event) {
		gryffin_Tools.defer((function(f) {
			return function() {
				f();
			};
		})(($_=this.bar,$bind($_,$_.back))));
	}
	,__class__: bp_ui_BackButton
});
var bp_ui_BookmarkView = function(sb,m) {
	this.awaitingThumb = false;
	this.hovered = false;
	bp_core_Ent.call(this);
	this.priority = 2;
	this.seekbar = sb;
	this.mark = m;
	this.color = new tannus_graphics__$Color_TColor(64,64,64,null);
};
$hxClasses["bp.ui.BookmarkView"] = bp_ui_BookmarkView;
bp_ui_BookmarkView.__name__ = ["bp","ui","BookmarkView"];
bp_ui_BookmarkView.__super__ = bp_core_Ent;
bp_ui_BookmarkView.prototype = $extend(bp_core_Ent.prototype,{
	init: function(stage) {
		this.on("click",$bind(this,this.click));
		this.on("contextmenu",$bind(this,this.rightClick));
	}
	,update: function(stage) {
		var _g = this;
		bp_core_Ent.prototype.update.call(this,stage);
		this.set_h(this.seekbar.get_h());
		this.set_w(this.get_h() / 2);
		this.set_pos(this.seekbar.pointForTime(this.mark.time));
		var mp = stage.getMousePosition();
		this.hovered = mp != null && this.containsPoint(mp);
		if(this.thumb == null && !this.awaitingThumb) {
			this.awaitingThumb = true;
			this.seekbar.controls.player.getThumbnailAt(this.mark.time,function(canvas) {
				_g.thumb = canvas;
			});
		}
	}
	,render: function(stage,c) {
		bp_core_Ent.prototype.render.call(this,stage,c);
		if(this.seekbar.controls.player.show_ui) {
			c.ctx.save();
			c.set_fillStyle(this.color.toString());
			c.ctx.beginPath();
			c.drawRect(this.rect);
			c.ctx.closePath();
			c.ctx.fill();
			c.ctx.restore();
		}
	}
	,click: function(event) {
		this.seekbar.controls.player.seek(this.mark.time);
	}
	,rightClick: function(event) {
		event.cancel();
	}
	,get_player: function() {
		return this.seekbar.controls.player;
	}
	,__class__: bp_ui_BookmarkView
	,__properties__: $extend(bp_core_Ent.prototype.__properties__,{get_player:"get_player"})
});
var bp_ui_ControlButton = function() {
	bp_ui_IconButton.call(this);
	this.side = false;
	this.controls = null;
};
$hxClasses["bp.ui.ControlButton"] = bp_ui_ControlButton;
bp_ui_ControlButton.__name__ = ["bp","ui","ControlButton"];
bp_ui_ControlButton.__super__ = bp_ui_IconButton;
bp_ui_ControlButton.prototype = $extend(bp_ui_IconButton.prototype,{
	update: function(stage) {
		if(this.controls == null) this.controls = this.parentUntil(function(e) {
			return js_Boot.__instanceof(e,bp_ui_Controls);
		}); else this.set_w(this.set_h(this.controls.get_h() * 0.7));
		bp_ui_IconButton.prototype.update.call(this,stage);
	}
	,render: function(stage,c) {
		bp_ui_IconButton.prototype.render.call(this,stage,c);
	}
	,get_player: function() {
		return this.controls.player;
	}
	,get_video: function() {
		return this.controls.player.pane.video;
	}
	,get_track: function() {
		return this.controls.player.pane.video.currentTrack;
	}
	,__class__: bp_ui_ControlButton
	,__properties__: $extend(bp_ui_IconButton.prototype.__properties__,{get_track:"get_track",get_video:"get_video",get_player:"get_player"})
});
var bp_ui_Controls = function(p) {
	this.hovered = false;
	bp_core_Ent.call(this);
	this.player = p;
	this.hovered = false;
	this.addChild(new bp_ui_Seekbar());
	this.addChild(new bp_ui_PlaybackButton());
	this.addChild(new bp_ui_ShuffleButton());
	this.addChild(new bp_ui_PrevButton());
	this.addChild(new bp_ui_FullscreenButton());
	this.addChild(new bp_ui_VolumeButton());
	this.addChild(new bp_ui_PlaylistButton());
	this.addChild(new bp_ui_SpeedButton());
	this.addChild(new bp_ui_NextButton());
};
$hxClasses["bp.ui.Controls"] = bp_ui_Controls;
bp_ui_Controls.__name__ = ["bp","ui","Controls"];
bp_ui_Controls.__super__ = bp_core_Ent;
bp_ui_Controls.prototype = $extend(bp_core_Ent.prototype,{
	update: function(stage) {
		this.set_w(this.player.get_w() * 0.9);
		this.set_h(60);
		this.set_y(this.player.rect.y + this.player.get_h() - this.get_h() - 30);
		this.set_centerX(this.player.get_centerX());
		var mp = stage.getMousePosition();
		this.hovered = mp != null && this.containsPoint(mp);
		this.positionButtons();
		bp_core_Ent.prototype.update.call(this,stage);
	}
	,render: function(stage,c) {
		if(this.player.show_ui || this.hovered) {
			c.ctx.save();
			c.ctx.beginPath();
			var lg = c.createLinearGradient(this.rect.x,this.rect.y,this.rect.x,this.rect.y + this.get_h());
			lg.addColorStop(0.32,"#888");
			lg.addColorStop(1.0,"#323232");
			c.set_fillStyle(lg);
			c.roundRect(this.rect.x,this.rect.y,this.get_w(),this.get_h(),8);
			c.ctx.closePath();
			c.ctx.fill();
			c.ctx.restore();
			bp_core_Ent.prototype.render.call(this,stage,c);
		}
	}
	,positionButtons: function() {
		var buttons = this.getChildren().filter(function(item) {
			return js_Boot.__instanceof(item,bp_ui_ControlButton);
		});
		var lbx = this.rect.x;
		var rbx = this.rect.x + this.get_w();
		var margin = 5;
		var _g = 0;
		while(_g < buttons.length) {
			var button = buttons[_g];
			++_g;
			if(!button.enabled) continue;
			var _g1 = button.side;
			switch(_g1) {
			case false:
				button.rect.x = lbx;
				lbx += button.get_w();
				lbx += margin;
				break;
			case true:
				rbx -= button.get_w();
				rbx -= margin;
				button.rect.x = rbx;
				break;
			}
			button.set_y(this.rect.y + (this.get_h() - button.get_h()));
		}
	}
	,addChild: function(e) {
		if(js_Boot.__instanceof(e,bp_ui_ControlButton)) (js_Boot.__cast(e , bp_ui_ControlButton)).controls = this;
		bp_core_Ent.prototype.addChild.call(this,e);
	}
	,get_enabled: function() {
		return this.player.show_ui || this.hovered;
	}
	,__class__: bp_ui_Controls
	,__properties__: $extend(bp_core_Ent.prototype.__properties__,{get_enabled:"get_enabled"})
});
var bp_ui_FullscreenButton = function() {
	bp_ui_ControlButton.call(this);
	this.set_iconName("expand");
	this.side = true;
	this.win = chrome_Windows.lib.current();
};
$hxClasses["bp.ui.FullscreenButton"] = bp_ui_FullscreenButton;
bp_ui_FullscreenButton.__name__ = ["bp","ui","FullscreenButton"];
bp_ui_FullscreenButton.__super__ = bp_ui_ControlButton;
bp_ui_FullscreenButton.prototype = $extend(bp_ui_ControlButton.prototype,{
	update: function(stage) {
		bp_ui_ControlButton.prototype.update.call(this,stage);
		this.set_iconName(this.win.isFullscreen()?"collapse":"expand");
	}
	,click: function(event) {
		if(this.win.isFullscreen()) this.win.restore(); else this.win.fullscreen();
	}
	,__class__: bp_ui_FullscreenButton
});
var bp_ui_HelpPage = function(p) {
	gryffin_ui_Page.call(this);
	this.player = p;
	this.header = new bp_ui_PageBar(this);
	this.header.tb.set_text("BPlayer Help");
	this.addChild(this.header);
	this.kbv = new bp_ui_KeyBindingsView();
	this.addChild(this.kbv);
};
$hxClasses["bp.ui.HelpPage"] = bp_ui_HelpPage;
bp_ui_HelpPage.__name__ = ["bp","ui","HelpPage"];
bp_ui_HelpPage.__super__ = gryffin_ui_Page;
bp_ui_HelpPage.prototype = $extend(gryffin_ui_Page.prototype,{
	close: function() {
		gryffin_ui_Page.prototype.close.call(this);
		if(this.prev_page != null) this.prev_page.open();
		this["delete"]();
	}
	,calculateGeometry: function(r) {
		gryffin_ui_Page.prototype.calculateGeometry.call(this,r);
		this.kbv.set_w(r.width * 0.3);
		this.kbv.set_h(this.kbv.lb.get_height());
		this.kbv.set_centerX(r.x + r.width / 2);
		this.kbv.set_y(this.header.rect.y + this.header.get_h() + 10);
	}
	,__class__: bp_ui_HelpPage
});
var tannus_html_Elementable = function() { };
$hxClasses["tannus.html.Elementable"] = tannus_html_Elementable;
tannus_html_Elementable.__name__ = ["tannus","html","Elementable"];
tannus_html_Elementable.prototype = {
	__class__: tannus_html_Elementable
};
var foundation_WidgetAsset = function() { };
$hxClasses["foundation.WidgetAsset"] = foundation_WidgetAsset;
foundation_WidgetAsset.__name__ = ["foundation","WidgetAsset"];
foundation_WidgetAsset.__interfaces__ = [tannus_ds_Destructible];
foundation_WidgetAsset.prototype = {
	__class__: foundation_WidgetAsset
};
var foundation_Widget = function() {
	this._active = false;
	this.parentElement = null;
	this.parentWidget = null;
	var _g = this;
	tannus_io_EventDispatcher.call(this);
	this.__checkEvents = false;
	this.set_el(null);
	this.styles = new foundation_Styles(new tannus_io__$Pointer_Ref(function() {
		return _g.el;
	},function(v) {
		return _g.set_el(v);
	}));
	this.assets = [];
	this.set_uid("wi-" + tannus_ds_Memory.allocRandomId(6));
};
$hxClasses["foundation.Widget"] = foundation_Widget;
foundation_Widget.__name__ = ["foundation","Widget"];
foundation_Widget.__interfaces__ = [tannus_html_Elementable,foundation_WidgetAsset];
foundation_Widget.__super__ = tannus_io_EventDispatcher;
foundation_Widget.prototype = $extend(tannus_io_EventDispatcher.prototype,{
	attach: function(asset) {
		this.assets.push(asset);
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.assets;
		while(_g < _g1.length) {
			var x = _g1[_g];
			++_g;
			x.destroy();
		}
		if(this.el != null) this.el.remove();
	}
	,toElement: function() {
		return this.el;
	}
	,'is': function(selector) {
		if(this.el == null) return false; else return this.el["is"](selector);
	}
	,engage: function() {
		tannus_html__$Element_Element_$Impl_$.plugin(this.el,"foundation");
	}
	,reflow: function() {
		window.Foundation.reInit(this.el);
	}
	,activate: function() {
		this._active = true;
		var _g = 0;
		var _g1;
		var this1;
		var jq = this.toElement().children();
		this1 = js.JQuery(jq);
		var _g2 = [];
		var _g21 = 0;
		var _g11 = this1.length;
		while(_g21 < _g11) {
			var i = _g21++;
			_g2.push((function($this) {
				var $r;
				var jq1 = this1.get(i);
				$r = js.JQuery(jq1);
				return $r;
			}(this)));
		}
		_g1 = _g2;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			var w = e.data("__hfWidget__");
			if(w != null && !w._active) w.activate();
		}
		this.dispatch("activate",this);
		console.log("anal monkey");
	}
	,appendTo: function(parent) {
		if(js_Boot.__instanceof(parent,foundation_Widget)) {
			var par = parent;
			par.append(this);
		} else {
			var par1 = js.JQuery(parent);
			par1.append(this.toElement());
			this.parentElement = par1;
			this.parentWidget = null;
		}
		this.__ac();
	}
	,append: function(child) {
		this._attach(child,function(l,r) {
			l.append(r);
		});
	}
	,prepend: function(child) {
		this._attach(child,function(l,r) {
			l.prepend(r);
		});
	}
	,after: function(tail) {
		this._attach(tail,function(l,r) {
			l.after(r);
		});
	}
	,before: function(head) {
		this._attach(head,function(l,r) {
			l.before(r);
		});
	}
	,_attach: function(child,attacher) {
		if(js_Boot.__instanceof(child,foundation_Widget)) this._attachWidget(child,attacher); else {
			var ch = js.JQuery(child);
			var hwd = ch.data("__hfWidget__");
			if(hwd != null && js_Boot.__instanceof(hwd,foundation_Widget)) this._attachWidget(hwd,attacher); else this._attachElement(ch,attacher);
		}
		this.__ac();
	}
	,_attachWidget: function(child,attacher) {
		attacher(this.toElement(),child.toElement());
		this.attach(child);
		child.parentWidget = this;
		child.parentElement = this.toElement();
		if(this._active) child.activate();
	}
	,_attachElement: function(child,attacher) {
		attacher(this.toElement(),child);
	}
	,parentOf: function(child) {
		if(js_Boot.__instanceof(child,foundation_Widget)) {
			var cw = child;
			return cw.el.closest(this.el).length > 0;
		} else {
			var ce = js.JQuery(child);
			return ce.closest(this.el).length > 0;
		}
	}
	,childOf: function(parent) {
		if(js_Boot.__instanceof(parent,foundation_Widget)) return (js_Boot.__cast(parent , foundation_Widget)).parentOf(parent); else {
			var this1 = js.JQuery(parent);
			return this.el.closest(this1).length > 0;
		}
	}
	,insertAt: function(child,index) {
		if(!this.parentOf(child)) this.append(child);
		if(js_Boot.__instanceof(child,foundation_Widget)) tannus_html__$Element_Element_$Impl_$.index(this.el,(js_Boot.__cast(child , foundation_Widget)).toElement(),index); else tannus_html__$Element_Element_$Impl_$.index(this.el,(function($this) {
			var $r;
			var el;
			{
				var this1 = js.JQuery(child);
				el = this1.get(0);
			}
			$r = js.JQuery(el);
			return $r;
		}(this)),index);
	}
	,replaceChild: function(child,repl) {
		if(this.parentOf(child)) {
			if(js_Boot.__instanceof(repl,foundation_Widget)) {
				var rw = repl;
				child.el.replaceWith(rw.el);
			} else child.el.replaceWith(js.JQuery(repl));
		}
	}
	,replaceWith: function(repl) {
		if(this.parentWidget != null) this.parentWidget.replaceChild(this,repl);
	}
	,parentWidgetUntil: function(test) {
		if(this.parentWidget != null) {
			var pw = this.parentWidget;
			if(test(pw)) return pw; else return pw.parentWidgetUntil(test);
		} else return null;
	}
	,parentElementUntil: function(test) {
		var t = this.el.parent();
		while(t.length > 0) {
			if(test(t)) return t;
			t = t.parent();
		}
		return null;
	}
	,addClass: function(name) {
		this.el.addClass(name);
	}
	,addClasses: function(names) {
		Lambda.iter(names,$bind(this,this.addClass));
	}
	,removeClass: function(name) {
		this.el.removeClass(name);
	}
	,toggleClass: function(name) {
		this.el.toggleClass(name);
	}
	,classes: function() {
		return ((function($this) {
			var $r;
			var this1 = $this.el.attr("class");
			$r = this1 != null?this1:this1;
			return $r;
		}(this))).split(" ");
	}
	,meta: function(name,value) {
		if(value == null) return this.el.data(name); else {
			this.el.data(name,value);
			return value;
		}
	}
	,forwardEvent: function(name,src,trans) {
		var _g = this;
		if(src == null) src = this.el;
		if(trans == null) trans = function(x) {
			return x;
		};
		src.on(name,function(raw_event) {
			var event = trans(raw_event);
			_g.dispatch(name,event);
		});
	}
	,forwardEvents: function(names,src,trans) {
		var _g = 0;
		while(_g < names.length) {
			var n = names[_g];
			++_g;
			this.forwardEvent(n,src,trans);
		}
	}
	,onactivate: function(f) {
		if(this._active) window.requestAnimationFrame(f); else this.once("activated",f);
	}
	,__bindElement: function(e) {
		e.data("__hfWidget__",this);
		var value = this.uid;
		e.attr("id",value);
		value;
	}
	,__ac: function() {
		if((function($this) {
			var $r;
			var other = js.JQuery("html");
			$r = $this.el.closest(other).length > 0;
			return $r;
		}(this)) && !this._active) this.activate();
	}
	,get_d: function() {
		var this1 = window;
		return this1.document;
	}
	,get_doc: function() {
		var jq = this.get_d();
		return js.JQuery(jq);
	}
	,get_text: function() {
		return this.el.text();
	}
	,set_text: function(nt) {
		var this1 = this.el;
		this1.text(nt);
		return this1.text();
	}
	,get_width: function() {
		return this.el.width() + 0.0;
	}
	,set_width: function(nw) {
		var this1 = this.el;
		this1.width(Math.round(nw));
		return this1.width() + 0.0;
	}
	,get_height: function() {
		return this.el.height() + 0.0;
	}
	,set_height: function(nh) {
		var this1 = this.el;
		this1.height(Math.round(nh));
		return this1.height() + 0.0;
	}
	,get_css: function() {
		return tannus_html__$Element_Element_$Impl_$.get_style(this.el);
	}
	,set_el: function(v) {
		var ee = this.el;
		this.el = v;
		if(this.el != null && this.el != ee) this.__bindElement(this.el);
		return this.el;
	}
	,set_uid: function(v) {
		this.uid = v;
		if(this.el != null) {
			var value = this.uid;
			this.el.attr("id",value);
			value;
		}
		return this.uid;
	}
	,__class__: foundation_Widget
	,__properties__: {set_uid:"set_uid",set_el:"set_el",get_css:"get_css",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_text:"set_text",get_text:"get_text",get_doc:"get_doc",get_d:"get_d"}
});
var foundation_Pane = function() {
	foundation_Widget.call(this);
	this.set_el(js.JQuery("<div></div>"));
};
$hxClasses["foundation.Pane"] = foundation_Pane;
foundation_Pane.__name__ = ["foundation","Pane"];
foundation_Pane.__super__ = foundation_Widget;
foundation_Pane.prototype = $extend(foundation_Widget.prototype,{
	__class__: foundation_Pane
});
var bp_ui_PromptBox = function() {
	foundation_Pane.call(this);
	this.input = new foundation_TextInput();
	this.titl = new foundation_LabelSpan();
	this.append(this.titl);
	this.append(this.input);
	this.titl.set_text("Prompt Title");
	this.__listen();
};
$hxClasses["bp.ui.PromptBox"] = bp_ui_PromptBox;
bp_ui_PromptBox.__name__ = ["bp","ui","PromptBox"];
bp_ui_PromptBox.__super__ = foundation_Pane;
bp_ui_PromptBox.prototype = $extend(foundation_Pane.prototype,{
	open: function() {
		this.__init();
		this.appendTo("body");
		this.__center();
	}
	,close: function() {
		this.destroy();
	}
	,focus: function() {
		this.input.focus();
	}
	,caret: function(index) {
		this.input.focus();
		this.input.get_iel().setSelectionRange(index,index);
	}
	,select: function() {
		this.input.get_iel().select();
	}
	,selectRange: function(start,end) {
		this.input.get_iel().setSelectionRange(start,end);
	}
	,readLine: function(f) {
		this.once("line",f);
	}
	,moveTo: function(x,y) {
		tannus_html__$Element_Element_$Impl_$.get_style(this.el).write({ left : x + "px", top : y + "px"});
	}
	,__init: function() {
		var c = tannus_html__$Element_Element_$Impl_$.get_style(this.el);
		c.set("position","absolute");
		c.set("display","block");
		c.set("z-index","11111");
		c.set("top","55px");
		c.set("width","90%");
		c = tannus_html__$Element_Element_$Impl_$.get_style(this.input.el);
		c.set("width","100%");
		c = tannus_html__$Element_Element_$Impl_$.get_style(this.titl.el);
		c.set("font-size","13.8px");
	}
	,__listen: function() {
		this.input.on("keydown",function(event) {
			event.stopPropogation();
		});
		this.input.on("keyup",$bind(this,this.keyup));
	}
	,keyup: function(event) {
		var _g = event.key;
		switch(_g) {
		case 13:
			if(!tannus_ds_StringUtils.empty(StringTools.trim(this.input.getValue()))) this.line(this.input.getValue());
			this.close();
			break;
		default:
			null;
		}
	}
	,line: function(l) {
		this.dispatch("line",this.input.getValue());
	}
	,__center: function() {
		var mr = tannus_html__$Element_Element_$Impl_$.get_rectangle(this.el);
		var pr = tannus_html__$Element_Element_$Impl_$.get_rectangle(js.JQuery("body"));
		var c = tannus_html__$Element_Element_$Impl_$.get_style(this.el);
		var cx = mr.x = pr.x + pr.width / 2 - mr.width / 2;
		c.set("left","" + cx + "px");
	}
	,get_value: function() {
		return this.input.getValue();
	}
	,set_value: function(v) {
		this.input.setValue(v);
		return this.input.getValue();
	}
	,get_title: function() {
		return this.titl.get_text();
	}
	,set_title: function(v) {
		return this.titl.set_text(v);
	}
	,get_placeholder: function() {
		return this.input.get_placeholder();
	}
	,set_placeholder: function(v) {
		this.input.el.attr("placeholder",v);
		return v;
	}
	,get_i: function() {
		return this.input.get_iel();
	}
	,__class__: bp_ui_PromptBox
	,__properties__: $extend(foundation_Pane.prototype.__properties__,{get_i:"get_i",set_placeholder:"set_placeholder",get_placeholder:"get_placeholder",set_title:"set_title",get_title:"get_title",set_value:"set_value",get_value:"get_value"})
});
var tannus_ds_History = function() {
	this.stack = [];
};
$hxClasses["tannus.ds.History"] = tannus_ds_History;
tannus_ds_History.__name__ = ["tannus","ds","History"];
tannus_ds_History.prototype = {
	add: function(entry) {
		if(!Lambda.empty(this.stack) && this.compare(entry,tannus_ds_ArrayTools.last(this.stack))) return;
		this.index = this.stack.push(entry);
	}
	,peek: function(i) {
		if(i == null) i = 0;
		return this.stack[this.stack.length - (i + 1)];
	}
	,pop: function() {
		return this.stack.pop();
	}
	,find: function(value) {
		var _g1 = 0;
		var _g = this.stack.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.compare(value,this.stack[i])) return i;
		}
		return -1;
	}
	,compare: function(x,y) {
		return x == y;
	}
	,__class__: tannus_ds_History
};
var bp_ui_JumpToTimeBox = function(p) {
	bp_ui_PromptBox.call(this);
	this.player = p;
	this.peekDistance = 0;
	this.titl.set_text("Seek Command");
};
$hxClasses["bp.ui.JumpToTimeBox"] = bp_ui_JumpToTimeBox;
bp_ui_JumpToTimeBox.__name__ = ["bp","ui","JumpToTimeBox"];
bp_ui_JumpToTimeBox.__super__ = bp_ui_PromptBox;
bp_ui_JumpToTimeBox.prototype = $extend(bp_ui_PromptBox.prototype,{
	keyup: function(event) {
		var _g = event.key;
		switch(_g) {
		case 13:
			this.line(this.input.getValue());
			this.close();
			break;
		case 27:
			this.close();
			break;
		case 38:
			this.up();
			break;
		case 40:
			this.down();
			break;
		default:
			null;
		}
	}
	,open: function() {
		var _g = this;
		bp_ui_PromptBox.prototype.open.call(this);
		gryffin_Tools.defer(function() {
			_g.set_value("");
		});
	}
	,line: function(v) {
		var _g = this;
		if(v == null || v.length == 0) {
			var prev = bp_ui_JumpToTimeBox.history.peek();
			if(prev != null) this.line(prev);
			return;
		}
		var entry = v;
		v = StringTools.trim(v);
		var mode = " ";
		if(StringTools.startsWith(v,"+")) {
			mode = "+";
			v = v.substring(1);
		} else if(StringTools.startsWith(v,"-")) {
			mode = "-";
			v = v.substring(1);
		}
		var time = tannus_media__$Duration_Duration_$Impl_$._new();
		try {
			var tokens = new bp_bplash_Lexer().lex(tannus_io_impl_BrowserBinary.ofString(v));
			var numberedUnit = function(number,unit) {
				switch(unit) {
				case "h":case "hr":case "hrs":case "hours":
					time.hours = Math.floor(number);
					break;
				case "m":case "min":case "minutes":
					time.minutes = Math.floor(number);
					break;
				case "s":case "sec":case "seconds":
					time.seconds = Math.floor(number);
					break;
				case "%":case "percent":
					var perc = number;
					var n = tannus_media_CDur.fromSecondsI(Math.floor(_g.player.pane.video.vid.duration)).get_totalSeconds() * (perc / 100);
					time = tannus_media_CDur.fromSecondsI(Math.floor(n));
					break;
				default:
					null;
				}
			};
			var track = this.player.pane.video.currentTrack;
			var marks;
			if(track != null) marks = track.meta.get_marks(); else marks = [];
			var bookmarkName = function(name) {
				if(!Lambda.empty(marks)) {
					var mark = tannus_ds_ArrayTools.firstMatch(marks,function(item) {
						return item.get_name() == name;
					});
					if(mark != null) time = mark.time;
				}
			};
			var awaitingUnit = null;
			var _g1 = 0;
			while(_g1 < tokens.length) {
				var t = tokens[_g1];
				++_g1;
				switch(t[2][1]) {
				case 2:
					var unit1 = t[2][3];
					var number1 = t[2][2];
					if(unit1 == null) awaitingUnit = number1; else numberedUnit(number1,unit1);
					break;
				case 0:
					var unit2 = t[2][2];
					if(awaitingUnit != null) {
						numberedUnit(awaitingUnit,unit2);
						awaitingUnit = null;
					} else bookmarkName(unit2);
					break;
				case 1:
					var str = t[2][2];
					bookmarkName(str);
					break;
				}
			}
			if(awaitingUnit != null) numberedUnit(awaitingUnit,"%");
		} catch( error ) {
			if (error instanceof js__$Boot_HaxeError) error = error.val;
			window.console.error(error);
			return;
		}
		switch(mode) {
		case " ":
			null;
			break;
		case "+":
			var _g2 = time;
			_g2.set_totalSeconds(3600 * _g2.hours + 60 * _g2.minutes + _g2.seconds + Math.floor(this.player.pane.video.vid.currentTime));
			break;
		case "-":
			var _g3 = time;
			_g3.set_totalSeconds(3600 * _g3.hours + 60 * _g3.minutes + _g3.seconds - Math.floor(this.player.pane.video.vid.currentTime));
			break;
		}
		console.log(entry);
		bp_ui_JumpToTimeBox.history.add(entry);
		this.player.pane.video.vid.currentTime = 3600 * time.hours + 60 * time.minutes + time.seconds;
		this.peekDistance = 0;
	}
	,tab: function() {
		this.right();
	}
	,right: function() {
		var s = this.input.getValue();
		if(tannus_ds_StringUtils.has(s,":")) {
			var c1 = s.indexOf(":");
			var c2 = s.indexOf(":",c1 + 1);
			var index = this.input.get_iel().selectionStart;
			if(index < c1) this.input.get_iel().setSelectionRange(c1 + 1,c1 + 3); else if(index > c1 && index < c2) this.input.get_iel().setSelectionRange(c2 + 1,c2 + 3); else if(index > c1 && index > c2) this.input.get_iel().setSelectionRange(1,3);
		}
	}
	,left: function() {
		var s = this.input.getValue();
		if(tannus_ds_StringUtils.has(s,":")) {
			var c1 = s.indexOf(":");
			var c2 = s.indexOf(":",c1 + 1);
			var index = this.input.get_iel().selectionStart;
			console.log([c1,c2,index]);
			if(index < c1) this.input.get_iel().setSelectionRange(c2 + 1,c2 + 3); else if(index > c1 && index < c2) this.input.get_iel().setSelectionRange(1,3); else if(index > c1 && index > c2) this.input.get_iel().setSelectionRange(c1 + 1,c1 + 3);
		}
	}
	,up: function() {
		var previous = bp_ui_JumpToTimeBox.history.peek(this.peekDistance++);
		console.log(previous);
		if(previous != null) this.set_value(previous);
	}
	,down: function() {
		var entry = bp_ui_JumpToTimeBox.history.peek(--this.peekDistance);
		if(entry != null) this.set_value(entry);
	}
	,__class__: bp_ui_JumpToTimeBox
});
var bp_ui_KeyBindingsView = function() {
	bp_core_Ent.call(this);
	this.lb = new gryffin_display_TextBox();
	this.rb = new gryffin_display_TextBox();
	this.formatBox(this.lb);
	this.formatBox(this.rb);
};
$hxClasses["bp.ui.KeyBindingsView"] = bp_ui_KeyBindingsView;
bp_ui_KeyBindingsView.__name__ = ["bp","ui","KeyBindingsView"];
bp_ui_KeyBindingsView.__super__ = bp_core_Ent;
bp_ui_KeyBindingsView.prototype = $extend(bp_core_Ent.prototype,{
	init: function(stage) {
		var l = [];
		var r = [];
		var _g = 0;
		var _g1 = bp_ui_KeyBindingsView.bindings;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			l.push(b.name);
			r.push(b.key);
		}
		this.lb.set_text(l.join("\n"));
		this.rb.set_text(r.join("\n"));
		bp_core_Ent.prototype.init.call(this,stage);
	}
	,render: function(stage,c) {
		c.drawComponent(this.lb,0,0,this.lb.get_width(),this.lb.get_height(),this.rect.x,this.rect.y,this.lb.get_width(),this.lb.get_height());
		c.drawComponent(this.rb,0,0,this.rb.get_width(),this.rb.get_height(),this.rect.x + this.get_w() - this.rb.get_width(),this.rect.y,this.rb.get_width(),this.rb.get_height());
	}
	,formatBox: function(b) {
		b.set_fontFamily("Ubuntu");
		b.set_fontSize(10);
		b.multiline = true;
		b.set_color(new tannus_graphics__$Color_TColor(0,0,0,null));
	}
	,__class__: bp_ui_KeyBindingsView
});
var bp_ui_KeyControls = function(p) {
	this.lastKey = null;
	this.player = p;
	this.page = this.player.parentUntil(function(e) {
		return js_Boot.__instanceof(e,gryffin_ui_Page);
	});
	this.enabled = true;
	this.initialize();
};
$hxClasses["bp.ui.KeyControls"] = bp_ui_KeyControls;
bp_ui_KeyControls.__name__ = ["bp","ui","KeyControls"];
bp_ui_KeyControls.prototype = {
	disable: function() {
		this.enabled = false;
	}
	,enable: function() {
		this.enabled = true;
	}
	,initialize: function() {
		this.player.stage.on("keydown",$bind(this,this.handleKey));
	}
	,handleKey: function(event) {
		var _g1 = this;
		if(!this.page.isOpen()) return;
		var box = this.player.stage.get("~bp.ui.PromptBox");
		if(box.selected.length > 0) return;
		var ignoreKey = false;
		var _g = event.key;
		switch(_g) {
		case 9:
			this.player.shiftSelection();
			break;
		case 32:
			if(event.shiftKey) this.player.bookmark(); else this.player.togglePlayback();
			break;
		case 81:
			window.close();
			break;
		case 79:
			if(event.ctrlKey) {
				if(event.shiftKey) this.player.openDirectory(); else this.player.open();
			}
			break;
		case 78:
			if(event.shiftKey) {
			} else this.player.nextTrack();
			break;
		case 80:
			this.player.prevTrack();
			break;
		case 77:
			this.player.pane.video.vid.muted = !this.player.pane.video.vid.muted;
			break;
		case 83:
			if(event.shiftKey) this.player.screenshot(); else {
				var _g11 = this.player.pane.video;
				_g11.set_volume(_g11.vid.volume - 0.05);
				this.player.data.settings.setAttribute("volume",this.player.pane.video.vid.volume);
			}
			break;
		case 68:
			var _g12 = this.player.pane.video;
			_g12.set_volume(_g12.vid.volume + 0.05);
			this.player.data.settings.setAttribute("volume",this.player.pane.video.vid.volume);
			break;
		case 70:
			if(event.ctrlKey) this.player.toggleFullscreen(); else gryffin_Tools.defer((function(f) {
				return function() {
					f();
				};
			})(($_=this.player,$bind($_,$_.showPlaylist))));
			break;
		case 76:
			if(event.ctrlKey) this.player.clearPlaylist();
			break;
		case 88:
			var ct = this.player.pane.video.currentTrack;
			if(ct != null) this.player.nextTrack(function() {
				_g1.player.playlist.removeTrack(ct);
				_g1.player.status.message("nav","Removed Track",null);
			});
			break;
		case 69:
			this.player.pane.video.gotoFrame(this.player.pane.video.currentFrame() + 1);
			break;
		case 82:
			if(event.ctrlKey) this.player.restart(); else if(event.shiftKey) {
			} else if(this.lastKey == 82 && this.player.playlist.tracks.length > 0) this.player.randomTrack(); else if(this.lastKey == 71 && this.player.pane.video.currentTrack != null) {
			} else this.lastKey = 82;
			break;
		case 71:
			if(event.shiftKey) {
				var ct1 = this.player.pane.video.currentTrack;
				if(ct1 != null) {
					ct1.startTime(this.player.pane.video.vid.currentTime);
					this.player.log("track-meta","Track's start-time set to " + (function($this) {
						var $r;
						var this1 = tannus_media_CDur.fromSecondsI(Math.floor($this.player.pane.video.vid.currentTime));
						$r = this1.toString();
						return $r;
					}(this)),null);
				}
			} else if(this.lastKey == 71) {
				var ct2 = this.player.pane.video.currentTrack;
				if(ct2 != null) {
					this.player.seek((function($this) {
						var $r;
						var n = ct2.startTime();
						$r = tannus_media_CDur.fromSecondsI(Math.floor(n));
						return $r;
					}(this)));
					this.player.status.message("nav","Jumped to Track's start time",null);
				}
			} else this.lastKey = 71;
			break;
		case 37:
			var _g13 = this.player.pane.video;
			_g13.set_currentTime(_g13.vid.currentTime - this.getJumpDistance(event));
			break;
		case 39:
			var _g14 = this.player.pane.video;
			_g14.set_currentTime(_g14.vid.currentTime + this.getJumpDistance(event));
			break;
		case 219:
			var _g15 = this.player.pane.video;
			_g15.set_playbackRate(_g15.vid.playbackRate - (event.shiftKey?0.2:0.05));
			this.player.data.settings.set_speed(this.player.pane.video.vid.playbackRate);
			break;
		case 221:
			var _g16 = this.player.pane.video;
			_g16.set_playbackRate(_g16.vid.playbackRate + (event.shiftKey?0.2:0.05));
			this.player.data.settings.set_speed(this.player.pane.video.vid.playbackRate);
			break;
		case 187:
			this.player.pane.video.set_playbackRate(1.0);
			this.player.data.settings.set_speed(this.player.pane.video.vid.playbackRate);
			break;
		case 190:case 110:
			this.player.seekPrompt();
			break;
		case 188:
			this.player.speedPrompt();
			break;
		case 56:
			if(event.shiftKey) {
				var t = this.player.pane.video.currentTrack;
				if(t != null) {
					t.meta.set_favorited(!t.meta.get_favorited());
					var action;
					if(t.meta.get_favorited()) action = "favorited"; else action = "unfavorited";
					this.player.status.message("track-meta","Track " + action,null);
				}
			} else {
				var index = event.key - 49;
				var t1 = this.player.pane.video.currentTrack;
				if(t1 != null) {
					var mark = t1.meta.get_marks()[index];
					if(mark != null) {
						{
							var this2 = mark.time;
							this.player.pane.video.vid.currentTime = 3600 * this2.hours + 60 * this2.minutes + this2.seconds;
						}
						this.player.log("nav","Jumped to \"" + mark.get_name() + "\"",null);
					}
				}
			}
			break;
		case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 57:
			var index1 = event.key - 49;
			var t2 = this.player.pane.video.currentTrack;
			if(t2 != null) {
				var mark1 = t2.meta.get_marks()[index1];
				if(mark1 != null) {
					{
						var this3 = mark1.time;
						this.player.pane.video.vid.currentTime = 3600 * this3.hours + 60 * this3.minutes + this3.seconds;
					}
					this.player.log("nav","Jumped to \"" + mark1.get_name() + "\"",null);
				}
			}
			break;
		case 90:
			if(event.ctrlKey) this.player.hist.undo(); else console.log(event.keyCode);
			break;
		case 89:
			if(event.ctrlKey) this.player.hist.redo(); else console.log(event.keyCode);
			break;
		default:
			console.log(event.keyCode);
		}
		if(ignoreKey) this.lastKey = event.key;
	}
	,getJumpDistance: function(event) {
		var res = 2;
		if(event.shiftKey) res = 10; else if(event.ctrlKey) res = 30; else if(event.altKey) res = 60;
		return res;
	}
	,get_video: function() {
		return this.player.pane.video;
	}
	,get_track: function() {
		return this.player.pane.video.currentTrack;
	}
	,get_settings: function() {
		return this.player.data.settings;
	}
	,__class__: bp_ui_KeyControls
	,__properties__: {get_settings:"get_settings",get_track:"get_track",get_video:"get_video"}
};
var gryffin_ui_Ent = function() {
	gryffin_core_EntityContainer.call(this);
	this.rect = new tannus_geom_CRectangle(0,0,0,0);
};
$hxClasses["gryffin.ui.Ent"] = gryffin_ui_Ent;
gryffin_ui_Ent.__name__ = ["gryffin","ui","Ent"];
gryffin_ui_Ent.__super__ = gryffin_core_EntityContainer;
gryffin_ui_Ent.prototype = $extend(gryffin_core_EntityContainer.prototype,{
	containsPoint: function(p) {
		return this.rect.contains(p.get_x(),p.get_y());
	}
	,get_x: function() {
		return this.rect.x;
	}
	,set_x: function(v) {
		return this.rect.x = v;
	}
	,get_y: function() {
		return this.rect.y;
	}
	,set_y: function(v) {
		return this.rect.y = v;
	}
	,get_w: function() {
		return this.rect.width;
	}
	,set_w: function(v) {
		return this.rect.width = v;
	}
	,get_h: function() {
		return this.rect.height;
	}
	,set_h: function(v) {
		return this.rect.height = v;
	}
	,get_pos: function() {
		var _g = this;
		var x = new tannus_io__$Pointer_Ref(function() {
			return _g.rect.x;
		},function(v) {
			return _g.rect.x = v;
		});
		var y = new tannus_io__$Pointer_Ref(function() {
			return _g.rect.y;
		},function(v1) {
			return _g.rect.y = v1;
		});
		return new tannus_geom_LinkedPoint(x,y,null);
	}
	,set_pos: function(v) {
		var x = this.set_x(v.get_x());
		var y = this.set_y(v.get_y());
		return new tannus_geom_TPoint(x,y,0);
	}
	,get_centerX: function() {
		return this.rect.x + this.get_w() / 2;
	}
	,set_centerX: function(v) {
		return this.set_x(v - this.get_w() / 2);
	}
	,get_centerY: function() {
		return this.rect.y + this.get_w() / 2;
	}
	,set_centerY: function(v) {
		return this.set_y(v - this.get_h() / 2);
	}
	,get_center: function() {
		var _g = this;
		var x = new tannus_io__$Pointer_Ref(function() {
			return _g.get_centerX();
		},function(v) {
			return _g.set_centerX(v);
		});
		var y = new tannus_io__$Pointer_Ref(function() {
			return _g.get_centerY();
		},function(v1) {
			return _g.set_centerY(v1);
		});
		return new tannus_geom_LinkedPoint(x,y,null);
	}
	,set_center: function(v) {
		return this.rect.set_center(v);
	}
	,__class__: gryffin_ui_Ent
	,__properties__: $extend(gryffin_core_EntityContainer.prototype.__properties__,{set_center:"set_center",get_center:"get_center",set_centerY:"set_centerY",get_centerY:"get_centerY",set_centerX:"set_centerX",get_centerX:"get_centerX",set_pos:"set_pos",get_pos:"get_pos",set_h:"set_h",get_h:"get_h",set_w:"set_w",get_w:"get_w",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"})
});
var gryffin_ui_ProgressBar = function() {
	gryffin_ui_Ent.call(this);
	this.border = new gryffin_ui_Border();
	this.box = new gryffin_display_TextBox();
	this.backgroundColor = new tannus_graphics__$Color_TColor(255,255,255,null);
	this.barColor = new tannus_graphics__$Color_TColor(0,0,0,null);
	this.prog = 0;
};
$hxClasses["gryffin.ui.ProgressBar"] = gryffin_ui_ProgressBar;
gryffin_ui_ProgressBar.__name__ = ["gryffin","ui","ProgressBar"];
gryffin_ui_ProgressBar.__super__ = gryffin_ui_Ent;
gryffin_ui_ProgressBar.prototype = $extend(gryffin_ui_Ent.prototype,{
	update: function(stage) {
		gryffin_ui_Ent.prototype.update.call(this,stage);
		this.box.fit(this.get_w(),this.get_h());
	}
	,render: function(stage,c) {
		c.ctx.beginPath();
		c.set_fillStyle(this.backgroundColor.toString());
		if(this.border.radius == 0) c.drawRect(this.rect); else c.drawRoundRect(this.rect,this.border.radius);
		c.ctx.closePath();
		c.ctx.fill();
		var bar;
		var _width = this.get_w() * (this.prog / 100);
		var _height = this.get_h();
		bar = new tannus_geom_CRectangle(this.rect.x,this.rect.y,_width,_height);
		c.ctx.beginPath();
		c.set_fillStyle(this.barColor.toString());
		if(this.border.radius == 0) c.ctx.rect(bar.x,bar.y,bar.width,bar.height); else c.roundRect(bar.x,bar.y,bar.width,bar.height,this.border.radius);
		c.ctx.closePath();
		c.ctx.fill();
		c.ctx.beginPath();
		c.set_strokeStyle(this.border.color.toString());
		c.set_lineWidth(this.border.width);
		if(this.border.radius == 0) c.drawRect(this.rect); else c.drawRoundRect(this.rect,this.border.radius);
		c.ctx.closePath();
		c.ctx.stroke();
		if(this.box.get_text() != "") {
			var tx = 8;
			var ty = this.rect.y + (this.get_h() - this.box.get_height()) / 2;
			c.drawComponent(this.box,0,0,this.box.get_width(),this.box.get_height(),this.rect.x + tx,ty,this.box.get_width(),this.box.get_height());
		}
	}
	,get_text: function() {
		return this.box.get_text();
	}
	,set_text: function(v) {
		return this.box.set_text(v);
	}
	,get_progress: function() {
		return this.prog;
	}
	,set_progress: function(v) {
		return this.prog = v;
	}
	,__class__: gryffin_ui_ProgressBar
	,__properties__: $extend(gryffin_ui_Ent.prototype.__properties__,{set_progress:"set_progress",get_progress:"get_progress",set_text:"set_text",get_text:"get_text"})
});
var bp_ui_LoadingBar = function(p,l) {
	gryffin_ui_ProgressBar.call(this);
	this.set_h(30);
	this.border.radius = 5;
	this.border.width = 1;
	this.border.color = new tannus_graphics__$Color_TColor(204,204,204,null);
	this.barColor = new tannus_graphics__$Color_TColor(248,185,81,null);
	this.backgroundColor = new tannus_graphics__$Color_TColor(249,249,249,null);
	this.box.set_text("Loading Session...");
	this.player = p;
	this.loader = l;
};
$hxClasses["bp.ui.LoadingBar"] = bp_ui_LoadingBar;
bp_ui_LoadingBar.__name__ = ["bp","ui","LoadingBar"];
bp_ui_LoadingBar.__super__ = gryffin_ui_ProgressBar;
bp_ui_LoadingBar.prototype = $extend(gryffin_ui_ProgressBar.prototype,{
	update: function(stage) {
		this.set_w(stage.canvas.canvas.width * 0.7);
		this.set_centerX(new tannus_geom_CRectangle(0,0,stage.canvas.canvas.width,stage.canvas.canvas.height).get_centerX());
		this.set_centerY(this.player.rect.get_centerY());
		this.prog = this.loader.completion;
		if(js_Boot.__instanceof(this.loader,tannus_ds_StandardTask)) {
			var sl;
			sl = js_Boot.__cast(this.loader , tannus_ds_StandardTask);
			this.set_text(sl.get_status() != null?Std.string(sl.get_status()):this.box.get_text());
		}
		gryffin_ui_ProgressBar.prototype.update.call(this,stage);
	}
	,__class__: bp_ui_LoadingBar
});
var bp_ui_NextButton = function() {
	bp_ui_ControlButton.call(this);
	this.tip.direction = 2;
	this.set_iconName("next");
	this.side = true;
};
$hxClasses["bp.ui.NextButton"] = bp_ui_NextButton;
bp_ui_NextButton.__name__ = ["bp","ui","NextButton"];
bp_ui_NextButton.__super__ = bp_ui_ControlButton;
bp_ui_NextButton.prototype = $extend(bp_ui_ControlButton.prototype,{
	update: function(stage) {
		bp_ui_ControlButton.prototype.update.call(this,stage);
		if(this.controls.player.pane.video.currentTrack != null && this.controls.player.pane.video.currentTrack.nextTrack() != null) this.set_tooltip(this.controls.player.pane.video.currentTrack.nextTrack().get_title()); else this.tip.box.set_text("");
	}
	,click: function(event) {
		var _g = this;
		this.controls.player.nextTrack(function() {
			console.log("skipped to " + _g.controls.player.pane.video.currentTrack.get_title());
		});
	}
	,__class__: bp_ui_NextButton
});
var bp_ui_Notification = function() {
	foundation_Pane.call(this);
	this.drawer = null;
	this.__style();
};
$hxClasses["bp.ui.Notification"] = bp_ui_Notification;
bp_ui_Notification.__name__ = ["bp","ui","Notification"];
bp_ui_Notification.__super__ = foundation_Pane;
bp_ui_Notification.prototype = $extend(foundation_Pane.prototype,{
	__style: function() {
		var c = tannus_html__$Element_Element_$Impl_$.get_style(this.el);
		this.addClasses(["notification"]);
		var props = { width : "100%", padding : "16px", 'background-color' : "#2199e8", 'margin-top' : "10px"};
		c.applyObject(props);
		this.hide();
	}
	,init: function(d) {
		this.drawer = d;
	}
	,open: function() {
		if(this.drawer != null) this.reveal((function(f,a1,a2) {
			return function() {
				f(a1,a2);
			};
		})($bind(this,this.dispatch),"open",null));
	}
	,close: function() {
		if(this.drawer != null) this.unreveal((function(f,a1,a2) {
			return function() {
				f(a1,a2);
			};
		})($bind(this,this.dispatch),"close",null));
	}
	,reveal: function(done) {
		var this1 = tannus_html__$Element_Element_$Impl_$.get_style(this.el);
		this1.set("display","block");
		done();
	}
	,unreveal: function(done) {
		this.destroy();
		done();
	}
	,hide: function() {
		var this1 = tannus_html__$Element_Element_$Impl_$.get_style(this.el);
		this1.set("display","none");
	}
	,__class__: bp_ui_Notification
});
var bp_ui_NotificationDrawer = function(p) {
	foundation_Pane.call(this);
	this.player = p;
	this.player.once("add-widgets",$bind(this,this.style));
};
$hxClasses["bp.ui.NotificationDrawer"] = bp_ui_NotificationDrawer;
bp_ui_NotificationDrawer.__name__ = ["bp","ui","NotificationDrawer"];
bp_ui_NotificationDrawer.__super__ = foundation_Pane;
bp_ui_NotificationDrawer.prototype = $extend(foundation_Pane.prototype,{
	addNotification: function(n) {
		this.append(n);
		n.init(this);
	}
	,style: function() {
		this.appendTo(js.JQuery(this.player.stage.canvas.canvas).parent());
		tannus_html__$Element_Element_$Impl_$.get_style(this.el).writeObject({ 'position' : "absolute", 'bottom' : "25px", 'right' : "50px", 'z-index' : "1000", 'max-width' : "500px"});
	}
	,get_canvas: function() {
		return js.JQuery(this.player.stage.canvas.canvas);
	}
	,__class__: bp_ui_NotificationDrawer
	,__properties__: $extend(foundation_Pane.prototype.__properties__,{get_canvas:"get_canvas"})
});
var bp_ui_PageBar = function(p) {
	this.appMenu = null;
	bp_core_Ent.call(this);
	this.page = p;
	this.tb = new gryffin_display_TextBox();
	this.tb.set_fontFamily("Ubuntu");
	this.tb.set_fontSize(14);
	this.backButton = new bp_ui_BackButton(this);
	this.addChild(this.backButton);
	this.backgroundColor = new tannus_graphics__$Color_TColor(136,136,136,null);
};
$hxClasses["bp.ui.PageBar"] = bp_ui_PageBar;
bp_ui_PageBar.__name__ = ["bp","ui","PageBar"];
bp_ui_PageBar.__super__ = bp_core_Ent;
bp_ui_PageBar.prototype = $extend(bp_core_Ent.prototype,{
	init: function(stage) {
		var _g = this;
		bp_core_Ent.prototype.init.call(this,stage);
		this.appMenu = stage.get("bp.ui.AppMenu").selected[0];
		this.tb.onTextChanged.on(function() {
			var rr;
			var _x = _g.backButton.rect.x + _g.backButton.get_w();
			var _width = _g.get_w() - _g.backButton.get_w();
			var _height = _g.get_h();
			rr = new tannus_geom_CRectangle(_x,_g.rect.y,_width,_height);
			_g.tb.autoScale(rr.width,rr.height);
		});
	}
	,update: function(stage) {
		bp_core_Ent.prototype.update.call(this,stage);
	}
	,render: function(stage,c) {
		c.ctx.save();
		c.ctx.beginPath();
		c.set_fillStyle(this.backgroundColor.toString());
		c.drawRect(this.rect);
		c.ctx.closePath();
		c.ctx.fill();
		c.ctx.restore();
		var remrect;
		var _x = this.backButton.rect.x + this.backButton.get_w();
		var _width = this.get_w() - this.backButton.get_w();
		var _height = this.get_h();
		remrect = new tannus_geom_CRectangle(_x,this.rect.y,_width,_height);
		var mid = new tannus_geom_TPoint(remrect.x + remrect.width / 2,remrect.y + remrect.height / 2,0);
		var tx = mid.get_x() - this.tb.get_width() / 2;
		var ty = mid.get_y() - this.tb.get_height() / 2;
		c.drawComponent(this.tb,0,0,this.tb.get_width(),this.tb.get_height(),tx,ty,this.tb.get_width(),this.tb.get_height());
		bp_core_Ent.prototype.render.call(this,stage,c);
	}
	,gradient: function(c) {
		var g = c.createLinearGradient(this.rect.x,this.rect.y,this.rect.x,this.rect.y + this.get_h());
		g.addColorStop(0.32,this.backgroundColor.toString());
		var light = this.backgroundColor.lighten(0.3);
		g.addColorStop(1.0,light.toString());
		return g;
	}
	,back: function() {
		this.page.close();
	}
	,calculateGeometry: function(r) {
		this.set_w(r.width);
		this.set_h(30);
		this.set_x(this.rect.y = 0);
		var rr;
		var _x = this.backButton.rect.x + this.backButton.get_w();
		var _width = this.get_w() - this.backButton.get_w();
		var _height = this.get_h();
		rr = new tannus_geom_CRectangle(_x,this.rect.y,_width,_height);
		this.tb.autoScale(rr.width,rr.height);
	}
	,get_title: function() {
		return this.tb.get_text();
	}
	,set_title: function(v) {
		return this.tb.set_text(v);
	}
	,__class__: bp_ui_PageBar
	,__properties__: $extend(bp_core_Ent.prototype.__properties__,{set_title:"set_title",get_title:"get_title"})
});
var bp_ui_PlaybackButton = function() {
	this.iconImg = null;
	bp_ui_ControlButton.call(this);
	this.icons = [bp_display_Icons.playIcon(64,64,"black"),bp_display_Icons.pauseIcon(64,64,"black")];
	this.icon = this.icons[0];
};
$hxClasses["bp.ui.PlaybackButton"] = bp_ui_PlaybackButton;
bp_ui_PlaybackButton.__name__ = ["bp","ui","PlaybackButton"];
bp_ui_PlaybackButton.__super__ = bp_ui_ControlButton;
bp_ui_PlaybackButton.prototype = $extend(bp_ui_ControlButton.prototype,{
	update: function(stage) {
		bp_ui_ControlButton.prototype.update.call(this,stage);
		this.icon = this.icons[this.controls.player.pane.video.vid.paused?0:1];
	}
	,click: function(event) {
		this.controls.player.togglePlayback();
	}
	,__class__: bp_ui_PlaybackButton
});
var bp_ui_PlaybackRateBox = function(p) {
	bp_ui_PromptBox.call(this);
	this.player = p;
};
$hxClasses["bp.ui.PlaybackRateBox"] = bp_ui_PlaybackRateBox;
bp_ui_PlaybackRateBox.__name__ = ["bp","ui","PlaybackRateBox"];
bp_ui_PlaybackRateBox.__super__ = bp_ui_PromptBox;
bp_ui_PlaybackRateBox.prototype = $extend(bp_ui_PromptBox.prototype,{
	line: function(s) {
		var mode = 0;
		if(StringTools.startsWith(s,"+")) {
			mode = 1;
			s = s.substring(1);
		} else if(StringTools.startsWith(s,"-")) {
			mode = 2;
			s = s.substring(1);
		}
		if(!(s.length == 0)) {
			var vid = this.player.pane.video;
			var num = parseFloat(s);
			if(isFinite(num) && !isNaN(num)) num /= 100; else return;
			switch(mode) {
			case 0:
				vid.set_playbackRate(num);
				break;
			case 1:
				var _g = vid;
				_g.set_playbackRate(_g.vid.playbackRate + num);
				break;
			case 2:
				var _g1 = vid;
				_g1.set_playbackRate(_g1.vid.playbackRate - num);
				break;
			default:
				null;
			}
		}
	}
	,open: function() {
		var _g = this;
		bp_ui_PromptBox.prototype.open.call(this);
		gryffin_Tools.defer(function() {
			_g.set_value("");
		});
	}
	,__class__: bp_ui_PlaybackRateBox
});
var bp_ui_PlaybackRateButton = function(p) {
	bp_core_Ent.call(this);
	this.widget = p;
	this.on("click",$bind(this,this.click));
};
$hxClasses["bp.ui.PlaybackRateButton"] = bp_ui_PlaybackRateButton;
bp_ui_PlaybackRateButton.__name__ = ["bp","ui","PlaybackRateButton"];
bp_ui_PlaybackRateButton.__super__ = bp_core_Ent;
bp_ui_PlaybackRateButton.prototype = $extend(bp_core_Ent.prototype,{
	update: function(stage) {
		bp_core_Ent.prototype.update.call(this,stage);
		this.set_w(this.set_h(this.widget.get_h()));
	}
	,click: function(event) {
		console.log(event);
	}
	,get_player: function() {
		return this.widget.button.controls.player;
	}
	,get_video: function() {
		return this.widget.button.controls.player.pane.video;
	}
	,get_settings: function() {
		return this.widget.button.controls.player.data.settings;
	}
	,__class__: bp_ui_PlaybackRateButton
	,__properties__: $extend(bp_core_Ent.prototype.__properties__,{get_settings:"get_settings",get_video:"get_video",get_player:"get_player"})
});
var bp_ui_PlaybackRateWidget = function(btn) {
	bp_core_Ent.call(this);
	this.button = btn;
	this.buttons = [];
	this.range = new tannus_ds_FloatRange(0.5,5.0);
	this.addButton(new bp_ui_pbr_DownButton(this));
	this.addButton(new bp_ui_pbr_UpButton(this));
};
$hxClasses["bp.ui.PlaybackRateWidget"] = bp_ui_PlaybackRateWidget;
bp_ui_PlaybackRateWidget.__name__ = ["bp","ui","PlaybackRateWidget"];
bp_ui_PlaybackRateWidget.__super__ = bp_core_Ent;
bp_ui_PlaybackRateWidget.prototype = $extend(bp_core_Ent.prototype,{
	update: function(stage) {
		this.set_w(0);
		this.set_h(35);
		this.set_y(this.button.controls.rect.y - this.get_h() - 15);
		var p = this.get_pos().clone();
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.set_pos(p);
			var nx = p.get_x() + this.get_h();
			p.set_x(nx);
			var _g2 = this;
			_g2.set_w(_g2.get_w() + this.get_h());
		}
		this.set_centerX(this.button.get_centerX());
		bp_core_Ent.prototype.update.call(this,stage);
	}
	,render: function(stage,c) {
		if(!this.button.controls.player.show_ui) return;
		c.ctx.save();
		c.ctx.beginPath();
		c.set_fillStyle("#888");
		c.drawRect(this.rect);
		c.ctx.closePath();
		c.ctx.fill();
		c.ctx.restore();
		bp_core_Ent.prototype.render.call(this,stage,c);
	}
	,addButton: function(b) {
		this.addChild(b);
		this.buttons.push(b);
	}
	,get_controls: function() {
		return this.button.controls;
	}
	,__class__: bp_ui_PlaybackRateWidget
	,__properties__: $extend(bp_core_Ent.prototype.__properties__,{get_controls:"get_controls"})
});
var bp_ui_PlaylistButton = function() {
	bp_ui_ControlButton.call(this);
	this.set_iconName("list");
	this.side = true;
};
$hxClasses["bp.ui.PlaylistButton"] = bp_ui_PlaylistButton;
bp_ui_PlaylistButton.__name__ = ["bp","ui","PlaylistButton"];
bp_ui_PlaylistButton.__super__ = bp_ui_ControlButton;
bp_ui_PlaylistButton.prototype = $extend(bp_ui_ControlButton.prototype,{
	update: function(stage) {
		bp_ui_ControlButton.prototype.update.call(this,stage);
	}
	,click: function(event) {
		this.controls.player.showPlaylist();
	}
	,__class__: bp_ui_PlaylistButton
});
var bp_ui_PlaylistPage = function(p) {
	gryffin_ui_Page.call(this);
	this.player = p;
	this.header = new bp_ui_PageBar(this);
	this.header.priority = 1000;
	this.header.tb.set_text("Current Playlist");
	this.addChild(this.header);
	this.list = new bp_ui_TrackList(this.player);
	this.addChild(this.list);
	this.scroll_jump = 12;
};
$hxClasses["bp.ui.PlaylistPage"] = bp_ui_PlaylistPage;
bp_ui_PlaylistPage.__name__ = ["bp","ui","PlaylistPage"];
bp_ui_PlaylistPage.__super__ = gryffin_ui_Page;
bp_ui_PlaylistPage.prototype = $extend(gryffin_ui_Page.prototype,{
	open: function() {
		gryffin_ui_Page.prototype.open.call(this);
		this.listen();
		var np = null;
		var _g = 0;
		var _g1 = this.list.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if((js_Boot.__cast(item.parent , bp_ui_TrackList)).player.get_currentTrack() == item.track) {
				np = item;
				break;
			}
		}
	}
	,close: function() {
		gryffin_ui_Page.prototype.close.call(this);
		if(this.prev_page != null) this.prev_page.open();
		this["delete"]();
	}
	,update: function(stage) {
		this.list.target = new tannus_geom_TPoint(20,20,0);
		var _g = this.list.target;
		var ny = _g.get_y() + this.header.get_h();
		_g.set_y(ny);
		var _g1 = this.list.target;
		var ny1 = _g1.get_y() - this.scrollY;
		_g1.set_y(ny1);
		gryffin_ui_Page.prototype.update.call(this,stage);
	}
	,listen: function() {
		var _g = this;
		this.stage.on("keydown",function(e) {
			if(e.key == 70 && _g.isOpen()) _g.close();
		});
	}
	,get_contentRect: function() {
		return new tannus_geom_CRectangle(0,0,this.stage.canvas.canvas.width,this.list.contentRect.height);
	}
	,__class__: bp_ui_PlaylistPage
});
var bp_ui_PrevButton = function() {
	bp_ui_ControlButton.call(this);
	this.tip.direction = 2;
	this.set_iconName("previous");
	this.side = false;
};
$hxClasses["bp.ui.PrevButton"] = bp_ui_PrevButton;
bp_ui_PrevButton.__name__ = ["bp","ui","PrevButton"];
bp_ui_PrevButton.__super__ = bp_ui_ControlButton;
bp_ui_PrevButton.prototype = $extend(bp_ui_ControlButton.prototype,{
	update: function(stage) {
		bp_ui_ControlButton.prototype.update.call(this,stage);
	}
	,click: function(event) {
		var _g = this;
		this.controls.player.prevTrack(function() {
			console.log("skipped to " + _g.controls.player.pane.video.currentTrack.get_title());
		});
	}
	,__class__: bp_ui_PrevButton
});
var bp_ui_PreviewPane = function(p,t) {
	bp_core_Ent.call(this);
	this.player = p;
	this.track = t;
	this.pane = new bp_display_VideoPane(this.player);
	this.direction = [2,1];
	this.margin = new gryffin_ui_Padding();
	this.margin.set_all(10);
	this.selected = false;
	this.canManipulate = new tannus_io_VoidSignal();
	this.canPlay = new tannus_io_VoidSignal();
};
$hxClasses["bp.ui.PreviewPane"] = bp_ui_PreviewPane;
bp_ui_PreviewPane.__name__ = ["bp","ui","PreviewPane"];
bp_ui_PreviewPane.__super__ = bp_core_Ent;
bp_ui_PreviewPane.prototype = $extend(bp_core_Ent.prototype,{
	init: function(stage) {
		this.addChild(this.pane);
		this.pane.video.loadTrack(this.track,($_=this.canManipulate,$bind($_,$_.fire)),($_=this.canPlay,$bind($_,$_.fire)));
		this.canManipulate.once($bind(this,this.pullSettings));
	}
	,update: function(stage) {
		bp_core_Ent.prototype.update.call(this,stage);
		var sr = this.player.pane.rect.percentScaled(25);
		this.set_w(sr.width);
		this.set_h(sr.height);
		var a;
		if(this.player.show_ui) a = this.player.controls; else a = this.player.pane;
		{
			var _g = this.direction;
			switch(_g.length) {
			case 2:
				switch(_g[0]) {
				case 2:
					switch(_g[1]) {
					case 1:
						this.set_x(this.player.pane.rect.x + this.player.pane.get_w() - this.get_w() - this.margin.right);
						this.set_y(a.rect.y + a.get_h() - this.get_h() - this.margin.bottom);
						break;
					default:
						null;
					}
					break;
				default:
					null;
				}
				break;
			default:
				null;
			}
		}
	}
	,render: function(s,c) {
		bp_core_Ent.prototype.render.call(this,s,c);
		if(this.selected) {
			c.ctx.save();
			c.ctx.beginPath();
			c.set_strokeStyle("#99FF66");
			c.set_lineWidth(3);
			c.drawRect(this.rect);
			c.ctx.closePath();
			c.ctx.stroke();
		}
	}
	,pullSettings: function() {
		this.player.pane.video.set_volume(this.player.pane.video.vid.volume);
		this.player.pane.video.set_playbackRate(this.player.pane.video.vid.playbackRate);
	}
	,'delete': function() {
		bp_core_Ent.prototype["delete"].call(this);
		this.player.pane.video.pause();
		this.player.pane.video.destroy();
	}
	,get_vpane: function() {
		return this.player.pane;
	}
	,get_video: function() {
		return this.player.pane.video;
	}
	,get_ctrl: function() {
		return this.player.controls;
	}
	,__class__: bp_ui_PreviewPane
	,__properties__: $extend(bp_core_Ent.prototype.__properties__,{get_ctrl:"get_ctrl",get_video:"get_video",get_vpane:"get_vpane"})
});
var bp_ui_Seekbar = function() {
	this.showMarks = false;
	this.reported = false;
	this.thumb = null;
	bp_core_Ent.call(this);
	this.controls = null;
	this.hovered = false;
	this.hoverLocation = null;
	this.currBox = new gryffin_display_TextBox();
	this.totalBox = new gryffin_display_TextBox();
	this.currBox.set_fontSize(this.totalBox.set_fontSize(10));
	this.thumbBox = new bp_ui_ThumbPreviewBox(this);
	this.markViews = [];
	this.on("click",$bind(this,this.click));
};
$hxClasses["bp.ui.Seekbar"] = bp_ui_Seekbar;
bp_ui_Seekbar.__name__ = ["bp","ui","Seekbar"];
bp_ui_Seekbar.__super__ = bp_core_Ent;
bp_ui_Seekbar.prototype = $extend(bp_core_Ent.prototype,{
	init: function(stage) {
		this.parent.addSibling(this.thumbBox);
		if(this.controls == null) this.controls = this.parentUntil(function(e) {
			return js_Boot.__instanceof(e,bp_ui_Controls);
		});
		this.controls.player.ontrackchange.listen($bind(this,this.mediaChange),false);
	}
	,update: function(stage) {
		bp_core_Ent.prototype.update.call(this,stage);
		if(this.controls == null) this.controls = this.parentUntil(function(e) {
			return js_Boot.__instanceof(e,bp_ui_Controls);
		});
		this.totalBox.set_text((function($this) {
			var $r;
			var this1 = tannus_media_CDur.fromSecondsI(Math.floor($this.controls.player.pane.video.vid.duration));
			$r = this1.toString();
			return $r;
		}(this)));
		this.currBox.set_text((function($this) {
			var $r;
			var this2 = tannus_media_CDur.fromSecondsI(Math.floor($this.controls.player.pane.video.vid.currentTime));
			$r = this2.toString();
			return $r;
		}(this)));
		this.set_h(12);
		this.set_w(this.controls.get_w() - (this.totalBox.get_width() + this.currBox.get_width() + 30));
		this.rect.y = this.controls.rect.y + 5;
		this.set_x(this.controls.rect.x + (this.controls.get_w() - this.get_w()) / 2);
		var mp = stage.getMousePosition();
		this.hovered = false;
		this.hoverLocation = null;
		if(mp != null && this.containsPoint(mp)) {
			this.hovered = true;
			this.hoverLocation = mp;
			if(this.lmp != null && mp != null) {
				if(this.lmp.equals(mp)) {
					var sinceLastChange = new Date().getTime() - this.lmpc;
					if(sinceLastChange >= 550 && !this.reported) {
						this.intent(mp);
						this.reported = true;
					}
				} else {
					this.lmpc = new Date().getTime();
					this.reported = false;
					this.thumb = null;
				}
			}
		} else this.thumb = null;
		this.lmp = mp;
	}
	,intent: function(p) {
		var _g = this;
		if(this.controls.player.pane.video.currentTrack == null) return;
		var p1 = tannus_math__$Percent_Percent_$Impl_$.percent(Math.abs(this.rect.x - p.get_x()),this.get_w());
		var dur;
		var n = tannus_media_CDur.fromSecondsI(Math.floor(this.controls.player.pane.video.vid.duration)).get_totalSeconds() * (p1 / 100);
		dur = tannus_media_CDur.fromSecondsI(Math.floor(n));
		this.controls.player.getThumbnailAt(dur,function(canvas) {
			var r = _g.get_h() / _g.get_w();
			var nw = 0.23 * _g.get_w();
			var hp = tannus_math__$Percent_Percent_$Impl_$.percent(nw,canvas.canvas.width);
			_g.thumb = canvas.resized(nw,canvas.canvas.height * (hp / 100));
		});
	}
	,render: function(stage,c) {
		c.ctx.save();
		var dc = tannus_graphics__$Color_TColor.fromString("#2985DA");
		var lc = dc.lighten(12);
		if(this.hovered || this.controls.player.show_ui && this.controls.player.pane.video.currentTrack != null) {
			c.ctx.beginPath();
			var lg = c.createLinearGradient(this.rect.x,this.rect.y,this.get_w(),this.rect.y + this.get_h());
			lg.addColorStop(0.0,"#F9F9F9");
			lg.addColorStop(1.0,"#EEE");
			c.set_fillStyle(lg);
			c.roundRect(this.rect.x,this.rect.y,this.get_w(),this.get_h(),4.0);
			c.ctx.closePath();
			c.ctx.fill();
			var p = this.get_progress();
			if(p > 0) {
				c.ctx.beginPath();
				var lg1 = c.createLinearGradient(this.rect.x,this.rect.y,this.rect.x,this.rect.y + this.get_h());
				lg1.addColorStop(0.0,"#FFAD30");
				lg1.addColorStop(1.0,"#F06B0A");
				c.set_fillStyle(lg1);
				c.roundRect(this.rect.x,this.rect.y,this.get_w() * (p / 100),this.get_h(),4.0);
				c.ctx.closePath();
				c.ctx.fill();
			}
			if(this.hovered && this.hoverLocation != null) {
				var hl = this.hoverLocation;
				c.ctx.beginPath();
				c.set_fillStyle("black");
				c.rect(hl.get_x() - 2.5,this.rect.y,5,this.get_h());
				c.ctx.closePath();
				c.ctx.fill();
			}
			var mdw = (this.controls.get_w() - this.get_w()) / 2;
			var dw = (mdw - this.totalBox.get_width()) / 2;
			var tx = this.rect.x - tannus_math_TMath.max(this.currBox.get_width(),this.totalBox.get_width()) - dw;
			var cb = this.currBox;
			var tb = this.totalBox;
			c.drawComponent(cb,0,0,cb.get_width(),cb.get_height(),tx,this.rect.y,cb.get_width(),cb.get_height());
			c.drawComponent(tb,0,0,tb.get_width(),tb.get_height(),this.rect.x + this.get_w() + dw,this.rect.y,tb.get_width(),tb.get_height());
		}
		c.ctx.restore();
	}
	,click: function(event) {
		this.controls.player.pane.video.set_currentTime(tannus_media_CDur.fromSecondsI(Math.floor(this.controls.player.pane.video.vid.duration)).get_totalSeconds() * ((function($this) {
			var $r;
			var this1 = $this.get_progress();
			$r = this1;
			return $r;
		}(this)) / 100));
		this.controls.player.saveState();
	}
	,mediaChange: function(delta) {
		if(this.showMarks) {
			var t = delta[0];
			var _g = 0;
			var _g1 = this.markViews;
			while(_g < _g1.length) {
				var m = _g1[_g];
				++_g;
				m["delete"]();
			}
			this.markViews = [];
			var $it0 = (function($this) {
				var $r;
				var _this = t.meta.get_marks();
				$r = HxOverrides.iter(_this);
				return $r;
			}(this));
			while( $it0.hasNext() ) {
				var mark = $it0.next();
				this.markView(mark);
			}
		}
	}
	,markView: function(mark) {
		var view = new bp_ui_BookmarkView(this,mark);
		this.parent.addSibling(view);
		this.markViews.push(view);
	}
	,pointForTime: function(t) {
		var p = tannus_math__$Percent_Percent_$Impl_$.percent(3600 * t.hours + 60 * t.minutes + t.seconds,tannus_media_CDur.fromSecondsI(Math.floor(this.controls.player.pane.video.vid.duration)).get_totalSeconds());
		var x = this.rect.x + this.get_w() * (p / 100);
		return new tannus_geom_TPoint(x,this.rect.y,0);
	}
	,get_player: function() {
		return this.controls.player;
	}
	,get_video: function() {
		return this.controls.player.pane.video;
	}
	,get_currentTime: function() {
		return tannus_media_CDur.fromSecondsI(Math.floor(this.controls.player.pane.video.vid.currentTime));
	}
	,get_progress: function() {
		if(this.hovered) return tannus_math__$Percent_Percent_$Impl_$.percent(this.hoverLocation.get_x() - this.rect.x,this.get_w()); else return this.controls.player.pane.video.get_progress();
	}
	,__class__: bp_ui_Seekbar
	,__properties__: $extend(bp_core_Ent.prototype.__properties__,{get_progress:"get_progress",get_currentTime:"get_currentTime",get_video:"get_video",get_player:"get_player"})
});
var bp_ui_SeekbarHandle = function(seekbar) {
	bp_core_Ent.call(this);
	this.bar = seekbar;
	this.hovered = false;
	this.dragging = false;
	this.drag_pos = new tannus_geom_TPoint(0,0,0);
};
$hxClasses["bp.ui.SeekbarHandle"] = bp_ui_SeekbarHandle;
bp_ui_SeekbarHandle.__name__ = ["bp","ui","SeekbarHandle"];
bp_ui_SeekbarHandle.__super__ = bp_core_Ent;
bp_ui_SeekbarHandle.prototype = $extend(bp_core_Ent.prototype,{
	update: function(stage) {
		bp_core_Ent.prototype.update.call(this,stage);
		this.set_x(this.bar.rect.x + this.bar.get_w() * ((function($this) {
			var $r;
			var this1 = $this.bar.get_progress();
			$r = this1;
			return $r;
		}(this)) / 100));
		this.set_y(this.bar.get_centerY());
		var mp = stage.getMousePosition();
		this.hovered = mp != null && this.containsPoint(mp);
		if(mp != null && this.dragging) {
			this.set_x(mp.get_x());
			this.drag_pos = this.get_pos().clone();
		}
		if(this.hovered) stage.set_cursor("pointer");
	}
	,render: function(s,c) {
		bp_core_Ent.prototype.render.call(this,s,c);
		if(this.bar.controls.player.show_ui) {
			c.ctx.save();
			c.ctx.beginPath();
			c.set_fillStyle("#F06B0A");
			c.arc(this.rect.x,this.rect.y,(this.bar.get_h() + 0.2 * this.bar.get_h()) / 2,0,2 * Math.PI,false);
			c.ctx.closePath();
			c.ctx.fill();
			c.ctx.restore();
		}
	}
	,containsPoint: function(p) {
		return this.get_pos().distanceFrom(p) < (this.bar.get_h() + 0.2 * this.bar.get_h()) / 2;
	}
	,listen: function() {
		var _g = this;
		this.on("mousedown",function(e) {
			_g.dragging = true;
		});
		this.on("mouseup",function(e1) {
			_g.dragging = false;
			_g.bar.controls.player.pane.video.set_currentTime(tannus_media_CDur.fromSecondsI(Math.floor(_g.bar.controls.player.pane.video.vid.duration)).get_totalSeconds() * ((function($this) {
				var $r;
				var this1 = tannus_math__$Percent_Percent_$Impl_$.percent(_g.drag_pos.get_x() - _g.bar.rect.x,_g.bar.get_w());
				$r = this1;
				return $r;
			}(this)) / 100));
		});
	}
	,get_size: function() {
		return (this.bar.get_h() + 0.2 * this.bar.get_h()) / 2;
	}
	,__class__: bp_ui_SeekbarHandle
	,__properties__: $extend(bp_core_Ent.prototype.__properties__,{get_size:"get_size"})
});
var bp_ui_SelectRect = function() {
	this.vpane = null;
	bp_core_Ent.call(this);
	this.mode = 0;
	this.rectSelected = new tannus_io_Signal();
	this.cancelled = new tannus_io_VoidSignal();
	this.selection = null;
	this.partialSelection = new tannus_ds_CPair(null,null);
};
$hxClasses["bp.ui.SelectRect"] = bp_ui_SelectRect;
bp_ui_SelectRect.__name__ = ["bp","ui","SelectRect"];
bp_ui_SelectRect.__super__ = bp_core_Ent;
bp_ui_SelectRect.prototype = $extend(bp_core_Ent.prototype,{
	init: function(s) {
		var _g = this;
		bp_core_Ent.prototype.init.call(this,s);
		s.on("keydown",$bind(this,this.handle_key));
		this.awaitStart(function(e) {
			s.set_cursor("crosshair");
			_g.partialSelection.left = e.position;
			_g.awaitEnd(function(e1) {
				s.set_cursor("default");
				_g.partialSelection.right = e1.position;
				_g.finalize();
			});
		});
	}
	,awaitStart: function(cb) {
		this.vpane = this.stage.get("..VideoPane").selected[0];
		this.vpane.once("mousedown",cb);
	}
	,awaitEnd: function(cb) {
		this.vpane.once("mouseup",cb);
	}
	,finalize: function() {
		this.selection = this.rectFromPartialSelection();
		this.partialSelection = new tannus_ds_CPair(null,null);
		this.rectSelected.broadcast(this.selection);
	}
	,update: function(s) {
		bp_core_Ent.prototype.update.call(this,s);
		if(this.partialSelection.left != null) this.partialSelection.right = s.getMousePosition();
	}
	,render: function(s,c) {
		var sel = this.rectFromPartialSelection();
		if(sel != null) {
			var corners = sel.get_corners();
			var hiliteColor = new tannus_graphics__$Color_TColor(255,173,48,null);
			c.ctx.save();
			c.ctx.beginPath();
			c.set_globalAlpha(0.75);
			c.set_fillStyle(hiliteColor.toString());
			c.ctx.rect(sel.x,sel.y,sel.width,sel.height);
			c.ctx.closePath();
			c.ctx.fill();
			c.ctx.beginPath();
			c.set_globalAlpha(1.0);
			c.set_strokeStyle(hiliteColor.toString());
			c.set_lineWidth(1);
			c.ctx.rect(sel.x,sel.y,sel.width,sel.height);
			c.ctx.closePath();
			c.ctx.stroke();
			c.ctx.restore();
		}
	}
	,rectFromPartialSelection: function() {
		var s = this.partialSelection;
		if(s.left != null && s.right != null) {
			var l = s.left;
			var r = s.right;
			var minPoint;
			var x = tannus_math_TMath.min(l.get_x(),r.get_x());
			var y = tannus_math_TMath.min(l.get_y(),r.get_y());
			minPoint = new tannus_geom_TPoint(x,y,0);
			var maxPoint;
			var x1 = tannus_math_TMath.max(l.get_x(),r.get_x());
			var y1 = tannus_math_TMath.max(l.get_x(),r.get_x());
			maxPoint = new tannus_geom_TPoint(x1,y1,0);
			var width = maxPoint.get_x() - minPoint.get_x();
			var height = maxPoint.get_y() - minPoint.get_y();
			var areaPoint = new tannus_geom_TPoint(width,height,0);
			var diffPoint = maxPoint.minusPoint(minPoint);
			console.log("" + areaPoint.toString() + " " + (areaPoint.equals(diffPoint)?"==":"!=") + " " + diffPoint.toString());
			var _x = minPoint.get_x();
			var _y = minPoint.get_y();
			return new tannus_geom_CRectangle(_x,_y,width,height);
		} else return null;
	}
	,handle_key: function(event) {
		var _g = event.key;
		switch(_g) {
		case 27:
			event.stopPropogation();
			event.cancel();
			this.cancel();
			break;
		default:
			null;
		}
	}
	,'delete': function() {
		this.stage.off("keydown",$bind(this,this.handle_key));
		bp_core_Ent.prototype["delete"].call(this);
	}
	,cancel: function(delet) {
		if(delet == null) delet = false;
		this.stage.set_cursor("default");
		this.selection = null;
		this.partialSelection = new tannus_ds_CPair(null,null);
		this.cancelled.call();
		if(delet) this["delete"]();
	}
	,__class__: bp_ui_SelectRect
});
var bp_ui_ShuffleButton = function() {
	bp_ui_ControlButton.call(this);
	this.set_iconName("shuffle-off");
};
$hxClasses["bp.ui.ShuffleButton"] = bp_ui_ShuffleButton;
bp_ui_ShuffleButton.__name__ = ["bp","ui","ShuffleButton"];
bp_ui_ShuffleButton.__super__ = bp_ui_ControlButton;
bp_ui_ShuffleButton.prototype = $extend(bp_ui_ControlButton.prototype,{
	update: function(stage) {
		bp_ui_ControlButton.prototype.update.call(this,stage);
		this.set_iconName("shuffle-" + (this.controls.player.data.settings.get_shuffle()?"on":"off"));
	}
	,click: function(event) {
		this.controls.player.set_shuffle(!this.controls.player.data.settings.get_shuffle());
	}
	,__class__: bp_ui_ShuffleButton
});
var bp_ui_SpeedButton = function() {
	bp_ui_ControlButton.call(this);
	this.set_iconName("clock");
	this.side = true;
	this.widget = new bp_ui_PlaybackRateWidget(this);
};
$hxClasses["bp.ui.SpeedButton"] = bp_ui_SpeedButton;
bp_ui_SpeedButton.__name__ = ["bp","ui","SpeedButton"];
bp_ui_SpeedButton.__super__ = bp_ui_ControlButton;
bp_ui_SpeedButton.prototype = $extend(bp_ui_ControlButton.prototype,{
	init: function(stage) {
		bp_ui_ControlButton.prototype.init.call(this,stage);
		(js_Boot.__cast(this.controls.parentUntil(function(e) {
			return e["is"]("~gryffin.ui.Page");
		}) , gryffin_ui_Page)).addChild(this.widget);
		this.widget.hide();
		this.widget.cache();
	}
	,update: function(stage) {
		bp_ui_ControlButton.prototype.update.call(this,stage);
		this.set_label(Math.round(this.controls.player.pane.video.vid.playbackRate * 100) + "%");
	}
	,click: function(event) {
		this.widget.toggleHidden();
		this.widget.toggleCache();
	}
	,__class__: bp_ui_SpeedButton
});
var bp_ui_StatusBox = function(p) {
	this.lastSample = 0;
	bp_core_Ent.call(this);
	this.player = p;
	this.tb = new gryffin_display_TextBox();
	this.tb.set_fontFamily("Ubuntu");
	this.tb.set_fontSize(11);
	this.queue = new tannus_ds_Stack();
	this.awaitingMessage = false;
};
$hxClasses["bp.ui.StatusBox"] = bp_ui_StatusBox;
bp_ui_StatusBox.__name__ = ["bp","ui","StatusBox"];
bp_ui_StatusBox.__super__ = bp_core_Ent;
bp_ui_StatusBox.prototype = $extend(bp_core_Ent.prototype,{
	addMessage: function(m) {
		this.set_current(m);
	}
	,message: function(category,text,dur) {
		var msg = new bp_ui_StatusMessage(this,text);
		msg.category = category;
		if(dur != null) msg.duration = dur;
		this.addMessage(msg);
		return msg;
	}
	,error: function(category,text,dur) {
		var m = new bp_ui_StatusMessage(this,text);
		m.category = category;
		if(dur != null) m.duration = dur;
		this.addMessage(m);
		return m;
	}
	,update: function(stage) {
		bp_core_Ent.prototype.update.call(this,stage);
		this.rect.x = 10;
		this.rect.y = this.player.pane.rect.y + 8;
		this.set_w(this.tb.get_width());
		this.set_h(this.tb.get_height());
		if(this.current != null) {
			if(this.current.start != null && new Date().getTime() - this.current.start >= this.current.duration) this.set_current(null); else if(this.current.start == null) this.showMessage(this.current);
		} else {
			this.awaitingMessage = true;
			this.tb.set_text("");
		}
	}
	,render: function(stage,c) {
		if(this.current != null) {
			if(this.current.bright == null || new Date().getTime() - this.lastSample >= 1000) {
				var ab = this.getAverageBrightness();
				this.current.bright = ab > 127.5;
			}
			this.tb.set_color(this.current.getColor());
			c.drawComponent(this.tb,0,0,this.tb.get_width(),this.tb.get_height(),this.rect.x,this.rect.y,this.tb.get_width(),this.tb.get_height());
		}
	}
	,calculateGeometry: function(r) {
		this.rect.x = 10;
		this.rect.y = this.player.pane.rect.y + 8;
		bp_core_Ent.prototype.calculateGeometry.call(this,r);
	}
	,nextMessage: function() {
		this.queue.pop();
		var m = this.queue.peek();
		if(m != null) this.showMessage(m);
	}
	,showMessage: function(m) {
		console.log("Showing: " + m.text);
		m.start = new Date().getTime();
		this.tb.set_text(m.text);
		this.rect.x = 10;
		this.rect.y = this.player.pane.rect.y + 8;
		this.set_w(this.tb.get_width());
		this.set_h(this.tb.get_height());
	}
	,getAverageBackgroundColor: function() {
		if(this.get_w() > 0 && this.get_h() > 0 && this.player.canGetPixels()) {
			var colors = [];
			var pixels = this.stage.canvas._ctx.get().pixels(this.rect.x,this.rect.y,this.get_w(),this.get_h());
			var $it0 = pixels.skim(50);
			while( $it0.hasNext() ) {
				var pixel = $it0.next();
				colors.push(pixel.src.getAtPos(pixel.pos.get_x(),pixel.pos.get_y()));
			}
			var avg = colors.shift();
			var _g = 0;
			while(_g < colors.length) {
				var c = colors[_g];
				++_g;
				avg = avg.mix(c,100 / (colors.length + 1));
			}
			return avg;
		} else return null;
	}
	,getAverageBrightness: function() {
		if(this.get_w() > 0 && this.get_h() > 0) {
			var values = [];
			var pixels = this.stage.canvas._ctx.get().pixels(this.rect.x,this.rect.y,this.get_w(),this.get_h());
			var $it0 = pixels.skim(100);
			while( $it0.hasNext() ) {
				var pixel = $it0.next();
				values.push(pixel.get_c().brightness());
			}
			var avg = tannus_math_TMath.average(values);
			this.lastSample = new Date().getTime();
			return Math.round(avg);
		} else return 0;
	}
	,set_current: function(v) {
		this.current = v;
		if(this.current != null) this.showMessage(this.current);
		return this.current;
	}
	,__class__: bp_ui_StatusBox
	,__properties__: $extend(bp_core_Ent.prototype.__properties__,{set_current:"set_current"})
});
var bp_ui_StatusMessage = function(b,t) {
	this.color = null;
	this.bright = null;
	this.box = b;
	this.type = bp_ui_StatusMessageType.SMTInfo;
	this.category = null;
	this.text = t;
	this.start = null;
	this.alpha = 1.0;
	this.duration = 2200;
};
$hxClasses["bp.ui.StatusMessage"] = bp_ui_StatusMessage;
bp_ui_StatusMessage.__name__ = ["bp","ui","StatusMessage"];
bp_ui_StatusMessage.prototype = {
	getColor: function() {
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			if(this.bright == null || this.bright) return new tannus_graphics__$Color_TColor(0,0,0,null); else return new tannus_graphics__$Color_TColor(255,255,255,null);
			break;
		case 1:
			return new tannus_graphics__$Color_TColor(255,0,0,null);
		}
	}
	,isSameKind: function(other) {
		return this.category == other.category;
	}
	,__class__: bp_ui_StatusMessage
};
var bp_ui_StatusMessageType = $hxClasses["bp.ui.StatusMessageType"] = { __ename__ : ["bp","ui","StatusMessageType"], __constructs__ : ["SMTInfo","SMTError"] };
bp_ui_StatusMessageType.SMTInfo = ["SMTInfo",0];
bp_ui_StatusMessageType.SMTInfo.toString = $estr;
bp_ui_StatusMessageType.SMTInfo.__enum__ = bp_ui_StatusMessageType;
bp_ui_StatusMessageType.SMTError = ["SMTError",1];
bp_ui_StatusMessageType.SMTError.toString = $estr;
bp_ui_StatusMessageType.SMTError.__enum__ = bp_ui_StatusMessageType;
var bp_ui_ThumbPreviewBox = function(seekbar) {
	bp_core_Ent.call(this);
	this.bar = seekbar;
	this.border = new gryffin_ui_Border(6,tannus_graphics__$Color_TColor.fromString("#333333"),5);
	this.tbox = new gryffin_display_TextBox();
	this.tbox.set_fontFamily("Ubuntu");
	this.tbox.set_fontSize(14);
	this.tbox.set_fontSizeUnit("px");
	this.tbox.set_color(tannus_graphics__$Color_TColor.fromString("#FFFFFF"));
};
$hxClasses["bp.ui.ThumbPreviewBox"] = bp_ui_ThumbPreviewBox;
bp_ui_ThumbPreviewBox.__name__ = ["bp","ui","ThumbPreviewBox"];
bp_ui_ThumbPreviewBox.__super__ = bp_core_Ent;
bp_ui_ThumbPreviewBox.prototype = $extend(bp_core_Ent.prototype,{
	init: function(stage) {
		null;
	}
	,update: function(stage) {
		bp_core_Ent.prototype.update.call(this,stage);
		this.updateSize(stage);
		if(this.bar.hoverLocation != null) {
			this.set_centerX(this.bar.hoverLocation.get_x());
			this.set_y(this.bar.rect.y - this.get_h() - 18);
			var progress = this.bar.get_progress();
			var ct;
			var n = tannus_media_CDur.fromSecondsI(Math.floor(this.bar.controls.player.pane.video.vid.duration)).get_totalSeconds() * (progress / 100);
			ct = tannus_media_CDur.fromSecondsI(Math.floor(n));
			this.tbox.set_text(ct.toString());
		}
	}
	,updateSize: function(stage) {
		if(this.bar.thumb != null) {
			var vp = this.bar.controls.player.pane.rect.percentScaled(20);
			var thumbRect = new tannus_geom_CRectangle(0,0,this.bar.thumb.canvas.width,this.bar.thumb.canvas.height);
			thumbRect.scale(null,vp.height);
			this.set_w(thumbRect.width);
			this.set_h(thumbRect.height + 20);
		} else {
			this.set_w(this.tbox.get_width() + 30);
			this.set_h(20);
		}
	}
	,render: function(stage,c) {
		if(!this.bar.hovered) return;
		c.ctx.save();
		if(this.bar.thumb != null) c.drawComponent(this.bar.thumb,0,0,this.bar.thumb.canvas.width,this.bar.thumb.canvas.height,this.rect.x,this.rect.y,this.get_w(),this.get_h() - 20);
		c.ctx.beginPath();
		c.set_fillStyle(this.border.color.toString());
		c.rect(this.rect.x,this.rect.y + this.get_h() - 20,this.get_w(),20);
		c.ctx.closePath();
		c.ctx.fill();
		var ttr;
		var _y = this.rect.y + this.get_h() - 20;
		var _width = this.get_w();
		ttr = new tannus_geom_CRectangle(this.rect.x,_y,_width,20);
		var ttx = ttr.x + ttr.width / 2 - this.tbox.get_width() / 2;
		var tty = ttr.y + ttr.height / 2 - this.tbox.get_height() / 2;
		c.drawComponent(this.tbox,0,0,this.tbox.get_width(),this.tbox.get_height(),ttx,tty,this.tbox.get_width(),this.tbox.get_height());
		c.ctx.beginPath();
		c.set_shadowBlur(10);
		c.set_shadowColor(this.border.color.darken(12).toString());
		c.set_strokeStyle(this.border.color.toString());
		c.set_lineWidth(this.border.width);
		if(this.border.radius == 0) c.drawRect(this.rect); else c.drawRoundRect(this.rect,this.border.radius);
		c.ctx.closePath();
		c.ctx.stroke();
		c.ctx.restore();
	}
	,get_player: function() {
		return this.bar.controls.player;
	}
	,get_thumb: function() {
		return this.bar.thumb;
	}
	,get_target: function() {
		return this.bar.hoverLocation;
	}
	,__class__: bp_ui_ThumbPreviewBox
	,__properties__: $extend(bp_core_Ent.prototype.__properties__,{get_target:"get_target",get_thumb:"get_thumb",get_player:"get_player"})
});
var bp_ui_TitleDisplay = function(p) {
	this.hovered = false;
	bp_core_Ent.call(this);
	this.player = p;
	this.padding = new gryffin_ui_Padding();
	this.padding.set_all(8);
	this.box = new gryffin_display_TextBox();
	this.box.set_fontSize(14);
	this.box.set_fontFamily("Ubuntu");
	this.box.set_bold(true);
	this.backgroundColor = new tannus_graphics__$Color_TColor(247,247,247,null);
	this.box.set_color(new tannus_graphics__$Color_TColor(30,30,30,null));
};
$hxClasses["bp.ui.TitleDisplay"] = bp_ui_TitleDisplay;
bp_ui_TitleDisplay.__name__ = ["bp","ui","TitleDisplay"];
bp_ui_TitleDisplay.__super__ = bp_core_Ent;
bp_ui_TitleDisplay.prototype = $extend(bp_core_Ent.prototype,{
	update: function(stage) {
		bp_core_Ent.prototype.update.call(this,stage);
		var ct = this.player.pane.video.currentTrack;
		if(ct == null) this.box.set_text(""); else {
			this.box.set_text(ct.prettyTitle());
			if(ct.meta.get_favorited()) {
				var _g = this.box;
				_g.set_text(_g.get_text() + "*");
			}
		}
		this.set_centerX(this.player.rect.get_centerX());
		this.rect.y = this.player.pane.rect.y - 5;
		this.set_w(this.box.get_width() + this.padding.get_horizontal());
		this.set_h(this.box.get_height() + this.padding.get_vertical());
	}
	,render: function(stage,c) {
		if(this.player.show_ui && this.box.get_text() != "") {
			c.ctx.save();
			c.set_globalAlpha(0.75);
			c.ctx.beginPath();
			c.set_fillStyle("white");
			c.drawRoundRect(this.rect,3);
			c.ctx.closePath();
			c.ctx.fill();
			c.drawComponent(this.box,0,0,this.box.get_width(),this.box.get_height(),this.rect.x + this.padding.left,this.rect.y + this.padding.top,this.box.get_width(),this.box.get_height());
			c.ctx.restore();
		}
	}
	,drawStar: function(c,m,points,inner,outer) {
		var rot = 4.71238898038469;
		var x = m.get_x();
		var y = m.get_y();
		var step = 3.141592653589793 / points;
		c.moveTo(m.get_x(),m.get_y() + outer);
		var _g = 0;
		while(_g < points) {
			var i = _g++;
			x = m.get_x() + Math.cos(rot) * outer;
			y = m.get_y() + Math.sin(rot) * outer;
			c.ctx.lineTo(x,y);
			rot += step;
			x = m.get_x() + Math.cos(rot) * inner;
			y = m.get_y() + Math.sin(rot) * inner;
			c.ctx.lineTo(x,y);
			rot += step;
		}
		c.lineTo(m.get_x(),m.get_y() - outer);
	}
	,__class__: bp_ui_TitleDisplay
});
var gryffin_ui_ListItem = function() {
	this.altered = false;
	gryffin_core_Entity.call(this);
	this.set_x(0);
	this.set_y(0);
	this.set_w(0);
	this.set_h(0);
};
$hxClasses["gryffin.ui.ListItem"] = gryffin_ui_ListItem;
gryffin_ui_ListItem.__name__ = ["gryffin","ui","ListItem"];
gryffin_ui_ListItem.__super__ = gryffin_core_Entity;
gryffin_ui_ListItem.prototype = $extend(gryffin_core_Entity.prototype,{
	containsPoint: function(p) {
		return this.get_rect().containsPoint(p);
	}
	,reflow: function() {
		if(this.get_list() != null) this.get_list().altered = true;
	}
	,updateListItem: function(stage) {
		null;
	}
	,update: function(stage) {
		gryffin_core_Entity.prototype.update.call(this,stage);
		if(this.altered) {
			this.get_list().altered = true;
			this.altered = false;
		}
	}
	,get_x: function() {
		return this._x;
	}
	,set_x: function(v) {
		return this._x = v;
	}
	,get_y: function() {
		return this._y;
	}
	,set_y: function(v) {
		return this._y = v;
	}
	,get_w: function() {
		return this._w;
	}
	,set_w: function(v) {
		return this._w = v;
	}
	,get_h: function() {
		return this._h;
	}
	,set_h: function(v) {
		return this._h = v;
	}
	,get_pos: function() {
		var _g = this;
		var x = new tannus_io__$Pointer_Ref(function() {
			return _g.get_x();
		},function(v) {
			return _g.set_x(v);
		});
		var y = new tannus_io__$Pointer_Ref(function() {
			return _g.get_y();
		},function(v1) {
			return _g.set_y(v1);
		});
		return new tannus_geom_LinkedPoint(x,y,null);
	}
	,get_rect: function() {
		var _x = this.get_x();
		var _y = this.get_y();
		var _width = this.get_w();
		var _height = this.get_h();
		return new tannus_geom_CRectangle(_x,_y,_width,_height);
	}
	,get_list: function() {
		return this.parentUntil(function(e) {
			return js_Boot.__instanceof(e,gryffin_ui_List);
		});
	}
	,__class__: gryffin_ui_ListItem
	,__properties__: $extend(gryffin_core_Entity.prototype.__properties__,{get_list:"get_list",get_rect:"get_rect",get_pos:"get_pos",set_h:"set_h",get_h:"get_h",set_w:"set_w",get_w:"get_w",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"})
});
var tannus_ds_Selectable = function() { };
$hxClasses["tannus.ds.Selectable"] = tannus_ds_Selectable;
tannus_ds_Selectable.__name__ = ["tannus","ds","Selectable"];
tannus_ds_Selectable.prototype = {
	__class__: tannus_ds_Selectable
};
var bp_ui_TrackItem = function(t) {
	this.menu = null;
	this.selected = false;
	this.hilited = false;
	gryffin_ui_ListItem.call(this);
	this.track = t;
	this.titleBox = new gryffin_display_TextBox();
	this.titleBox.cache = true;
	this.titleBox.set_fontSize(10);
	this.sizeBox = new gryffin_display_TextBox();
	this.sizeBox.cache = true;
	this.sizeBox.set_fontSize(10);
	this.sizeBox.set_fontFamily("Ubuntu");
	this.padding = new gryffin_ui_Padding();
	this.padding.set_vertical(12);
	this.padding.left = 12;
	this.on("click",$bind(this,this.click));
	this.on("contextmenu",$bind(this,this.contextMenu));
};
$hxClasses["bp.ui.TrackItem"] = bp_ui_TrackItem;
bp_ui_TrackItem.__name__ = ["bp","ui","TrackItem"];
bp_ui_TrackItem.__interfaces__ = [tannus_ds_Selectable];
bp_ui_TrackItem.__super__ = gryffin_ui_ListItem;
bp_ui_TrackItem.prototype = $extend(gryffin_ui_ListItem.prototype,{
	pullTrack: function() {
		this.titleBox.set_text(this.track.get_title());
		if(this.track.meta.get_favorited()) {
			var _g = this.titleBox;
			_g.set_text(_g.get_text() + "*");
		}
		this.sizeBox.set_text(this.track.prettySize());
		if((js_Boot.__cast(this.parent , bp_ui_TrackList)).player.get_video().currentTrack == this.track) this.sizeBox.set_color(this.titleBox.set_color(new tannus_graphics__$Color_TColor(244,114,21,null))); else this.sizeBox.set_color(this.titleBox.set_color(new tannus_graphics__$Color_TColor(0,0,0,null)));
	}
	,init: function(stage) {
		this.pullTrack();
	}
	,update: function(stage) {
		gryffin_ui_ListItem.prototype.update.call(this,stage);
		this.pullTrack();
	}
	,render: function(s,c) {
		c.ctx.save();
		c.ctx.beginPath();
		c.set_fillStyle(this.track.get_index() % 2 == 0?"#FFFFFF":"#E5FFF3");
		if(this.selected || this.hilited) c.set_fillStyle((function($this) {
			var $r;
			var this1 = new tannus_graphics__$Color_TColor(244,114,21,null);
			$r = this1.toString();
			return $r;
		}(this)));
		c.rect(this.get_x(),this.get_y(),this.get_w(),this.get_h());
		c.ctx.closePath();
		c.ctx.fill();
		var tb = this.titleBox;
		c.drawComponent(tb,0,0,tb.get_width(),tb.get_height(),this.get_x() + this.padding.left,this.get_y() + this.padding.top,tb.get_width(),tb.get_height());
		var sb = this.sizeBox;
		c.drawComponent(sb,0,0,sb.get_width(),sb.get_height(),this.get_x() + this.get_w() - sb.get_width() - this.padding.right - 60,this.get_y() + this.padding.top,sb.get_width(),sb.get_height());
		c.ctx.restore();
	}
	,'delete': function() {
		this.reflow();
		gryffin_ui_ListItem.prototype["delete"].call(this);
		if(this.menu != null) this.menu["delete"]();
	}
	,click: function(event) {
		var _g = this;
		if(Lambda.has(event.emods,"ctrl")) (js_Boot.__cast(this.parent , bp_ui_TrackList)).selection.toggle(this); else (js_Boot.__cast(this.parent , bp_ui_TrackList)).player["goto"](this.track,function() {
			(js_Boot.__cast(_g.parent , bp_ui_TrackList)).parent.close();
			(js_Boot.__cast(_g.parent , bp_ui_TrackList)).player.get_video().play();
		});
	}
	,contextMenu: function(event) {
		var _g = this;
		event.cancel();
		if(this.menu != null) {
			this.menu["delete"]();
			this.menu = null;
		}
		this.menu = new gryffin_ui_ContextMenu();
		this.menu.set_target(event.position);
		(js_Boot.__cast(this.parent , bp_ui_TrackList)).addSibling(this.menu);
		this.buildMenu();
		this.deleteAllOtherMenus();
		var clickOutside;
		var clickOutside1 = null;
		clickOutside1 = function(e) {
			if(_g.menu != null && !_g.menu.containsPoint(e.position)) {
				_g.menu["delete"]();
				_g.menu = null;
				_g.stage.off("click",clickOutside1);
			}
		};
		clickOutside = clickOutside1;
		this.stage.on("click",clickOutside);
	}
	,deleteAllOtherMenus: function() {
		var otherMenus = this.stage.get("~gryffin.ui.ContextMenu[id != \"" + this.menu.id + "\"]").selected;
		var _g = 0;
		while(_g < otherMenus.length) {
			var m = otherMenus[_g];
			++_g;
			m["delete"]();
		}
	}
	,buildMenu: function() {
		var _g = this;
		if(Lambda.has((js_Boot.__cast(this.parent , bp_ui_TrackList)).selection,this)) (js_Boot.__cast(this.parent , bp_ui_TrackList)).buildSelectionMenu(this.menu); else {
			this.menu.button("Remove from Playlist",function(e) {
				(js_Boot.__cast(_g.parent , bp_ui_TrackList)).player.playlist.removeTrack(_g.track);
				(js_Boot.__cast(_g.parent , bp_ui_TrackList)).removeItem(_g);
				_g.menu["delete"]();
			});
			this.menu.button("Favorite",function(e1) {
				_g.track.favorite();
				_g.menu["delete"]();
			});
			this.track.buildMenu(this.menu);
		}
	}
	,containsPoint: function(p) {
		return ((function($this) {
			var $r;
			var _x = $this.get_x();
			var _y = $this.get_y();
			var _width = $this.get_w();
			var _height = $this.get_h();
			$r = new tannus_geom_CRectangle(_x,_y,_width,_height);
			return $r;
		}(this))).containsPoint(p);
	}
	,getSelected: function() {
		return this.selected;
	}
	,setSelected: function(v) {
		return this.selected = v;
	}
	,toggle: function() {
		(js_Boot.__cast(this.parent , bp_ui_TrackList)).selection.toggle(this);
	}
	,get_nowPlaying: function() {
		return (js_Boot.__cast(this.parent , bp_ui_TrackList)).player.get_currentTrack() == this.track;
	}
	,get_w: function() {
		return (js_Boot.__cast(this.parent , bp_ui_TrackList)).contentRect.get_w();
	}
	,get_h: function() {
		return this.titleBox.get_height() + this.padding.get_vertical();
	}
	,get_tlist: function() {
		return js_Boot.__cast(this.parent , bp_ui_TrackList);
	}
	,get_page: function() {
		return (js_Boot.__cast(this.parent , bp_ui_TrackList)).parent;
	}
	,get_player: function() {
		return (js_Boot.__cast(this.parent , bp_ui_TrackList)).player;
	}
	,get_video: function() {
		return (js_Boot.__cast(this.parent , bp_ui_TrackList)).player.get_video();
	}
	,get_sel: function() {
		return (js_Boot.__cast(this.parent , bp_ui_TrackList)).selection;
	}
	,get_currentlyPlaying: function() {
		return (js_Boot.__cast(this.parent , bp_ui_TrackList)).player.get_currentTrack() == this.track;
	}
	,__class__: bp_ui_TrackItem
	,__properties__: $extend(gryffin_ui_ListItem.prototype.__properties__,{get_currentlyPlaying:"get_currentlyPlaying",get_sel:"get_sel",get_video:"get_video",get_player:"get_player",get_page:"get_page",get_tlist:"get_tlist",get_nowPlaying:"get_nowPlaying"})
});
var gryffin_ui_List = function() {
	gryffin_core_EntityContainer.call(this);
	this.items = [];
	this.cacheLayout = false;
	this.altered = false;
};
$hxClasses["gryffin.ui.List"] = gryffin_ui_List;
gryffin_ui_List.__name__ = ["gryffin","ui","List"];
gryffin_ui_List.__super__ = gryffin_core_EntityContainer;
gryffin_ui_List.prototype = $extend(gryffin_core_EntityContainer.prototype,{
	getChildren: function() {
		return this.items;
	}
	,addItem: function(item) {
		if(!Lambda.has(this.items,item)) {
			this.items.push(item);
			this.addChild(item);
			item.set_parent(this);
			this.altered = true;
			if(this.stage != null) {
				{
					this.stage.registry.set(item.id,item);
					item;
				}
				item.stage = this.stage;
				item.dispatch("activated",this.stage);
			} else this.on("activated",function(stage) {
				{
					stage.registry.set(item.id,item);
					item;
				}
				item.stage = stage;
				item.dispatch("activated",stage);
			});
		}
	}
	,updateItem: function(stage,item) {
		null;
	}
	,removeItem: function(item) {
		var res = HxOverrides.remove(this.items,item);
		this.altered = true;
		return res;
	}
	,firstPos: function() {
		return new tannus_geom_TPoint(0,0,0);
	}
	,positionItems: function(stage) {
		var ip = this.firstPos();
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(this.isValidChild(item)) {
				this.updateItem(stage,item);
				this.positionItem(ip,item);
			}
		}
	}
	,positionItem: function(p,item) {
		var ip = item.get_pos();
		ip.copyFrom(p);
		var ny = p.get_y() + item.get_h();
		p.set_y(ny);
	}
	,updateList: function(stage) {
		this.positionItems(stage);
	}
	,update: function(stage) {
		if(this.altered) {
			this.updateList(stage);
			this.altered = false;
		}
		gryffin_core_EntityContainer.prototype.update.call(this,stage);
	}
	,__class__: gryffin_ui_List
});
var bp_ui_TrackList = function(p) {
	this.page = null;
	var _g = this;
	gryffin_ui_List.call(this);
	this.player = p;
	this.target = new tannus_geom_TPoint(0,0,0);
	this.contentRect = new tannus_geom_CRectangle(0,0,0,0);
	this._tracks = function() {
		if(_g.player.playlist != null) return _g.player.playlist.tracks; else return [];
	};
	this.selection = new tannus_ds_Selection();
	this.build();
};
$hxClasses["bp.ui.TrackList"] = bp_ui_TrackList;
bp_ui_TrackList.__name__ = ["bp","ui","TrackList"];
bp_ui_TrackList.__super__ = gryffin_ui_List;
bp_ui_TrackList.prototype = $extend(gryffin_ui_List.prototype,{
	init: function(stage) {
		gryffin_ui_List.prototype.init.call(this,stage);
		this.bindKeyboard();
	}
	,build: function() {
		var _g = this;
		var _g1 = 0;
		var _g11 = this._tracks();
		while(_g1 < _g11.length) {
			var track = _g11[_g1];
			++_g1;
			var item = new bp_ui_TrackItem(track);
			this.addItem(item);
			this.selection.addItem(item);
		}
		this.player.playlist.alteration.on(function() {
			_g.altered = true;
		});
	}
	,refresh: function() {
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			this.removeItem(item);
			this.selection.removeItem(item);
		}
		this.build();
	}
	,update: function(stage) {
		this.contentRect.width = stage.canvas.canvas.width;
		var start = new Date().getTime();
		this.items.sort(function(left,right) {
			return left.track.get_index() - right.track.get_index();
		});
		if(this.page == null) this.page = this.parentUntil(function(e) {
			return js_Boot.__instanceof(e,gryffin_ui_Page);
		});
		if(this.page != null) {
			if(this.page.scrollY != this._lscroll) {
				this.altered = true;
				var delta = this.page.scrollY - this._lscroll;
				this._lscroll = this.page.scrollY;
				var menus = stage.get("..ContextMenu").selected;
				var _g = 0;
				while(_g < menus.length) {
					var m = menus[_g];
					++_g;
					var _g1 = m.tar;
					var ny = _g1.get_y() - delta;
					_g1.set_y(ny);
				}
			}
		}
		gryffin_ui_List.prototype.update.call(this,stage);
		var utime = new Date().getTime() - start;
	}
	,render: function(stage,c) {
		gryffin_ui_List.prototype.render.call(this,stage,c);
	}
	,firstPos: function() {
		return this.target.clone();
	}
	,positionItem: function(p,item) {
		item.set_y(p.get_y());
		item.set_x(p.get_x());
		var ny = p.get_y() + item.get_h();
		p.set_y(ny);
		this.contentRect.set_h(tannus_math_TMath.max(this.contentRect.height,p.get_y()));
	}
	,containsPoint: function(p) {
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(item.containsPoint(p)) return true;
		}
		return false;
	}
	,shouldChildUpdate: function(child) {
		return true;
	}
	,shouldChildRender: function(child) {
		return this.shouldChildUpdate(child);
	}
	,getTracks: function() {
		return this._tracks();
	}
	,bindKeyboard: function() {
		this.stage.on("keydown",$bind(this,this.keydown));
	}
	,'delete': function() {
		gryffin_ui_List.prototype["delete"].call(this);
		this.stage.off("keydown",$bind(this,this.keydown));
	}
	,keydown: function(event) {
		var _g = event.key;
		switch(_g) {
		case 40:
			(event.shiftKey?$bind(this,this.expandDown):$bind(this,this.moveDown))();
			break;
		case 38:
			(event.shiftKey?$bind(this,this.expandUp):$bind(this,this.moveUp))();
			break;
		case 13:
			(event.ctrlKey?$bind(this,this.selectCurrent):(function(f,cb) {
				return function() {
					f(cb);
				};
			})($bind(this,this.playCurrent),null))();
			break;
		case 46:
			(event.altKey?$bind(this,this.removeNonSelected):$bind(this,this.removeSelected))();
			break;
		case 35:
			null;
			break;
		default:
			console.log(event);
		}
	}
	,item: function(i) {
		return this.items[i];
	}
	,index: function(i) {
		return HxOverrides.indexOf(this.items,i,0);
	}
	,after: function(itm) {
		var i = HxOverrides.indexOf(this.items,itm,0);
		if(i >= this.items.length - 1) i = 0; else i++;
		return this.items[i];
	}
	,before: function(itm) {
		var i = HxOverrides.indexOf(this.items,itm,0);
		if(i == 0) i = this.items.length - 1; else i--;
		return this.items[i];
	}
	,select: function(i) {
		i.setSelected(true);
	}
	,selectAll: function() {
		var $it0 = this.selection.iterator();
		while( $it0.hasNext() ) {
			var item = $it0.next();
			item.selected = true;
		}
	}
	,deselectAll: function() {
		var $it0 = this.selection.iterator();
		while( $it0.hasNext() ) {
			var item = $it0.next();
			item.selected = false;
		}
	}
	,selectCurrent: function() {
		var hi = this.hilited();
		if(hi != null) (js_Boot.__cast(hi.parent , bp_ui_TrackList)).selection.toggle(hi);
	}
	,hilite: function(i) {
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var itm = _g1[_g];
			++_g;
			itm.hilited = false;
		}
		i.hilited = true;
	}
	,hilited: function() {
		var i = this.items.length - 1;
		while(i >= 0) {
			if(this.items[i].hilited) return this.items[i];
			i--;
		}
		return null;
	}
	,current: function() {
		var i = this.items.length - 1;
		while(i >= 0) {
			var itm = this.items[i];
			if(itm.getSelected() || itm.hilited) return itm;
			i--;
		}
		return null;
	}
	,lastActiveItem: function() {
		var i = this.items.length - 1;
		while(i >= 0) {
			var itm = this.items[i];
			if(itm.getSelected() || itm.hilited) return itm;
			i--;
		}
		return null;
	}
	,firstActiveItem: function() {
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.getSelected() || i.hilited) return i;
		}
		return null;
	}
	,removeTrack: function(i) {
		this.player.playlist.removeTrack(i.track);
		this.removeItem(i);
	}
	,removeTracks: function(list) {
		var _g = 0;
		while(_g < list.length) {
			var item = list[_g];
			++_g;
			this.player.playlist.removeTrack(item.track);
			this.removeItem(item);
		}
	}
	,removeSelected: function() {
		this.removeTracks(this.selection.selected());
	}
	,removeNonSelected: function() {
		var list = this.selection.selected();
		list = tannus_ds_ArrayTools.without(this.items,list);
		this.removeTracks(list);
	}
	,moveDown: function() {
		if(this.items.length == 0) return null;
		var c = this.lastActiveItem();
		if(c == null) this.hilite(this.items[0]); else this.hilite(this.after(c));
		var $it0 = this.selection.iterator();
		while( $it0.hasNext() ) {
			var item = $it0.next();
			item.selected = false;
		}
		return this.hilited();
	}
	,moveUp: function() {
		if(this.items.length == 0) return null;
		var c = this.firstActiveItem();
		if(c == null) this.hilite(this.items[this.items.length - 1]); else this.hilite(this.before(c));
		var $it0 = this.selection.iterator();
		while( $it0.hasNext() ) {
			var item = $it0.next();
			item.selected = false;
		}
		return this.hilited();
	}
	,expandDown: function() {
		if(this.items.length == 0) return;
		var c = this.lastActiveItem();
		if(c == null) this.items[0].setSelected(true); else this.select(this.after(c));
	}
	,expandUp: function() {
		if(this.items.length == 0) return;
		var c = this.firstActiveItem();
		if(c == null) this.select(tannus_ds_ArrayTools.last(this.items)); else this.select(this.before(c));
	}
	,play: function(i,cb) {
		var _g = this;
		this.player["goto"](i.track,function() {
			_g.page.close();
		},function() {
			_g.player.pane.video.play();
			if(cb != null) cb();
		});
	}
	,playCurrent: function(cb) {
		var c = this.hilited();
		if(c != null) this.play(c,cb);
	}
	,buildSelectionMenu: function(m) {
		m.button("Remove selected from Playlist",$bind(this,this.removeSelected));
	}
	,__class__: bp_ui_TrackList
});
var bp_ui_VolumeButton = function() {
	bp_ui_ControlButton.call(this);
	this.set_iconName("volume");
	this.side = true;
	this.widget = new bp_ui_VolumeWidget(this);
	this.on("mouseenter",$bind(this,this.mousein));
	this.on("mouseleave",$bind(this,this.mouseout));
};
$hxClasses["bp.ui.VolumeButton"] = bp_ui_VolumeButton;
bp_ui_VolumeButton.__name__ = ["bp","ui","VolumeButton"];
bp_ui_VolumeButton.__super__ = bp_ui_ControlButton;
bp_ui_VolumeButton.prototype = $extend(bp_ui_ControlButton.prototype,{
	init: function(stage) {
		var page = this.parentUntil(function(e) {
			return js_Boot.__instanceof(e,gryffin_ui_Page);
		});
		page.addChild(this.widget);
	}
	,update: function(stage) {
		var oh = this.hovered;
		bp_ui_ControlButton.prototype.update.call(this,stage);
		{
			var _g = this.hovered;
			switch(oh) {
			case false:
				switch(_g) {
				case true:
					this.dispatch("mouseenter",null);
					break;
				default:
					null;
				}
				break;
			case true:
				switch(_g) {
				case false:
					this.dispatch("mouseleave",null);
					break;
				default:
					null;
				}
				break;
			}
		}
		this.set_iconName(this.controls.player.pane.video.vid.muted?"volume-mute":"volume");
		this.set_label(this.controls.player.pane.video.vid.muted?"":Math.round(this.controls.player.pane.video.vid.volume * 100) + "%");
	}
	,click: function(event) {
		this.controls.player.pane.video.vid.muted = !this.controls.player.pane.video.vid.muted;
	}
	,mousein: function() {
		var _g = this;
		window.setTimeout(function() {
			if(_g.hovered) _g.widget.show();
		},500);
	}
	,mouseout: function() {
		var _g = this;
		window.setTimeout(function() {
			if(_g.widget.hovered) _g.widget.once("mouseleave",$bind(_g,_g.mouseout)); else _g.widget.hide();
		},300);
	}
	,__class__: bp_ui_VolumeButton
});
var bp_ui_VolumeWidget = function(vb) {
	this.hovered = false;
	bp_core_Ent.call(this);
	this.button = vb;
	this.br = new tannus_geom_CRectangle(0,0,0,0);
	this.on("click",$bind(this,this.click));
	this.hide();
};
$hxClasses["bp.ui.VolumeWidget"] = bp_ui_VolumeWidget;
bp_ui_VolumeWidget.__name__ = ["bp","ui","VolumeWidget"];
bp_ui_VolumeWidget.__super__ = bp_core_Ent;
bp_ui_VolumeWidget.prototype = $extend(bp_core_Ent.prototype,{
	update: function(stage) {
		this.br.width = 14;
		this.br.height = 75;
		this.set_w(this.br.width + 30);
		this.set_h(this.br.height + 15);
		this.set_centerX(this.button.get_centerX());
		this.set_y(this.button.controls.rect.y - this.get_h() - 8);
		this.br.set_centerX(this.get_centerX());
		this.br.y = this.rect.y + (this.get_h() - this.br.height) / 2;
		var mp = stage.getMousePosition();
		var hov = this.hovered;
		this.hovered = mp != null && this.containsPoint(mp);
		{
			var _g = this.hovered;
			switch(hov) {
			case false:
				switch(_g) {
				case true:
					this.dispatch("mouseenter",null);
					break;
				default:
					null;
				}
				break;
			case true:
				switch(_g) {
				case false:
					this.dispatch("mouseleave",null);
					break;
				default:
					null;
				}
				break;
			}
		}
	}
	,render: function(stage,c) {
		if(this.button.controls.player.show_ui) {
			var _h = this.br.height * this.button.controls.player.pane.video.vid.volume;
			c.ctx.save();
			c.ctx.beginPath();
			c.set_fillStyle("#888");
			c.drawRoundRect(this.rect,4);
			c.ctx.closePath();
			c.ctx.fill();
			c.ctx.beginPath();
			c.set_fillStyle("#666");
			c.drawRoundRect(this.br,3.5);
			c.ctx.closePath();
			c.ctx.fill();
			c.ctx.beginPath();
			c.set_fillStyle("#F17746");
			c.roundRect(this.br.x,this.br.y + this.br.height - _h,this.br.width,_h,3.5);
			c.ctx.closePath();
			c.ctx.fill();
			c.ctx.beginPath();
			c.set_lineWidth(1);
			c.set_strokeStyle("#646464");
			c.drawRoundRect(this.br,3.5);
			c.ctx.closePath();
			c.ctx.stroke();
			c.ctx.restore();
		}
	}
	,click: function(e) {
		if(this.br.containsPoint(e.position)) {
			var vp;
			var this1;
			var f;
			f = (function($this) {
				var $r;
				var this2 = tannus_math__$Percent_Percent_$Impl_$.percent($this.br.y - e.position.get_y(),$this.br.height);
				$r = this2;
				return $r;
			}(this)) * -1;
			this1 = f;
			vp = 100 - this1;
			this.button.controls.player.pane.video.set_volume(vp / 100);
		}
	}
	,get_controls: function() {
		return this.button.controls;
	}
	,get_player: function() {
		return this.button.controls.player;
	}
	,get_video: function() {
		return this.button.controls.player.pane.video;
	}
	,__class__: bp_ui_VolumeWidget
	,__properties__: $extend(bp_core_Ent.prototype.__properties__,{get_video:"get_video",get_player:"get_player",get_controls:"get_controls"})
});
var bp_ui_dia_ConfirmNotification = function() {
	bp_ui_Notification.call(this);
	this.th = new foundation_Heading(4);
	this.tp = new foundation_Paragraph();
	this.rb = new foundation_Button("");
	this.lb = new foundation_Button("");
	this.__build();
};
$hxClasses["bp.ui.dia.ConfirmNotification"] = bp_ui_dia_ConfirmNotification;
bp_ui_dia_ConfirmNotification.__name__ = ["bp","ui","dia","ConfirmNotification"];
bp_ui_dia_ConfirmNotification.__super__ = bp_ui_Notification;
bp_ui_dia_ConfirmNotification.prototype = $extend(bp_ui_Notification.prototype,{
	__build: function() {
		var _g = this;
		this.append(this.th);
		this.append(this.tp);
		this.append(this.rb);
		this.append(this.lb);
		var this1 = tannus_html__$Element_Element_$Impl_$.get_style(this.rb.el);
		this1.set("float","right");
		this.rightButton = this.defaultConfirmButton();
		this.leftButton = this.defaultConfirmButton();
		var this2 = this.leftButton.text;
		var s = this2.setter;
		this2.setter = tannus_io__$Setter_Setter_$Impl_$.attach(s,function(v) {
			return _g.lb.set_text(v);
		});
		var this3 = this.rightButton.text;
		var s1 = this3.setter;
		this3.setter = tannus_io__$Setter_Setter_$Impl_$.attach(s1,function(v1) {
			return _g.rb.set_text(v1);
		});
		this.rightButton.text.set("Dismiss");
		this.leftButton.text.set("Okay");
		this.lb.on("click",function(x) {
			_g.leftButton.click(x);
		});
		this.rb.on("click",function(x1) {
			_g.rightButton.click(x1);
		});
		this.th.set_textColor(tannus_graphics__$Color_TColor.fromString("#FFF"));
	}
	,defaultConfirmButton: function() {
		return { 'text' : (function() {
			var _v = "Okay";
			return new tannus_io__$Pointer_Ref(function() {
				return _v;
			},function(v) {
				return _v = v;
			});
		})(), 'click' : function(event) {
			null;
		}};
	}
	,get_title: function() {
		return this.th.get_text();
	}
	,set_title: function(v) {
		return this.th.set_text(v);
	}
	,get_subtitle: function() {
		return this.tp.get_text();
	}
	,set_subtitle: function(v) {
		return this.tp.set_text(v);
	}
	,__class__: bp_ui_dia_ConfirmNotification
	,__properties__: $extend(bp_ui_Notification.prototype.__properties__,{set_subtitle:"set_subtitle",get_subtitle:"get_subtitle",set_title:"set_title",get_title:"get_title"})
});
var bp_ui_dia_ChooseDirectoryNotification = function() {
	bp_ui_dia_ConfirmNotification.call(this);
	this.chosen = new tannus_io_Signal();
	this.dismissed = new tannus_io_VoidSignal();
	this.__prep();
};
$hxClasses["bp.ui.dia.ChooseDirectoryNotification"] = bp_ui_dia_ChooseDirectoryNotification;
bp_ui_dia_ChooseDirectoryNotification.__name__ = ["bp","ui","dia","ChooseDirectoryNotification"];
bp_ui_dia_ChooseDirectoryNotification.__super__ = bp_ui_dia_ConfirmNotification;
bp_ui_dia_ChooseDirectoryNotification.prototype = $extend(bp_ui_dia_ConfirmNotification.prototype,{
	__prep: function() {
		var _g = this;
		this.rightButton.text.set("Dismiss");
		this.leftButton.text.set("Choose Folder");
		this.rightButton.click = function(x) {
			_g.close();
		};
		this.leftButton.click = $bind(this,this.choose);
	}
	,choose: function() {
		var dp = tannus_chrome_FileSystem.chooseDirectory();
		dp.then((function(f) {
			return function(a1) {
				f(a1);
			};
		})(($_=this.chosen,$bind($_,$_.call))));
	}
	,close: function() {
		bp_ui_dia_ConfirmNotification.prototype.close.call(this);
		this.dismissed.call();
	}
	,reveal: function(done) {
		var anim = tannus_html__$Element_Element_$Impl_$.method(this.el,"animate");
		anim({ 'opacity' : "1.0"},{ 'duration' : 400, 'complete' : done});
	}
	,unreveal: function(done) {
		var _g = this;
		var anim = tannus_html__$Element_Element_$Impl_$.method(this.el,"animate");
		anim({ 'opacity' : "0.0"},{ 'duration' : 400, 'complete' : function() {
			_g.destroy();
			done();
		}});
	}
	,hide: function() {
		var this1 = tannus_html__$Element_Element_$Impl_$.get_style(this.el);
		this1.set("opacity","0.0");
	}
	,__class__: bp_ui_dia_ChooseDirectoryNotification
});
var gryffin_ui_MenuItem = function(options) {
	this.awaitingHoverIntent = false;
	gryffin_core_EventDispatcher.call(this);
	this.type = "normal";
	this.icon = null;
	this.checkIcon = null;
	this.rect = new tannus_geom_CRectangle(0,0,0,0);
	this.parent = null;
	this.items = [];
	this.set_showChildren(false);
	this.eventsBound = false;
	this.tooltip = null;
	this.enabled = true;
	this.checked = false;
	this.hovered = false;
	this.hoverStart = null;
	this.beenHovered = 0;
	this.box = new gryffin_display_TextBox();
	this.keyBox = new gryffin_display_TextBox();
	this.keyBox.set_fontSize(this.box.set_fontSize(11));
	this.keyBox.set_fontFamily(this.box.set_fontFamily("Ubuntu"));
	this.box.set_color(tannus_graphics__$Color_TColor.fromString("#FFF"));
	this.keyBox.set_color((function($this) {
		var $r;
		var this1 = $this.box.get_color();
		$r = this1.darken(45);
		return $r;
	}(this)));
	this.padding = new gryffin_ui_Padding();
	this.padding.set_horizontal(8);
	this.padding.set_vertical(5);
	if(options != null) {
		this.options = options;
		this.handleOptions(options);
	}
};
$hxClasses["gryffin.ui.MenuItem"] = gryffin_ui_MenuItem;
gryffin_ui_MenuItem.__name__ = ["gryffin","ui","MenuItem"];
gryffin_ui_MenuItem.__super__ = gryffin_core_EventDispatcher;
gryffin_ui_MenuItem.prototype = $extend(gryffin_core_EventDispatcher.prototype,{
	item: function(o) {
		var i = new gryffin_ui_MenuItem(o);
		this.append(i);
		return i;
	}
	,render: function(s,c) {
		if(this.parent == null && (this.hovered || this.showChildren)) {
			c.ctx.beginPath();
			c.set_fillStyle("#f17746");
			c.set_strokeStyle("#111");
			var r = 5;
			var cb = this.root.get_y() + this.root.get_h();
			var pxl = this.get_x() - this.padding.left;
			var pxr = this.get_x() + this.get_w() + this.padding.right;
			var pyt = this.get_y() - this.padding.top;
			c.ctx.moveTo(pxl,cb);
			c.ctx.lineTo(pxl,pyt + r);
			c.ctx.quadraticCurveTo(pxl,pyt,pxl + r,pyt);
			c.ctx.lineTo(pxr - r,pyt);
			c.ctx.quadraticCurveTo(pxr,pyt,pxr,pyt + r);
			c.ctx.lineTo(pxr,cb);
			c.ctx.lineTo(pxl,cb);
			c.ctx.closePath();
			c.ctx.stroke();
		}
		if(!Lambda.empty(this.items) && this.showChildren) {
			var _g = 0;
			var _g1 = this.items;
			while(_g < _g1.length) {
				var item = _g1[_g];
				++_g;
				item.render(s,c);
			}
		}
		if(this.parent != null) {
			c.set_fillStyle(this.hovered?"#f17746":this.root.backgroundColor.toString());
			c.fillRect(this.get_x(),this.get_y(),this.parent.panelWidth,this.get_h() + this.padding.get_vertical());
		}
		if(this.type == "checkbox" && this.checkIcon != null && this.checked) {
			var i = this.checkIcon;
			var size = this.get_h() + this.padding.get_vertical();
			c.drawComponent(i,0,0,i.img.naturalWidth,i.img.naturalHeight,this.get_x(),this.get_y(),size,size);
		}
		var th = this.get_h() + this.padding.get_vertical();
		var tx;
		if(this.parent != null) tx = this.get_x() + th; else tx = this.get_x();
		var ty;
		if(this.parent != null) ty = this.get_y() + this.padding.top; else ty = this.get_y();
		if(this.icon != null) {
			c.drawComponent(this.icon,0,0,this.icon.img.naturalWidth,this.icon.img.naturalHeight,this.get_x() + th,this.get_y(),th,th);
			tx += th + 8;
		}
		c.drawComponent(this.box,0,0,this.box.get_width(),this.box.get_height(),tx,ty,this.box.get_width(),this.box.get_height());
		if(this.keyBox.get_text() != "") {
			var xo;
			if(this.parent != null) xo = this.parent.panelWidth; else xo = this.get_w();
			c.drawComponent(this.keyBox,0,0,this.keyBox.get_width(),this.keyBox.get_height(),this.get_x() + xo - (this.keyBox.get_width() + 5),ty,this.keyBox.get_width(),this.keyBox.get_height());
		}
	}
	,update: function(stage) {
		var _g = this;
		if(!this.eventsBound) {
			this.listen(stage);
			this.eventsBound = true;
		}
		var _hovered = this.hovered;
		var mouse = stage.getMousePosition();
		var crect;
		var _x = this.get_x();
		var _y = this.get_y();
		var _width;
		if(this.parent != null) _width = this.parent.panelWidth; else _width = this.get_w();
		var _height = this.get_h() + this.padding.get_vertical();
		crect = new tannus_geom_CRectangle(_x,_y,_width,_height);
		this.hovered = mouse != null && crect.contains(mouse.get_x(),mouse.get_y());
		if(this.hovered) {
			if(!this.awaitingHoverIntent) window.setTimeout(function() {
				if(_g.hovered && !Lambda.empty(_g.items)) _g.open();
				_g.awaitingHoverIntent = false;
			},1000);
		}
		if(!Lambda.empty(this.items) && this.showChildren) this.positionItems(stage);
		if(!(this.parent == null)) {
			this.set_h(this.box.get_height());
			if(!(!Lambda.empty(this.items))) null;
		}
	}
	,init: function(m) {
		null;
	}
	,positionItems: function(s) {
		if(this.items.length == 0) return;
		var iy = 0;
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.update(s);
			var itemHeight = item.padding.top + item.box.get_height() + item.padding.bottom;
			var itemWidth = item.box.get_width() + item.keyBox.get_width() + 20 + itemHeight * 3 + 8;
			this.panelWidth = tannus_math_TMath.max(this.panelWidth,itemWidth);
			if(!Lambda.empty(this.items) && this.parent != null) {
				item.set_y(this.get_y() + iy);
				item.set_x(this.get_x() + this.parent.panelWidth);
				iy += itemHeight;
			} else {
				item.set_y(this.root.get_y() + this.root.get_h() + iy);
				item.set_x(this.get_x());
				iy += itemHeight;
			}
		}
		var ph = this.panelHeight;
		this.panelHeight = iy;
		var li = this.items[this.items.length - 1];
		this.panelHeight += li.get_h() + li.padding.get_vertical();
	}
	,click: function(e) {
		if(this.type == "normal") {
			var sc = this.showChildren;
			this.root.itemClicked(this);
			if(!Lambda.empty(this.items)) {
				if(this.options != null && !Object.prototype.hasOwnProperty.call(this.options.o,"click")) this.toggleOpen(); else if(this.options == null) this.toggleOpen();
			}
			this.dispatch("click",e);
		} else if(this.type == "checkbox") {
			this.root.itemClicked(this);
			this.checked = !this.checked;
			this.dispatch((!this.checked?"un":"") + "check",e);
		}
	}
	,open: function() {
		this.root.closeAll();
		this.set_showChildren(true);
		this.dispatch("open",this);
	}
	,close: function() {
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.close();
		}
		this.set_showChildren(false);
		this.dispatch("close",this);
	}
	,toggleOpen: function() {
		if(this.showChildren) this.close(); else this.open();
	}
	,containsPoint: function(p) {
		return ((function($this) {
			var $r;
			var _x = $this.get_x();
			var _y = $this.get_y();
			var _width;
			if($this.parent != null) _width = $this.parent.panelWidth; else _width = $this.get_w();
			var _height = $this.get_h();
			$r = new tannus_geom_CRectangle(_x,_y,_width,_height);
			return $r;
		}(this))).containsPoint(p);
	}
	,listen: function(s) {
		var _g = this;
		var lastEvent = null;
		s.on("click",function(e) {
			var crect;
			var _x = _g.get_x();
			var _y = _g.get_y();
			var _width;
			if(_g.parent != null) _width = _g.parent.panelWidth; else _width = _g.get_w();
			var _height = _g.get_h();
			crect = new tannus_geom_CRectangle(_x,_y,_width,_height);
			if(_g.parent != null && _g.parent.showChildren && crect.containsPoint(e.position)) _g.click(e); else if(!(_g.parent != null) && crect.containsPoint(e.position)) _g.click(e);
			lastEvent = e;
		});
	}
	,handleOptions: function(o) {
		if(Object.prototype.hasOwnProperty.call(o.o,"label")) this.set_label(Reflect.getProperty(o.o,"label"));
		if(Object.prototype.hasOwnProperty.call(o.o,"key")) this.set_key(Reflect.getProperty(o.o,"key"));
		if(Object.prototype.hasOwnProperty.call(o.o,"type")) this.type = Reflect.getProperty(o.o,"type");
		if(Object.prototype.hasOwnProperty.call(o.o,"icon")) this.icon = gryffin_display_Image.load(Reflect.getProperty(o.o,"icon"));
		if(Object.prototype.hasOwnProperty.call(o.o,"click")) {
			var oclick = Reflect.getProperty(o.o,"click");
			if(Reflect.isFunction(oclick)) this.on("click",oclick);
		}
		if(Object.prototype.hasOwnProperty.call(o.o,"open") && Reflect.isFunction(Reflect.getProperty(o.o,"open"))) this.on("open",Reflect.getProperty(o.o,"open"));
		if(Object.prototype.hasOwnProperty.call(o.o,"close") && Reflect.isFunction(Reflect.getProperty(o.o,"close"))) this.on("close",Reflect.getProperty(o.o,"close"));
	}
	,'delete': function() {
		if(this.parent != null) HxOverrides.remove(this.parent.items,this); else HxOverrides.remove(this.root.items,this);
	}
	,append: function(child) {
		if(!Lambda.has(this.items,child)) {
			this.items.push(child);
			child.set_root(this.root);
			child.parent = this;
		}
	}
	,makeWhite: function() {
		var black = new tannus_graphics__$Color_TColor(0,0,0,null);
		var c = this.checkIcon.toCanvas();
		var p = c._ctx.get().pixels(0,0,c.canvas.width,c.canvas.height);
		var _g1 = 0;
		var _g = p.data.length / 4 | 0;
		while(_g1 < _g) {
			var i = _g1++;
			var c1 = p.getAtIndex(i);
			if(c1.equals(black)) p.setAtIndex(i,c1.invert());
		}
		p.save();
		this.checkIcon = gryffin_display_Image.load(c.dataURI());
	}
	,hierarchyContainsPoint: function(p) {
		if(this.containsPoint(p)) return true; else {
			var _g = 0;
			var _g1 = this.items;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(i.hierarchyContainsPoint(p)) return true;
			}
		}
		return false;
	}
	,get_x: function() {
		return this.rect.x;
	}
	,set_x: function(v) {
		return this.rect.x = v;
	}
	,get_y: function() {
		return this.rect.y;
	}
	,set_y: function(v) {
		return this.rect.y = v;
	}
	,get_w: function() {
		return this.rect.width;
	}
	,set_w: function(v) {
		return this.rect.width = v;
	}
	,get_h: function() {
		return this.rect.height;
	}
	,set_h: function(v) {
		return this.rect.height = v;
	}
	,get_pos: function() {
		var _g = this;
		var x = new tannus_io__$Pointer_Ref(function() {
			return _g.get_x();
		},function(v) {
			return _g.set_x(v);
		});
		var y = new tannus_io__$Pointer_Ref(function() {
			return _g.get_y();
		},function(v1) {
			return _g.set_y(v1);
		});
		return new tannus_geom_LinkedPoint(x,y,null);
	}
	,get_label: function() {
		return this.box.get_text();
	}
	,set_label: function(v) {
		this.box.set_text(v);
		if(this.parent == null) {
			this.set_w(this.box.get_width() + this.keyBox.get_width());
			this.set_h(this.box.get_height());
		}
		return this.box.get_text();
	}
	,get_key: function() {
		return this.keyBox.get_text();
	}
	,set_key: function(v) {
		this.keyBox.set_text(v);
		if(this.parent == null) {
			this.set_w(this.box.get_width() + this.keyBox.get_width());
			this.set_h(this.box.get_height());
		}
		return this.keyBox.get_text();
	}
	,get_index: function() {
		return HxOverrides.indexOf(this.parent != null?this.parent.items:this.root.items,this,0);
	}
	,get_rootLevel: function() {
		return this.parent == null;
	}
	,get_subMenu: function() {
		return !Lambda.empty(this.items);
	}
	,get_child: function() {
		return this.parent != null;
	}
	,set_showChildren: function(v) {
		this.dispatch(v?"open":"close",null);
		return this.showChildren = v;
	}
	,set_root: function(v) {
		var l = this.root;
		this.root = v;
		{
			var _g = this.root;
			var r = l;
			var oldRoot = l;
			if(l == null) {
				var r1 = _g;
				this.init(this.root);
				var _g1 = 0;
				var _g2 = this.items;
				while(_g1 < _g2.length) {
					var item = _g2[_g1];
					++_g1;
					item.set_root(r1);
				}
			} else switch(l) {
			default:
				var newRoot = _g;
				if(_g == null) {
					var _g11 = 0;
					var _g21 = this.items;
					while(_g11 < _g21.length) {
						var item1 = _g21[_g11];
						++_g11;
						item1.set_root(null);
					}
				} else switch(_g) {
				default:
					if(oldRoot != newRoot && oldRoot != null && newRoot != null) {
						this.init(this.root);
						var _g12 = 0;
						var _g22 = this.items;
						while(_g12 < _g22.length) {
							var item2 = _g22[_g12];
							++_g12;
							item2.set_root(newRoot);
						}
					} else null;
				}
			}
		}
		return this.root;
	}
	,__class__: gryffin_ui_MenuItem
	,__properties__: {set_root:"set_root",set_showChildren:"set_showChildren",get_child:"get_child",get_subMenu:"get_subMenu",get_rootLevel:"get_rootLevel",get_index:"get_index",set_key:"set_key",get_key:"get_key",set_label:"set_label",get_label:"get_label",get_pos:"get_pos",set_h:"set_h",get_h:"get_h",set_w:"set_w",get_w:"get_w",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
});
var bp_ui_menu_ExportBookmarksButton = function() {
	gryffin_ui_MenuItem.call(this);
	this.set_label("Export Bookmarks to File");
};
$hxClasses["bp.ui.menu.ExportBookmarksButton"] = bp_ui_menu_ExportBookmarksButton;
bp_ui_menu_ExportBookmarksButton.__name__ = ["bp","ui","menu","ExportBookmarksButton"];
bp_ui_menu_ExportBookmarksButton.__super__ = gryffin_ui_MenuItem;
bp_ui_menu_ExportBookmarksButton.prototype = $extend(gryffin_ui_MenuItem.prototype,{
	click: function(event) {
		this.exportToSelected(function() {
			console.log("export complete");
		});
	}
	,exportToSelected: function(done) {
		var onerr = function(error) {
			window.console.error(error);
		};
		tannus_chrome_FileSystem.saveAs("bookmarks.bml").then((function(f,a2) {
			return function(a1) {
				f(a1,a2);
			};
		})($bind(this,this.exportTo),done)).unless(onerr);
	}
	,exportTo: function(file,done) {
		if(file == null) {
			console.log("export failed because the provided Entry was NULL");
			return;
		}
		var ondone = function() {
			console.log("successfully written to " + file.name);
			if(done != null) done();
		};
		var onerr = function(error) {
			window.console.error(error);
		};
		tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$.writer(file).then((function(f,a2) {
			return function(a1) {
				f(a1,a2);
			};
		})($bind(this,this.write),ondone)).unless(onerr);
	}
	,write: function(writer,done) {
		writer.onwrite.once(function() {
			console.log("written");
			done();
		});
		var data = new bp_bml_Writer().print(this.root.player.data.bookmarks.all());
		writer.write(data);
	}
	,get_appMenu: function() {
		return this.root;
	}
	,get_player: function() {
		return this.root.player;
	}
	,__class__: bp_ui_menu_ExportBookmarksButton
	,__properties__: $extend(gryffin_ui_MenuItem.prototype.__properties__,{get_player:"get_player",get_appMenu:"get_appMenu"})
});
var bp_ui_menu_HelpButton = function() {
	gryffin_ui_MenuItem.call(this);
	this.set_label("Help");
};
$hxClasses["bp.ui.menu.HelpButton"] = bp_ui_menu_HelpButton;
bp_ui_menu_HelpButton.__name__ = ["bp","ui","menu","HelpButton"];
bp_ui_menu_HelpButton.__super__ = gryffin_ui_MenuItem;
bp_ui_menu_HelpButton.prototype = $extend(gryffin_ui_MenuItem.prototype,{
	click: function(e) {
		gryffin_ui_MenuItem.prototype.click.call(this,e);
		this.root.player.showHelp();
	}
	,get_appMenu: function() {
		return this.root;
	}
	,get_player: function() {
		return this.root.player;
	}
	,__class__: bp_ui_menu_HelpButton
	,__properties__: $extend(gryffin_ui_MenuItem.prototype.__properties__,{get_player:"get_player",get_appMenu:"get_appMenu"})
});
var bp_ui_menu_ImportBookmarksButton = function() {
	gryffin_ui_MenuItem.call(this);
	this.set_label("Import Bookmarks from File");
};
$hxClasses["bp.ui.menu.ImportBookmarksButton"] = bp_ui_menu_ImportBookmarksButton;
bp_ui_menu_ImportBookmarksButton.__name__ = ["bp","ui","menu","ImportBookmarksButton"];
bp_ui_menu_ImportBookmarksButton.__super__ = gryffin_ui_MenuItem;
bp_ui_menu_ImportBookmarksButton.prototype = $extend(gryffin_ui_MenuItem.prototype,{
	click: function(e) {
		var _g = this;
		var onentries = function(entries) {
			if(chrome.runtime.lastError != null) console.log(chrome.runtime.lastError);
			var list = entries.filter(function(item) {
				return item.isFile;
			}).map(function(item1) {
				return item1;
			});
			if(!Lambda.empty(list)) _g.importFrom(list[0],function(marks) {
				console.log("Bookmarks imported!");
				console.log(marks);
				_g.importMarks(marks);
			}); else _g.root.player.status.message("dev:marks","No bookmarks imported");
		};
		tannus_chrome_FileSystem.chooseEntry({ accepts : [{ description : "BML (BookMark Library) file", extensions : ["bml"]}]},onentries);
	}
	,importFrom: function(entry,cb) {
		var onerr = function(error) {
			window.console.error(error);
		};
		((function($this) {
			var $r;
			var this1 = entry;
			$r = new tannus_html_fs_FilePromise(function(give) {
				give(this1);
			});
			return $r;
		}(this))).then((function(f,cb1) {
			return function(a1) {
				f(a1,cb1);
			};
		})($bind(this,this.readFrom),cb)).unless(onerr);
	}
	,readFrom: function(file,cb) {
		var i = new tannus_html_fs_WebFileInput(file);
		i.open();
		i.chunkSize = 3;
		i.read(function(chunk) {
			var s = chunk.toString();
			if(s == "BML") i.seek(0,function() {
				i.chunkSize = i.__size();
				i.read(function(data) {
					var readr = new bp_bml_Reader();
					var marks = readr.read(data);
					i.close();
					cb(marks);
				});
			}); else {
				i.close();
				cb([]);
			}
		});
	}
	,importMarks: function(marks) {
		console.log((function($this) {
			var $r;
			var _this = $this.root.player.data.bookmarks.all();
			$r = _this.slice();
			return $r;
		}(this)));
		var _g = 0;
		while(_g < marks.length) {
			var m = marks[_g];
			++_g;
			this.root.player.data.bookmarks.addBookmark(m);
		}
		console.log((function($this) {
			var $r;
			var _this1 = $this.root.player.data.bookmarks.all();
			$r = _this1.slice();
			return $r;
		}(this)));
	}
	,get_appMenu: function() {
		return this.root;
	}
	,get_player: function() {
		return this.root.player;
	}
	,__class__: bp_ui_menu_ImportBookmarksButton
	,__properties__: $extend(gryffin_ui_MenuItem.prototype.__properties__,{get_player:"get_player",get_appMenu:"get_appMenu"})
});
var bp_ui_menu_OpenFilesButton = function() {
	gryffin_ui_MenuItem.call(this);
	this.set_label("Open File(s)...");
};
$hxClasses["bp.ui.menu.OpenFilesButton"] = bp_ui_menu_OpenFilesButton;
bp_ui_menu_OpenFilesButton.__name__ = ["bp","ui","menu","OpenFilesButton"];
bp_ui_menu_OpenFilesButton.__super__ = gryffin_ui_MenuItem;
bp_ui_menu_OpenFilesButton.prototype = $extend(gryffin_ui_MenuItem.prototype,{
	click: function(e) {
		gryffin_ui_MenuItem.prototype.click.call(this,e);
		this.root.player.open();
	}
	,get_appMenu: function() {
		return this.root;
	}
	,get_player: function() {
		return this.root.player;
	}
	,__class__: bp_ui_menu_OpenFilesButton
	,__properties__: $extend(gryffin_ui_MenuItem.prototype.__properties__,{get_player:"get_player",get_appMenu:"get_appMenu"})
});
var bp_ui_menu_PlaylistButton = function() {
	var _g = this;
	gryffin_ui_MenuItem.call(this);
	this.set_label("Playlist");
	this.item(tannus_ds_CObj.create({ 'label' : "Clear Playlist", 'click' : function(e) {
		_g.root.player.clearPlaylist();
	}}));
	this.item(tannus_ds_CObj.create({ label : "Remove watched from Playlist", click : function(e1) {
		var pl = _g.root.player.playlist;
		var res = pl.filter(function(t) {
			return !t.meta.get_watched();
		});
		_g.root.player.playlist = res;
		if(res.tracks.length > 0) _g.root.player["goto"](res.tracks[0]);
	}}));
};
$hxClasses["bp.ui.menu.PlaylistButton"] = bp_ui_menu_PlaylistButton;
bp_ui_menu_PlaylistButton.__name__ = ["bp","ui","menu","PlaylistButton"];
bp_ui_menu_PlaylistButton.__super__ = gryffin_ui_MenuItem;
bp_ui_menu_PlaylistButton.prototype = $extend(gryffin_ui_MenuItem.prototype,{
	get_appMenu: function() {
		return this.root;
	}
	,get_player: function() {
		return this.root.player;
	}
	,__class__: bp_ui_menu_PlaylistButton
	,__properties__: $extend(gryffin_ui_MenuItem.prototype.__properties__,{get_player:"get_player",get_appMenu:"get_appMenu"})
});
var bp_ui_menu_ScreenshotButton = function() {
	gryffin_ui_MenuItem.call(this);
	this.set_label("Take Snapshot");
	this.set_key("Shift + S");
	this.__build();
};
$hxClasses["bp.ui.menu.ScreenshotButton"] = bp_ui_menu_ScreenshotButton;
bp_ui_menu_ScreenshotButton.__name__ = ["bp","ui","menu","ScreenshotButton"];
bp_ui_menu_ScreenshotButton.__super__ = gryffin_ui_MenuItem;
bp_ui_menu_ScreenshotButton.prototype = $extend(gryffin_ui_MenuItem.prototype,{
	__build: function() {
	}
	,chooseRegion: function(f) {
		var sr = new bp_ui_SelectRect();
		sr.rectSelected.listen(function(r) {
			sr["delete"]();
			f(r);
		},true);
		sr.cancelled.once(function() {
			sr["delete"]();
			f(null);
		});
		this.root.player.stage.addChild(sr);
	}
	,click: function(e) {
		var _g = this;
		this.root.player.screenshot(function() {
			_g.root.closeAll();
		});
	}
	,get_appMenu: function() {
		return this.root;
	}
	,get_player: function() {
		return this.root.player;
	}
	,__class__: bp_ui_menu_ScreenshotButton
	,__properties__: $extend(gryffin_ui_MenuItem.prototype.__properties__,{get_player:"get_player",get_appMenu:"get_appMenu"})
});
var bp_ui_menu_SettingsButton = function() {
	gryffin_ui_MenuItem.call(this);
	this.set_label("User Preferences");
};
$hxClasses["bp.ui.menu.SettingsButton"] = bp_ui_menu_SettingsButton;
bp_ui_menu_SettingsButton.__name__ = ["bp","ui","menu","SettingsButton"];
bp_ui_menu_SettingsButton.__super__ = gryffin_ui_MenuItem;
bp_ui_menu_SettingsButton.prototype = $extend(gryffin_ui_MenuItem.prototype,{
	click: function(e) {
		gryffin_ui_MenuItem.prototype.click.call(this,e);
		this.root.player.showSettings();
	}
	,get_appMenu: function() {
		return this.root;
	}
	,get_player: function() {
		return this.root.player;
	}
	,__class__: bp_ui_menu_SettingsButton
	,__properties__: $extend(gryffin_ui_MenuItem.prototype.__properties__,{get_player:"get_player",get_appMenu:"get_appMenu"})
});
var bp_ui_menu_ToolsButton = function() {
	gryffin_ui_MenuItem.call(this);
	this.set_label("Tools");
};
$hxClasses["bp.ui.menu.ToolsButton"] = bp_ui_menu_ToolsButton;
bp_ui_menu_ToolsButton.__name__ = ["bp","ui","menu","ToolsButton"];
bp_ui_menu_ToolsButton.__super__ = gryffin_ui_MenuItem;
bp_ui_menu_ToolsButton.prototype = $extend(gryffin_ui_MenuItem.prototype,{
	init: function(menu) {
		gryffin_ui_MenuItem.prototype.init.call(this,menu);
		this.append(new bp_ui_menu_ScreenshotButton());
		this.append(new bp_ui_menu_ExportBookmarksButton());
		this.append(new bp_ui_menu_ImportBookmarksButton());
		this.append(new bp_ui_menu_SettingsButton());
	}
	,get_appMenu: function() {
		return this.root;
	}
	,get_player: function() {
		return this.root.player;
	}
	,__class__: bp_ui_menu_ToolsButton
	,__properties__: $extend(gryffin_ui_MenuItem.prototype.__properties__,{get_player:"get_player",get_appMenu:"get_appMenu"})
});
var bp_ui_menu_TrackButton = function() {
	var _g = this;
	gryffin_ui_MenuItem.call(this);
	this.set_label("Track");
	this.item(tannus_ds_CObj.create({ label : "Favorite", click : function(e) {
		_g.root.player.pane.video.currentTrack.meta.set_favorited(!_g.root.player.pane.video.currentTrack.meta.get_favorited());
	}}));
	this.item(tannus_ds_CObj.create({ label : "Remove from Playlist", click : function(e1) {
		var t = _g.root.player.pane.video.currentTrack;
		_g.root.player.nextTrack(function() {
			_g.root.player.playlist.removeTrack(t);
		});
	}}));
};
$hxClasses["bp.ui.menu.TrackButton"] = bp_ui_menu_TrackButton;
bp_ui_menu_TrackButton.__name__ = ["bp","ui","menu","TrackButton"];
bp_ui_menu_TrackButton.__super__ = gryffin_ui_MenuItem;
bp_ui_menu_TrackButton.prototype = $extend(gryffin_ui_MenuItem.prototype,{
	get_appMenu: function() {
		return this.root;
	}
	,get_player: function() {
		return this.root.player;
	}
	,__class__: bp_ui_menu_TrackButton
	,__properties__: $extend(gryffin_ui_MenuItem.prototype.__properties__,{get_player:"get_player",get_appMenu:"get_appMenu"})
});
var bp_ui_pbr_DownButton = function(p) {
	bp_ui_PlaybackRateButton.call(this,p);
};
$hxClasses["bp.ui.pbr.DownButton"] = bp_ui_pbr_DownButton;
bp_ui_pbr_DownButton.__name__ = ["bp","ui","pbr","DownButton"];
bp_ui_pbr_DownButton.__super__ = bp_ui_PlaybackRateButton;
bp_ui_pbr_DownButton.prototype = $extend(bp_ui_PlaybackRateButton.prototype,{
	update: function(stage) {
		bp_ui_PlaybackRateButton.prototype.update.call(this,stage);
	}
	,render: function(stage,c) {
		console.log("rendering..");
		c.ctx.save();
		c.ctx.beginPath();
		c.set_fillStyle("#888");
		c.drawRect(this.rect);
		c.ctx.closePath();
		c.ctx.fill();
		c.ctx.beginPath();
		c.set_fillStyle("black");
		c.drawVertices(this.getTriangleVertices());
		c.ctx.closePath();
		c.ctx.fill();
		c.ctx.restore();
	}
	,getTriangle: function() {
		var a = new tannus_geom_TPoint(4,10,0);
		var b = new tannus_geom_TPoint(16,16,0);
		var c = new tannus_geom_TPoint(16,4,0);
		return new tannus_geom_Triangle(a,b,c);
	}
	,getTriangleVertices: function() {
		var _g = this;
		var va = this.getTriangle().getVertices();
		va = va.map(function(p) {
			var this1 = tannus_geom__$Point_Point_$Impl_$.devectorize((function($this) {
				var $r;
				var r = tannus_geom__$Rectangle_Rectangle_$Impl_$.fromArray([20,20]);
				$r = (function($this) {
					var $r;
					var x;
					{
						var what = p.get_x();
						x = tannus_math__$Percent_Percent_$Impl_$.percent(what,r.width);
					}
					var y;
					{
						var what1 = p.get_y();
						y = tannus_math__$Percent_Percent_$Impl_$.percent(what1,r.height);
					}
					$r = new tannus_geom_TPoint(x,y,0);
					return $r;
				}($this));
				return $r;
			}(this)),_g.rect);
			var other = _g.get_pos();
			return this1.plusPoint(other);
		});
		return va;
	}
	,click: function(event) {
		var _g = this.widget.button.controls.player.pane.video;
		_g.set_playbackRate(_g.vid.playbackRate - 0.05);
		this.widget.button.controls.player.data.settings.set_speed(this.widget.button.controls.player.pane.video.vid.playbackRate);
	}
	,__class__: bp_ui_pbr_DownButton
});
var bp_ui_pbr_UpButton = function(p) {
	bp_ui_PlaybackRateButton.call(this,p);
};
$hxClasses["bp.ui.pbr.UpButton"] = bp_ui_pbr_UpButton;
bp_ui_pbr_UpButton.__name__ = ["bp","ui","pbr","UpButton"];
bp_ui_pbr_UpButton.__super__ = bp_ui_PlaybackRateButton;
bp_ui_pbr_UpButton.prototype = $extend(bp_ui_PlaybackRateButton.prototype,{
	update: function(stage) {
		bp_ui_PlaybackRateButton.prototype.update.call(this,stage);
	}
	,render: function(stage,c) {
		console.log("rendering..");
		c.ctx.save();
		c.ctx.beginPath();
		c.set_fillStyle("#888");
		c.drawRect(this.rect);
		c.ctx.closePath();
		c.ctx.fill();
		c.ctx.beginPath();
		c.set_fillStyle("black");
		c.drawVertices(this.getTriangleVertices());
		c.ctx.closePath();
		c.ctx.fill();
		c.ctx.restore();
	}
	,getTriangle: function() {
		var a = new tannus_geom_TPoint(4,4,0);
		var b = new tannus_geom_TPoint(4,16,0);
		var c = new tannus_geom_TPoint(16,10,0);
		return new tannus_geom_Triangle(a,b,c);
	}
	,getTriangleVertices: function() {
		var _g = this;
		var va = this.getTriangle().getVertices();
		va = va.map(function(p) {
			var this1 = tannus_geom__$Point_Point_$Impl_$.devectorize((function($this) {
				var $r;
				var r = tannus_geom__$Rectangle_Rectangle_$Impl_$.fromArray([20,20]);
				$r = (function($this) {
					var $r;
					var x;
					{
						var what = p.get_x();
						x = tannus_math__$Percent_Percent_$Impl_$.percent(what,r.width);
					}
					var y;
					{
						var what1 = p.get_y();
						y = tannus_math__$Percent_Percent_$Impl_$.percent(what1,r.height);
					}
					$r = new tannus_geom_TPoint(x,y,0);
					return $r;
				}($this));
				return $r;
			}(this)),_g.rect);
			var other = _g.get_pos();
			return this1.plusPoint(other);
		});
		return va;
	}
	,click: function(event) {
		var _g = this.widget.button.controls.player.pane.video;
		_g.set_playbackRate(_g.vid.playbackRate + 0.05);
		this.widget.button.controls.player.data.settings.set_speed(this.widget.button.controls.player.pane.video.vid.playbackRate);
	}
	,__class__: bp_ui_pbr_UpButton
});
var chrome_Runtime = function() { };
$hxClasses["chrome.Runtime"] = chrome_Runtime;
chrome_Runtime.__name__ = ["chrome","Runtime"];
chrome_Runtime.__properties__ = {get_lib:"get_lib"}
chrome_Runtime.onLaunch = function(f) {
	chrome.app.runtime.onLaunched.addListener(f);
};
chrome_Runtime.onInstalled = function(f) {
	chrome_Runtime.rt.onInstalled.addListener(f);
};
chrome_Runtime.reload = function() {
	chrome_Runtime.rt.reload();
};
chrome_Runtime.get_lib = function() {
	return chrome.app.runtime;
};
var chrome_Windows = function() { };
$hxClasses["chrome.Windows"] = chrome_Windows;
chrome_Windows.__name__ = ["chrome","Windows"];
chrome_Windows.create = function(url,options,cb) {
	chrome_Windows.lib.create(url,options,cb);
};
chrome_Windows.current = function() {
	return chrome_Windows.lib.current();
};
chrome_Windows.onClosed = function(w,f) {
	w.contentWindow.chrome.app.window.onClosed.addListener(f);
};
var chrome_app__$AppWindow_AppWindow_$Impl_$ = {};
$hxClasses["chrome.app._AppWindow.AppWindow_Impl_"] = chrome_app__$AppWindow_AppWindow_$Impl_$;
chrome_app__$AppWindow_AppWindow_$Impl_$.__name__ = ["chrome","app","_AppWindow","AppWindow_Impl_"];
chrome_app__$AppWindow_AppWindow_$Impl_$._new = function(tw) {
	return tw;
};
var foundation_Button = function(txt) {
	foundation_Widget.call(this);
	this.set_el((function($this) {
		var $r;
		var el;
		{
			var _this = $this.get_d();
			el = _this.createElement("button");
		}
		$r = js.JQuery(el);
		return $r;
	}(this)));
	this.el.attr("type","button");
	"button";
	this.el.addClass("button");
	var this1 = this.el;
	this1.text(txt);
	this1.text();
	this.__init();
};
$hxClasses["foundation.Button"] = foundation_Button;
foundation_Button.__name__ = ["foundation","Button"];
foundation_Button.__super__ = foundation_Widget;
foundation_Button.prototype = $extend(foundation_Widget.prototype,{
	__init: function() {
		var _g = this;
		this.el.on("click mouseenter mouseleave",function(event) {
			_g.dispatch(event.type,event);
		});
	}
	,resetSize: function() {
		var all = ["tiny","small","large","expand"];
		var _g = 0;
		while(_g < all.length) {
			var s = all[_g];
			++_g;
			this.el.removeClass(s);
		}
	}
	,cs: function(n,v) {
		if(v == null) v = true;
		(v?$bind(this,this.addClass):$bind(this,this.removeClass))(n);
		return this["is"]("." + n);
	}
	,tiny: function(v) {
		(v?$bind(this,this.addClass):$bind(this,this.removeClass))("tiny");
		return this["is"]("." + "tiny");
	}
	,small: function(v) {
		(v?$bind(this,this.addClass):$bind(this,this.removeClass))("small");
		return this["is"]("." + "small");
	}
	,large: function(v) {
		(v?$bind(this,this.addClass):$bind(this,this.removeClass))("large");
		return this["is"]("." + "large");
	}
	,expand: function(v) {
		(v?$bind(this,this.addClass):$bind(this,this.removeClass))("expanded");
		return this["is"]("." + "expanded");
	}
	,secondary: function(v) {
		(v?$bind(this,this.addClass):$bind(this,this.removeClass))("secondary");
		return this["is"]("." + "secondary");
	}
	,success: function(v) {
		(v?$bind(this,this.addClass):$bind(this,this.removeClass))("success");
		return this["is"]("." + "success");
	}
	,warning: function(v) {
		(v?$bind(this,this.addClass):$bind(this,this.removeClass))("warning");
		return this["is"]("." + "warning");
	}
	,alert: function(v) {
		(v?$bind(this,this.addClass):$bind(this,this.removeClass))("alert");
		return this["is"]("." + "alert");
	}
	,disable: function(v) {
		(v?$bind(this,this.addClass):$bind(this,this.removeClass))("disabled");
		return this["is"]("." + "disabled");
	}
	,hollow: function(v) {
		(v?$bind(this,this.addClass):$bind(this,this.removeClass))("hollow");
		return this["is"]("." + "hollow");
	}
	,__class__: foundation_Button
});
var foundation_Input = function() {
	foundation_Widget.call(this);
};
$hxClasses["foundation.Input"] = foundation_Input;
foundation_Input.__name__ = ["foundation","Input"];
foundation_Input.__super__ = foundation_Widget;
foundation_Input.prototype = $extend(foundation_Widget.prototype,{
	getValue: function() {
		return null;
	}
	,setValue: function(value) {
	}
	,__class__: foundation_Input
});
var foundation_DOMInput = function() {
	this._label = null;
	this.lastValue = null;
	foundation_Input.call(this);
	this.changed = new tannus_io_Signal();
	this.set_el(js.JQuery("<input></input>"));
	this.__listen();
};
$hxClasses["foundation.DOMInput"] = foundation_DOMInput;
foundation_DOMInput.__name__ = ["foundation","DOMInput"];
foundation_DOMInput.__super__ = foundation_Input;
foundation_DOMInput.prototype = $extend(foundation_Input.prototype,{
	focus: function() {
		this.get_iel().focus();
	}
	,select: function(start,end) {
		this.get_iel().select();
		if(start != null) {
			this.get_iel().selectionStart = start;
			if(end == null) this.get_iel().selectionEnd = this.get_iel().value.length; else this.get_iel().selectionEnd = end;
		}
	}
	,__listen: function() {
		this.forwardEvent("change");
		this.on("change",$bind(this,this.__change));
	}
	,__change: function(event) {
		var delta;
		var cur = this.getValue();
		delta = [cur,this.lastValue];
		this.lastValue = this.getValue();
		this.changed.broadcast(delta);
	}
	,label: function(txt) {
		var _g = this;
		if(this._active) window.requestAnimationFrame(function() {
			if(_g._label == null) {
				_g._label = new foundation_Label();
				_g._label.set_owner(_g);
				_g.after(_g._label);
			}
			_g._label.set_text(txt);
		}); else this.once("activated",function() {
			if(_g._label == null) {
				_g._label = new foundation_Label();
				_g._label.set_owner(_g);
				_g.after(_g._label);
			}
			_g._label.set_text(txt);
		});
	}
	,getValue: function() {
		return this.get_iel().value;
	}
	,setValue: function(v) {
		this.get_iel().value = v;
	}
	,get_ntype: function() {
		return this.get_iel().type;
	}
	,set_ntype: function(v) {
		return this.get_iel().type = v;
	}
	,get_iel: function() {
		return this.el.get(0);
	}
	,__class__: foundation_DOMInput
	,__properties__: $extend(foundation_Input.prototype.__properties__,{get_iel:"get_iel",set_ntype:"set_ntype",get_ntype:"get_ntype"})
});
var foundation_Foundation = $hx_exports.hxFoundation = function() { };
$hxClasses["foundation.Foundation"] = foundation_Foundation;
foundation_Foundation.__name__ = ["foundation","Foundation"];
foundation_Foundation.__properties__ = {get_l:"get_l",get_mq:"get_mq"}
foundation_Foundation.initialize = function(element) {
	tannus_html__$Element_Element_$Impl_$.plugin(element,"foundation");
};
foundation_Foundation.reInitializePlugin = function(name) {
	window.Foundation.reInit(name);
};
foundation_Foundation.reInitializePluginList = function(plugins) {
	window.Foundation.reInit(plugins);
};
foundation_Foundation.reInitializeElement = function(e) {
	window.Foundation.reInit(e);
};
foundation_Foundation.plugin = function(name) {
	var pc = Reflect.getProperty(window.Foundation,name);
	if(pc != null) return Reflect.makeVarArgs((function(f,cl) {
		return function(a1) {
			return f(cl,a1);
		};
	})(Type.createInstance,pc)); else return null;
};
foundation_Foundation.get_mq = function() {
	return window.Foundation.MediaQuery;
};
foundation_Foundation.get_l = function() {
	return window.Foundation;
};
var foundation_TextualWidget = function() {
	foundation_Widget.call(this);
};
$hxClasses["foundation.TextualWidget"] = foundation_TextualWidget;
foundation_TextualWidget.__name__ = ["foundation","TextualWidget"];
foundation_TextualWidget.__super__ = foundation_Widget;
foundation_TextualWidget.prototype = $extend(foundation_Widget.prototype,{
	get_textColor: function() {
		var tc = this.el.css("color");
		return tannus_graphics__$Color_TColor.fromString(tc);
	}
	,set_textColor: function(tc) {
		this.el.css("color",tc.toString());
		return this.get_textColor();
	}
	,get_textAlign: function() {
		return this.el.css("text-align");
	}
	,set_textAlign: function(v) {
		this.el.css("text-align",v);
		return v;
	}
	,get_fontFamily: function() {
		return this.el.css("font-family");
	}
	,set_fontFamily: function(nf) {
		this.el.css("font-family",nf);
		return this.get_fontFamily();
	}
	,__class__: foundation_TextualWidget
	,__properties__: $extend(foundation_Widget.prototype.__properties__,{set_fontFamily:"set_fontFamily",get_fontFamily:"get_fontFamily",set_textAlign:"set_textAlign",get_textAlign:"get_textAlign",set_textColor:"set_textColor",get_textColor:"get_textColor"})
});
var foundation_Heading = function(lvl,txt) {
	foundation_TextualWidget.call(this);
	this.set_el(js.JQuery("<h" + lvl + "></h" + lvl + ">"));
	if(txt != null) this.set_text(txt);
};
$hxClasses["foundation.Heading"] = foundation_Heading;
foundation_Heading.__name__ = ["foundation","Heading"];
foundation_Heading.__super__ = foundation_TextualWidget;
foundation_Heading.prototype = $extend(foundation_TextualWidget.prototype,{
	__class__: foundation_Heading
});
var foundation_IInput = function() { };
$hxClasses["foundation.IInput"] = foundation_IInput;
foundation_IInput.__name__ = ["foundation","IInput"];
foundation_IInput.prototype = {
	__class__: foundation_IInput
	,__properties__: {set_name:"set_name",get_name:"get_name"}
};
var foundation_Label = function() {
	foundation_Widget.call(this);
	this.set_el(js.JQuery("<label></label>"));
	this.position = "after";
};
$hxClasses["foundation.Label"] = foundation_Label;
foundation_Label.__name__ = ["foundation","Label"];
foundation_Label.__super__ = foundation_Widget;
foundation_Label.prototype = $extend(foundation_Widget.prototype,{
	applyOptions: function(o) {
		if(o != null) {
			if(o.position != null) this.position = o.position;
		}
	}
	,link: function(w) {
		this.set_owner(w);
		var _g = this.position;
		switch(_g) {
		case "before":
			w.before(this);
			break;
		case "after":
			w.after(this);
			break;
		}
	}
	,get_ownerId: function() {
		return this.el.attr("for");
	}
	,set_ownerId: function(v) {
		this.el.attr("for",v);
		return v;
	}
	,get_owner: function() {
		if(this.el.attr("for") != null) {
			var oe = js.JQuery("#" + this.uid);
			return oe.data("__hfWidget__");
		} else return null;
	}
	,set_owner: function(v) {
		if(v != null) this.set_ownerId(v.uid); else {
			this.el.attr("for",null);
			null;
		}
		return this.get_owner();
	}
	,__class__: foundation_Label
	,__properties__: $extend(foundation_Widget.prototype.__properties__,{set_owner:"set_owner",get_owner:"get_owner",set_ownerId:"set_ownerId",get_ownerId:"get_ownerId"})
});
var foundation__$Label_LabelPos_$Impl_$ = {};
$hxClasses["foundation._Label.LabelPos_Impl_"] = foundation__$Label_LabelPos_$Impl_$;
foundation__$Label_LabelPos_$Impl_$.__name__ = ["foundation","_Label","LabelPos_Impl_"];
foundation__$Label_LabelPos_$Impl_$.fromString = function(s) {
	var _g = StringTools.trim(s).toLowerCase();
	switch(_g) {
	case "before":
		return "before";
	case "after":
		return "after";
	default:
		throw new js__$Boot_HaxeError("Error: \"" + s + "\" is not a valid LabelPos");
		return "after";
	}
};
var foundation_LabelSpan = function() {
	foundation_Widget.call(this);
	this.set_el(js.JQuery("<span></span>"));
	this.addClass("label");
};
$hxClasses["foundation.LabelSpan"] = foundation_LabelSpan;
foundation_LabelSpan.__name__ = ["foundation","LabelSpan"];
foundation_LabelSpan.__super__ = foundation_Widget;
foundation_LabelSpan.prototype = $extend(foundation_Widget.prototype,{
	cs: function(n,v) {
		if(v == null) v = true;
		(v?$bind(this,this.addClass):$bind(this,this.removeClass))(n);
		return this["is"]("." + n);
	}
	,secondary: function(v) {
		(v?$bind(this,this.addClass):$bind(this,this.removeClass))("secondary");
		this["is"]("." + "secondary");
	}
	,success: function(v) {
		(v?$bind(this,this.addClass):$bind(this,this.removeClass))("success");
		this["is"]("." + "success");
	}
	,alert: function(v) {
		(v?$bind(this,this.addClass):$bind(this,this.removeClass))("alter");
		this["is"]("." + "alter");
	}
	,warning: function(v) {
		(v?$bind(this,this.addClass):$bind(this,this.removeClass))("warning");
		this["is"]("." + "warning");
	}
	,__class__: foundation_LabelSpan
});
var foundation_Paragraph = function(txt) {
	foundation_TextualWidget.call(this);
	this.set_el(js.JQuery("<p></p>"));
	if(txt != null) this.set_text(txt);
};
$hxClasses["foundation.Paragraph"] = foundation_Paragraph;
foundation_Paragraph.__name__ = ["foundation","Paragraph"];
foundation_Paragraph.__super__ = foundation_TextualWidget;
foundation_Paragraph.prototype = $extend(foundation_TextualWidget.prototype,{
	__class__: foundation_Paragraph
});
var foundation_Styles = function(ref) {
	this._el = ref;
};
$hxClasses["foundation.Styles"] = foundation_Styles;
foundation_Styles.__name__ = ["foundation","Styles"];
foundation_Styles.prototype = {
	css: function() {
		var e = this._el.get();
		if(e == null) throw new js__$Boot_HaxeError("WidgetError: Cannot modify an Element which does not exist!"); else return tannus_html__$Element_Element_$Impl_$.get_style(e);
	}
	,margin: function(nm) {
		if(nm != null) {
			if((nm instanceof Array) && nm.__enum__ == null) {
				var na = nm;
				this.set_marginTop(na.shift());
				this.set_marginRight(na.shift());
				this.set_marginBottom(na.shift());
				this.set_marginLeft(na.shift());
			} else if(typeof(nm) == "number") {
				this.set_marginTop(nm);
				this.set_marginBottom(nm);
				this.set_marginLeft(nm);
				this.set_marginRight(nm);
			}
		}
		return [this.get_marginTop(),this.get_marginRight(),this.get_marginBottom(),this.get_marginLeft()];
	}
	,padding: function(top,right,bottom,left) {
		var c = this.css();
		if(top != null && right != null && bottom != null && left != null) {
			c.set("padding-top",(top != null?top:top) + "px");
			c.set("padding-right",(right != null?right:right) + "px");
			c.set("padding-left",(left != null?left:left) + "px");
			c.set("padding-bottom",(bottom != null?bottom:bottom) + "px");
		} else if(top != null) c.set("padding",(top != null?top:top) + "px");
		return { 'top' : Std.parseFloat(c.get("padding-top")), 'bottom' : Std.parseFloat(c.get("padding-bottom")), 'left' : Std.parseFloat(c.get("padding-left")), 'right' : Std.parseFloat(c.get("padding-right"))};
	}
	,border: function(type,color,size) {
		var c = this.css();
		if(type != null && color != null && size != null) {
			c.set("border-style",type != null?type:type);
			var value = (color != null?color:color).toString();
			c.set("border-color",value);
			c.set("border-width",Std.string(size != null?size:size));
		}
		return { 'style' : c.get("border-style"), 'color' : (function($this) {
			var $r;
			var s = c.get("border-color");
			$r = tannus_graphics__$Color_TColor.fromString(s);
			return $r;
		}(this)), 'size' : Std.parseFloat(c.get("border-width"))};
	}
	,backgroundColor: function(color) {
		var c = this.css();
		if(color != null) c.set("background-color",color.toString());
		var s = c.get("background-color");
		return tannus_graphics__$Color_TColor.fromString(s);
	}
	,'float': function(dir) {
		var c = this.css();
		if(dir == null) {
			var this1 = c.get("float");
			if(this1 != null) return this1; else return this1;
		} else return c.set("float",dir);
	}
	,position: function(pos) {
		var c = this.css();
		if(pos == null) {
			var tpos;
			var d = c.pluck(["top","left","bottom","right"]);
			tpos = tannus_ds_CObj.create(d);
			console.log(tpos.o);
			var val = c.get("position");
			tpos.set("type",val);
			return tpos.o;
		} else {
			c.set("position",pos.type != null?pos.type:"initial");
			if(pos.top != null) c.set("top",pos.top + "px");
			if(pos.left != null) c.set("left",pos.left + "px");
			if(pos.bottom != null) c.set("bottom",pos.bottom + "px");
			if(pos.right != null) c.set("right",pos.right + "px");
			return this.position();
		}
	}
	,get_el: function() {
		return this._el.get();
	}
	,get_marginLeft: function() {
		return Std.parseFloat((function($this) {
			var $r;
			var this1 = $this.css();
			$r = this1.get("margin-left");
			return $r;
		}(this)));
	}
	,set_marginLeft: function(ml) {
		var c = this.css();
		c.set("margin-left",ml + "px");
		return ml;
	}
	,get_marginRight: function() {
		return Std.parseFloat((function($this) {
			var $r;
			var this1 = $this.css();
			$r = this1.get("margin-right");
			return $r;
		}(this)));
	}
	,set_marginRight: function(mr) {
		var c = this.css();
		c.set("margin-right",mr + "px");
		return mr;
	}
	,get_marginTop: function() {
		return Std.parseFloat((function($this) {
			var $r;
			var this1 = $this.css();
			$r = this1.get("margin-top");
			return $r;
		}(this)));
	}
	,set_marginTop: function(mr) {
		var c = this.css();
		c.set("margin-top",mr + "px");
		return mr;
	}
	,get_marginBottom: function() {
		return Std.parseFloat((function($this) {
			var $r;
			var this1 = $this.css();
			$r = this1.get("margin-bottom");
			return $r;
		}(this)));
	}
	,set_marginBottom: function(mr) {
		var c = this.css();
		c.set("margin-bottom",mr + "px");
		return mr;
	}
	,__class__: foundation_Styles
	,__properties__: {set_marginBottom:"set_marginBottom",get_marginBottom:"get_marginBottom",set_marginTop:"set_marginTop",get_marginTop:"get_marginTop",set_marginRight:"set_marginRight",get_marginRight:"get_marginRight",set_marginLeft:"set_marginLeft",get_marginLeft:"get_marginLeft",get_el:"get_el"}
};
var foundation_TextInput = function() {
	foundation_DOMInput.call(this);
	this.get_iel().type = "text";
	this.forwardEvents(["input","keypress","keydown","keyup"],this.el,tannus_events_KeyboardEvent.fromJqEvent);
};
$hxClasses["foundation.TextInput"] = foundation_TextInput;
foundation_TextInput.__name__ = ["foundation","TextInput"];
foundation_TextInput.__super__ = foundation_DOMInput;
foundation_TextInput.prototype = $extend(foundation_DOMInput.prototype,{
	get_placeholder: function() {
		var this1 = this.el.attr("placeholder");
		if(this1 != null) return this1; else return "";
	}
	,set_placeholder: function(v) {
		this.el.attr("placeholder",v);
		return v;
	}
	,__class__: foundation_TextInput
	,__properties__: $extend(foundation_DOMInput.prototype.__properties__,{set_placeholder:"set_placeholder",get_placeholder:"get_placeholder"})
});
var foundation_styles__$Pos_Pos_$Impl_$ = {};
$hxClasses["foundation.styles._Pos.Pos_Impl_"] = foundation_styles__$Pos_Pos_$Impl_$;
foundation_styles__$Pos_Pos_$Impl_$.__name__ = ["foundation","styles","_Pos","Pos_Impl_"];
foundation_styles__$Pos_Pos_$Impl_$.__properties__ = {get_o:"get_o",set_type:"set_type",get_type:"get_type"}
foundation_styles__$Pos_Pos_$Impl_$._new = function(o) {
	return o;
};
foundation_styles__$Pos_Pos_$Impl_$.get_type = function(this1) {
	if(this1.type != null) return this1.type; else return "initial";
};
foundation_styles__$Pos_Pos_$Impl_$.set_type = function(this1,v) {
	return this1.type = v;
};
foundation_styles__$Pos_Pos_$Impl_$.get_o = function(this1) {
	return this1;
};
var gryffin_Tools = $hx_exports.gryfutils = function() { };
$hxClasses["gryffin.Tools"] = gryffin_Tools;
gryffin_Tools.__name__ = ["gryffin","Tools"];
gryffin_Tools.__properties__ = {get_win:"get_win",get_now:"get_now"}
gryffin_Tools.wait = function(ms,action) {
	return window.setTimeout(action,ms);
};
gryffin_Tools.defer = function(f) {
	window.setTimeout(f,10);
};
gryffin_Tools.makeUniqueIdentifier = function(digits) {
	var id = "";
	var r = new tannus_math_Random();
	var _g = 0;
	while(_g < digits) {
		var i = _g++;
		var range = [0,0];
		var letter = r.randbool();
		if(letter) {
			var upper = r.randbool();
			if(upper) range = [65,90]; else range = [97,122];
		} else range = [48,57];
		var c;
		var n = r.randint(range[0],range[1]);
		var this1;
		if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
		this1 = n;
		c = this1;
		id += String.fromCharCode(c);
	}
	if(Lambda.has(gryffin_Tools.used_idents,id)) return gryffin_Tools.makeUniqueIdentifier(digits); else {
		gryffin_Tools.used_idents.push(id);
		return id;
	}
};
gryffin_Tools.deleteUniqueIdentifier = function(id) {
	return HxOverrides.remove(gryffin_Tools.used_idents,id);
};
gryffin_Tools.get_now = function() {
	return new Date().getTime();
};
gryffin_Tools.get_win = function() {
	return window;
};
var gryffin_core_GlobalStyles = function(s) {
	this.stage = s;
	this.sheet = new tannus_css_StyleSheet();
	this.link = new tannus_dom_CElement("<link rel=\"stylesheet\" type=\"text/css\"/>");
	this.fontRules = [];
	this.initialize();
};
$hxClasses["gryffin.core.GlobalStyles"] = gryffin_core_GlobalStyles;
gryffin_core_GlobalStyles.__name__ = ["gryffin","core","GlobalStyles"];
gryffin_core_GlobalStyles.prototype = {
	fill: function() {
		this.sheet.rule("*",{ 'margin' : 0, 'padding' : 0});
		this.sheet.rule("body, html",{ 'height' : "100%"});
		this.sheet.rule("canvas",{ 'position' : "absolute", 'width' : "100%", 'height' : "100%"});
	}
	,addFont: function(name,href) {
		return this.sheet.fontFace(name,href);
	}
	,hasFont: function(name) {
		return this.sheet.hasFontFace(name);
	}
	,initialize: function() {
		var head = new tannus_dom_CElement("head");
		head.append(this.link);
		this.sheet._update.on($bind(this,this.update));
	}
	,getCSS: function() {
		return this.sheet.toByteArray();
	}
	,getBlob: function() {
		var dat = this.sheet.toByteArray();
		return new tannus_io_CBlob("stylesheet","text/css",dat);
	}
	,listen: function() {
		this.sheet._update.on($bind(this,this.update));
	}
	,update: function() {
		var blob = this.getBlob();
		var v = blob.toDataURL();
		this.link.setAttribute("href",v);
	}
	,__class__: gryffin_core_GlobalStyles
};
var gryffin_core_Selection = function(sel,entities) {
	this.selector = sel;
	this.all = entities;
	this.update();
};
$hxClasses["gryffin.core.Selection"] = gryffin_core_Selection;
gryffin_core_Selection.__name__ = ["gryffin","core","Selection"];
gryffin_core_Selection.prototype = {
	update: function() {
		this.selected = this.selector.filter(this.all());
	}
	,at: function(index) {
		return this.selected[index];
	}
	,iterator: function() {
		return HxOverrides.iter(this.selected);
	}
	,filter: function(sel) {
		var _g = this;
		return new gryffin_core_Selection(sel,function() {
			return _g.selected;
		});
	}
	,containsPoint: function(p) {
		var _g = this;
		var gettr = function() {
			return _g.all().filter(function(item) {
				return item.containsPoint(p);
			});
		};
		return new gryffin_core_Selection(this.selector,gettr);
	}
	,call: function(method,args) {
		if(args == null) args = [];
		var _g = 0;
		var _g1 = this.selected;
		while(_g < _g1.length) {
			var ent = _g1[_g];
			++_g;
			var e = tannus_ds_CObj.create(ent);
			var f = Reflect.getProperty(e.o,method);
			f = (function(f1,o,a1) {
				return function(a2) {
					return f1(o,a1,a2);
				};
			})(Reflect.callMethod,ent,f);
			try {
				f(args);
			} catch( error ) {
				if (error instanceof js__$Boot_HaxeError) error = error.val;
				throw new js__$Boot_HaxeError(error);
			}
		}
	}
	,cache: function() {
		var _g = 0;
		var _g1 = this.selected;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.cache();
		}
	}
	,uncache: function() {
		var _g = 0;
		var _g1 = this.selected;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.uncache();
		}
	}
	,hide: function() {
		var _g = 0;
		var _g1 = this.selected;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.hide();
		}
	}
	,show: function() {
		var _g = 0;
		var _g1 = this.selected;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.show();
		}
	}
	,'delete': function() {
		var _g = 0;
		var _g1 = this.selected;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item["delete"]();
		}
	}
	,children: function() {
		return new gryffin_core_Selection(new tannus_nore_CSelector("!String"),(function(f) {
			return function() {
				return f();
			};
		})($bind(this,this._selectedChildren)));
	}
	,_selectedChildren: function() {
		var results = [];
		var _g = 0;
		var _g1 = this.selected;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(e,gryffin_core_EntityContainer)) results = results.concat((js_Boot.__cast(e , gryffin_core_EntityContainer)).getChildren());
		}
		return results;
	}
	,get_length: function() {
		return this.selected.length;
	}
	,__class__: gryffin_core_Selection
	,__properties__: {get_length:"get_length"}
};
var gryffin_core_Stage = function(can) {
	this.noclear = false;
	gryffin_core_EventDispatcher.call(this);
	this.canvas = new gryffin_display_Canvas(can);
	this.children = [];
	this.registry = new haxe_ds_StringMap();
	this.styles = new gryffin_core_GlobalStyles(this);
	this.manager = new gryffin_events_FrameManager();
	this.mouseManager = new gryffin_events_MouseListener(this);
	this.keyManager = new gryffin_events_KeyListener(this);
	this.mouseWatcher = new gryffin_events_MouseWatcher(this);
	this.eventTimes = new haxe_ds_StringMap();
	this._fill = false;
	var this1 = window;
	this.lastWindowSize = new tannus_geom_CRectangle(this1.scrollX,this1.scrollY,this1.innerWidth,this1.innerHeight);
	this.__init();
};
$hxClasses["gryffin.core.Stage"] = gryffin_core_Stage;
gryffin_core_Stage.__name__ = ["gryffin","core","Stage"];
gryffin_core_Stage.__interfaces__ = [gryffin_core_Container];
gryffin_core_Stage.__properties__ = {get_window:"get_window"}
gryffin_core_Stage.get_window = function() {
	return window;
};
gryffin_core_Stage.__super__ = gryffin_core_EventDispatcher;
gryffin_core_Stage.prototype = $extend(gryffin_core_EventDispatcher.prototype,{
	attach: function(can) {
		this.canvas = new gryffin_display_Canvas(can);
		this.mouseManager.rebind();
	}
	,resize: function(w,h) {
		var _w = this.canvas.canvas.width;
		var _h = this.canvas.canvas.height;
		this.canvas.set_width(w);
		this.canvas.set_height(h);
		if(!(this.canvas.canvas.width == _w && this.canvas.canvas.height == _h)) {
			var o = [_w,_h];
			var n = [this.canvas.canvas.width,this.canvas.canvas.height];
			var event = new tannus_events_ResizeEvent(o,n);
			this.dispatch("resize",event);
		}
		this.calculateGeometry();
	}
	,addChild: function(child) {
		if(!Lambda.has(this.children,child)) {
			this.children.push(child);
			{
				this.registry.set(child.id,child);
				child;
			}
			child.stage = this;
			child.dispatch("activated",this);
		}
	}
	,hasChild: function(child) {
		return Lambda.has(this.children,child);
	}
	,fill: function() {
		this._fill = true;
		this.styles.fill();
	}
	,loadFontFace: function(family,source) {
		this.styles.addFont(family,source);
	}
	,isFontFaceLoaded: function(family) {
		return this.styles.hasFont(family);
	}
	,getMousePosition: function() {
		return this.mouseWatcher.getMousePosition();
	}
	,mostRecentOccurrenceTime: function(event) {
		return this.eventTimes.get(event);
	}
	,getEntitiesAtPoint: function(p,list) {
		return this.walk().filter(function(item) {
			return item.containsPoint(p);
		});
	}
	,getEntitiesAt: function(x,y) {
		return this.getEntitiesAtPoint(new tannus_geom_TPoint(x,y,0));
	}
	,getEntityAtPoint: function(p) {
		var start = new Date().getTime();
		var target = null;
		this.children.reverse();
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.containsPoint(p)) {
				target = e;
				if(js_Boot.__instanceof(e,gryffin_core_EntityContainer)) {
					var c = e;
					var etarget = c.getEntityAtPoint(p);
					if(etarget != null) target = etarget;
				}
				break;
			}
		}
		this.children.reverse();
		var took = new Date().getTime() - start;
		return target;
	}
	,getEntityAt: function(x,y) {
		return this.getEntityAtPoint(new tannus_geom_TPoint(x,y,0));
	}
	,frame: function(delta) {
		if(this._fill) {
			var vp;
			var this1 = window;
			vp = new tannus_geom_CRectangle(this1.scrollX,this1.scrollY,this1.innerWidth,this1.innerHeight);
			if(vp != this.lastWindowSize) {
				var cw = vp.width | 0;
				var ch = vp.height | 0;
				this.resize(cw,ch);
				this.lastWindowSize = vp;
			}
		}
		var filtr = tannus_ds_ArrayTools.splitfilter(this.children,function(e) {
			return !e.destroyed;
		});
		var _g = 0;
		var _g1 = filtr.fail;
		while(_g < _g1.length) {
			var ent = _g1[_g];
			++_g;
			this.registry.remove(ent.id);
		}
		this.children = filtr.pass;
		haxe_ds_ArraySort.sort(this.children,function(a,b) {
			return a.priority - b.priority;
		});
		if(!this.noclear) this.canvas._ctx.get().erase();
		var _g2 = 0;
		var _g11 = this.children;
		while(_g2 < _g11.length) {
			var child = _g11[_g2];
			++_g2;
			if(!child._cached) child.update(this);
			if(!child._hidden) child.render(this,this.canvas._ctx.get());
		}
		if(gryffin_fx_Animations.manager == this) gryffin_fx_Animations.tick();
	}
	,calculateGeometry: function() {
		var vp = new tannus_geom_CRectangle(0,0,this.canvas.canvas.width,this.canvas.canvas.height);
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			e.calculateGeometry(vp);
		}
	}
	,walk: function(list,ignore) {
		if(list == null) list = this.children;
		var res = [];
		var _g = 0;
		while(_g < list.length) {
			var ent = list[_g];
			++_g;
			if(ignore != null && ignore(ent)) continue; else {
				res.push(ent);
				res = res.concat(this.walk(ent.getChildren(),ignore));
			}
		}
		return res;
	}
	,tree: function(list,kids) {
		if(list == null) list = [];
		if(kids == null) kids = this.children;
		kids.reverse();
		var _g = 0;
		while(_g < kids.length) {
			var child = kids[_g];
			++_g;
			if(js_Boot.__instanceof(child,gryffin_core_EntityContainer)) {
				var c = child;
				var sub = this.tree(list,c.getChildren());
				list.push([child,sub]);
			} else list.push(child);
		}
		kids.reverse();
		return list;
	}
	,get: function(sel) {
		var _g = this;
		return new gryffin_core_Selection(new tannus_nore_CSelector(sel),function() {
			return _g.walk();
		});
	}
	,mouseEvent: function(e) {
		this.dispatch(e.type,e);
		if(e._cancelled || e._propogationStopped) return;
		var finalTarget = this.getEntityAtPoint(e.position);
		if(finalTarget != null && !(finalTarget.isHidden() || finalTarget.isCached() || finalTarget.destroyed)) {
			var eventPath = [];
			var currentTarget = finalTarget;
			eventPath.unshift(currentTarget);
			while(currentTarget.parent != null) {
				currentTarget = currentTarget.parent;
				eventPath.unshift(currentTarget);
			}
			var _g = 0;
			while(_g < eventPath.length) {
				var target = eventPath[_g];
				++_g;
				target.dispatch(e.type,e);
				if(e._cancelled || e._propogationStopped) break;
			}
		}
	}
	,__init: function() {
		this.__events();
		gryffin_fx_Animations.claim(this);
	}
	,__events: function() {
		this.manager.frame.listen($bind(this,this.frame),false);
		this.manager.start();
	}
	,dispatch: function(name,data) {
		gryffin_core_EventDispatcher.prototype.dispatch.call(this,name,data);
		var value = new Date().getTime();
		this.eventTimes.set(name,value);
	}
	,get_width: function() {
		return this.canvas.canvas.width;
	}
	,set_width: function(v) {
		this.resize(v,this.canvas.canvas.height);
		return this.canvas.canvas.width;
	}
	,get_height: function() {
		return this.canvas.canvas.height;
	}
	,set_height: function(v) {
		this.resize(this.canvas.canvas.width,v);
		return this.canvas.canvas.height;
	}
	,get_rect: function() {
		return new tannus_geom_CRectangle(0,0,this.canvas.canvas.width,this.canvas.canvas.height);
	}
	,set_rect: function(v) {
		this.resize(Math.round(v.width),Math.round(v.height));
		return new tannus_geom_CRectangle(0,0,this.canvas.canvas.width,this.canvas.canvas.height);
	}
	,get_cursor: function() {
		return this.canvas.canvas.style.cursor;
	}
	,set_cursor: function(v) {
		return this.canvas.canvas.style.cursor = v;
	}
	,get_ctx: function() {
		return this.canvas._ctx.get();
	}
	,__class__: gryffin_core_Stage
	,__properties__: {get_ctx:"get_ctx",set_cursor:"set_cursor",get_cursor:"get_cursor",set_rect:"set_rect",get_rect:"get_rect",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width"}
});
var gryffin_display_Canvas = function(c) {
	var _g = this;
	if(c != null) this.canvas = c; else {
		var _this = window.document;
		this.canvas = _this.createElement("canvas");
	}
	this._ctx = new tannus_ds_CRef(function() {
		var c1 = _g.canvas.getContext("2d",null);
		return new gryffin_display_Context(c1);
	});
};
$hxClasses["gryffin.display.Canvas"] = gryffin_display_Canvas;
gryffin_display_Canvas.__name__ = ["gryffin","display","Canvas"];
gryffin_display_Canvas.__interfaces__ = [gryffin_display_Paintable];
gryffin_display_Canvas.create = function(w,h) {
	var can = new gryffin_display_Canvas();
	can.resize(w,h);
	return can;
};
gryffin_display_Canvas.prototype = {
	resize: function(w,h) {
		var _g = this;
		this.canvas.width = w;
		this.canvas.height = h;
		this._ctx = new tannus_ds_CRef(function() {
			var c = _g.canvas.getContext("2d",null);
			return new gryffin_display_Context(c);
		});
	}
	,resized: function(w,h) {
		var copy = gryffin_display_Canvas.create(Math.floor(w),Math.floor(h));
		copy._ctx.get().drawImage(this.canvas,0,0,this.canvas.width,this.canvas.height,0,0,copy.canvas.width,copy.canvas.height);
		return copy;
	}
	,scale: function(w,h) {
		if(h == null) h = w;
		var copy = gryffin_display_Canvas.create(Math.floor(w * this.canvas.width),Math.floor(h * this.canvas.height));
		copy._ctx.get().drawImage(this.canvas,0,0,this.canvas.width,this.canvas.height,0,0,copy.canvas.width,copy.canvas.height);
		return copy;
	}
	,paint: function(c,src,dest) {
		c.drawImage(this.canvas,src.x,src.y,src.width,src.height,dest.x,dest.y,dest.width,dest.height);
	}
	,dataURI: function(type) {
		return this.canvas.toDataURL(type);
	}
	,toBlob: function(cb,type) {
		this.canvas.toBlob(function(b) {
			var readr = new FileReader();
			readr.onload = function(e) {
				var data = tannus_io_impl_BrowserBinary.ofData(e.target.result);
				var blob = new tannus_io_CBlob("blob",type == null?"image/png":type,data);
				cb(blob);
			};
			readr.readAsArrayBuffer(b);
		},type);
	}
	,getImage: function(cb) {
		return gryffin_display_Image.load(this.dataURI(),cb);
	}
	,get_width: function() {
		return this.canvas.width;
	}
	,set_width: function(v) {
		this.resize(v,this.canvas.height);
		return this.canvas.width;
	}
	,get_height: function() {
		return this.canvas.height;
	}
	,set_height: function(v) {
		this.resize(this.canvas.width,v);
		return this.canvas.height;
	}
	,get_context: function() {
		return this._ctx.get();
	}
	,get_pixels: function() {
		return this._ctx.get().pixels(0,0,this.canvas.width,this.canvas.height);
	}
	,__class__: gryffin_display_Canvas
	,__properties__: {get_pixels:"get_pixels",get_context:"get_context",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width"}
};
var gryffin_display_Context = function(ctx) {
	this.ctx = ctx;
};
$hxClasses["gryffin.display.Context"] = gryffin_display_Context;
gryffin_display_Context.__name__ = ["gryffin","display","Context"];
gryffin_display_Context.prototype = {
	erase: function() {
		this.ctx.clearRect(0,0,this.get_width(),this.get_height());
	}
	,paint: function(comp,src,dest) {
		comp.paint(new gryffin_display_Context(this.ctx),src,dest);
	}
	,drawComponent: function(comp,sx,sy,sw,sh,dx,dy,dw,dh) {
		var src = new tannus_geom_CRectangle(sx,sy,sw,sh);
		var dest = new tannus_geom_CRectangle(dx,dy,dw,dh);
		comp.paint(new gryffin_display_Context(this.ctx),src,dest);
	}
	,drawVertices: function(vertices) {
		gryffin_display_CtxTools.drawVertices(new gryffin_display_Context(this.ctx),vertices);
	}
	,save: function() {
		this.ctx.save();
	}
	,restore: function() {
		this.ctx.restore();
	}
	,scale: function(x,y) {
		this.ctx.scale(x,y);
	}
	,rotate: function(angle) {
		this.ctx.rotate(angle);
	}
	,translate: function(x,y) {
		this.ctx.translate(x,y);
	}
	,transform: function(a,b,c,d,e,f) {
		this.ctx.transform(a,b,c,d,e,f);
	}
	,setTransform: function(a,b,c,d,e,f) {
		this.ctx.setTransform(a,b,c,d,e,f);
	}
	,resetTransform: function() {
		this.ctx.resetTransform();
	}
	,createLinearGradient: function(x0,y0,x1,y1) {
		return this.ctx.createLinearGradient(x0,y0,x1,y1);
	}
	,createRadialGradient: function(x0,y0,r0,x1,y1,r1) {
		return this.ctx.createRadialGradient(x0,y0,r0,x1,y1,r1);
	}
	,clearRect: function(x,y,w,h) {
		this.ctx.clearRect(x,y,w,h);
	}
	,fillRect: function(x,y,w,h) {
		this.ctx.fillRect(x,y,w,h);
	}
	,strokeRect: function(x,y,w,h) {
		this.ctx.strokeRect(x,y,w,h);
	}
	,beginPath: function() {
		this.ctx.beginPath();
	}
	,fill: function() {
		this.ctx.fill();
	}
	,stroke: function() {
		this.ctx.stroke();
	}
	,drawFocusIfNeeded: function(element) {
		this.ctx.drawFocusIfNeeded(element);
	}
	,drawCustomFocusRing: function(element) {
		return this.ctx.drawCustomFocusRing(element);
	}
	,clip: function() {
		this.ctx.clip();
	}
	,isPointInPath: function(path,x,y,winding) {
		return this.ctx.isPointInPath(path,x,y,winding);
	}
	,isPointInStroke: function(path,x,y) {
		return this.ctx.isPointInStroke(path,x,y);
	}
	,fillText: function(text,x,y,maxWidth) {
		if(maxWidth != null) this.ctx.fillText(text,x,y,maxWidth); else this.ctx.fillText(text,x,y);
	}
	,strokeText: function(text,x,y,maxWidth) {
		if(maxWidth != null) this.ctx.strokeText(text,x,y,maxWidth); else this.ctx.strokeText(text,x,y);
	}
	,measureText: function(text) {
		return gryffin_display_CtxTools.patchedMeasureText(this.ctx,text);
	}
	,drawImage: function(image,sx,sy,sw,sh,dx,dy,dw,dh) {
		this.ctx.drawImage(image,sx,sy,sw,sh,dx,dy,dw,dh);
	}
	,addHitRegion: function(options) {
		this.ctx.addHitRegion(options);
	}
	,removeHitRegion: function(id) {
		this.ctx.removeHitRegion(id);
	}
	,clearHitRegions: function() {
		this.ctx.clearHitRegions();
	}
	,createImageData: function(imagedata) {
		return this.ctx.createImageData(imagedata);
	}
	,getImageData: function(sx,sy,sw,sh) {
		return this.ctx.getImageData(sx,sy,sw,sh);
	}
	,pixels: function(x,y,w,h) {
		var idata = this.getImageData(x,y,w,h);
		var pos = new tannus_geom_TPoint(x,y,0);
		return new gryffin_display_Pixels(this,pos,idata);
	}
	,putImageData: function(imagedata,dx,dy,dirtyX,dirtyY,dirtyWidth,dirtyHeight) {
		this.ctx.putImageData(imagedata,dx,dy,dirtyX,dirtyY,dirtyWidth,dirtyHeight);
	}
	,setLineDash: function(segments) {
		this.ctx.setLineDash(segments);
	}
	,getLineDash: function() {
		return this.ctx.getLineDash();
	}
	,closePath: function() {
		this.ctx.closePath();
	}
	,moveTo: function(x,y) {
		this.ctx.moveTo(x,y);
	}
	,moveToPoint: function(p) {
		this.moveTo(p.get_x(),p.get_y());
	}
	,lineTo: function(x,y) {
		this.ctx.lineTo(x,y);
	}
	,lineToPoint: function(p) {
		this.lineTo(p.get_x(),p.get_y());
	}
	,quadraticCurveTo: function(cpx,cpy,x,y) {
		this.ctx.quadraticCurveTo(cpx,cpy,x,y);
	}
	,bezierCurveTo: function(cp1x,cp1y,cp2x,cp2y,x,y) {
		this.ctx.bezierCurveTo(cp1x,cp1y,cp2x,cp2y,x,y);
	}
	,arcTo: function(x1,y1,x2,y2,radius) {
		this.ctx.arcTo(x1,y1,x2,y2,radius);
	}
	,rect: function(x,y,w,h) {
		this.ctx.rect(x,y,w,h);
	}
	,drawRect: function(r) {
		this.ctx.rect(r.x,r.y,r.width,r.height);
	}
	,drawTriangle: function(t) {
		this.moveToPoint(t.one);
		this.lineToPoint(t.two);
		this.lineToPoint(t.three);
		this.lineToPoint(t.one);
	}
	,drawLine: function(line) {
		this.moveToPoint(line.one);
		this.lineToPoint(line.two);
	}
	,roundRect: function(x,y,w,h,r) {
		this.ctx.moveTo(x + r,y);
		this.ctx.lineTo(x + w - r,y);
		this.ctx.quadraticCurveTo(x + w,y,x + w,y + r);
		this.ctx.lineTo(x + w,y + h - r);
		this.ctx.quadraticCurveTo(x + w,y + h,x + w - r,y + h);
		this.ctx.lineTo(x + r,y + h);
		this.ctx.quadraticCurveTo(x,y + h,x,y + h - r);
		this.ctx.lineTo(x,y + r);
		this.ctx.quadraticCurveTo(x,y,x + r,y);
	}
	,drawRoundRect: function(rect,radius) {
		this.roundRect(rect.x,rect.y,rect.width,rect.height,radius);
	}
	,arc: function(x,y,radius,startAngle,endAngle,anticlockwise) {
		this.ctx.arc(x,y,radius,startAngle,endAngle,anticlockwise);
	}
	,get_canvas: function() {
		return this.ctx.canvas;
	}
	,get_globalAlpha: function() {
		return this.ctx.globalAlpha;
	}
	,set_globalAlpha: function(v) {
		return this.ctx.globalAlpha = v;
	}
	,get_globalCompositeOperation: function() {
		return this.ctx.globalCompositeOperation;
	}
	,set_globalCompositeOperation: function(v) {
		return this.ctx.globalCompositeOperation = v;
	}
	,get_strokeStyle: function() {
		return this.ctx.strokeStyle;
	}
	,set_strokeStyle: function(v) {
		return this.ctx.strokeStyle = v;
	}
	,get_fillStyle: function() {
		return this.ctx.fillStyle;
	}
	,set_fillStyle: function(v) {
		return this.ctx.fillStyle = v;
	}
	,get_shadowOffsetX: function() {
		return this.ctx.shadowOffsetX;
	}
	,set_shadowOffsetX: function(v) {
		return this.ctx.shadowOffsetX = v;
	}
	,get_shadowOffsetY: function() {
		return this.ctx.shadowOffsetY;
	}
	,set_shadowOffsetY: function(v) {
		return this.ctx.shadowOffsetY = v;
	}
	,get_shadowBlur: function() {
		return this.ctx.shadowBlur;
	}
	,set_shadowBlur: function(v) {
		return this.ctx.shadowBlur = v;
	}
	,get_shadowColor: function() {
		return this.ctx.shadowColor;
	}
	,set_shadowColor: function(v) {
		return this.ctx.shadowColor = v;
	}
	,get_filter: function() {
		return this.ctx.filter;
	}
	,set_filter: function(v) {
		return this.ctx.filter = v;
	}
	,get_imageSmoothingEnabled: function() {
		return this.ctx.imageSmoothingEnabled;
	}
	,set_imageSmoothingEnabled: function(v) {
		return this.ctx.imageSmoothingEnabled = v;
	}
	,get_lineWidth: function() {
		return this.ctx.lineWidth;
	}
	,set_lineWidth: function(v) {
		return this.ctx.lineWidth = v;
	}
	,get_lineCap: function() {
		return this.ctx.lineCap;
	}
	,set_lineCap: function(v) {
		return this.ctx.lineCap = v;
	}
	,get_lineJoin: function() {
		return this.ctx.lineJoin;
	}
	,set_lineJoin: function(v) {
		return this.ctx.lineJoin = v;
	}
	,get_miterLimit: function() {
		return this.ctx.miterLimit;
	}
	,set_miterLimit: function(v) {
		return this.ctx.miterLimit = v;
	}
	,get_lineDashOffset: function() {
		return this.ctx.lineDashOffset;
	}
	,set_lineDashOffset: function(v) {
		return this.ctx.lineDashOffset = v;
	}
	,get_font: function() {
		return this.ctx.font;
	}
	,set_font: function(v) {
		return this.ctx.font = v;
	}
	,get_textAlign: function() {
		return this.ctx.textAlign;
	}
	,set_textAlign: function(v) {
		return this.ctx.textAlign = v;
	}
	,get_textBaseline: function() {
		return this.ctx.textBaseline;
	}
	,set_textBaseline: function(v) {
		return this.ctx.textBaseline = v;
	}
	,get_width: function() {
		return this.get_canvas().width;
	}
	,get_height: function() {
		return this.get_canvas().height;
	}
	,__class__: gryffin_display_Context
	,__properties__: {get_height:"get_height",get_width:"get_width",set_textBaseline:"set_textBaseline",get_textBaseline:"get_textBaseline",set_textAlign:"set_textAlign",get_textAlign:"get_textAlign",set_font:"set_font",get_font:"get_font",set_lineDashOffset:"set_lineDashOffset",get_lineDashOffset:"get_lineDashOffset",set_miterLimit:"set_miterLimit",get_miterLimit:"get_miterLimit",set_lineJoin:"set_lineJoin",get_lineJoin:"get_lineJoin",set_lineCap:"set_lineCap",get_lineCap:"get_lineCap",set_lineWidth:"set_lineWidth",get_lineWidth:"get_lineWidth",set_imageSmoothingEnabled:"set_imageSmoothingEnabled",get_imageSmoothingEnabled:"get_imageSmoothingEnabled",set_filter:"set_filter",get_filter:"get_filter",set_shadowColor:"set_shadowColor",get_shadowColor:"get_shadowColor",set_shadowBlur:"set_shadowBlur",get_shadowBlur:"get_shadowBlur",set_shadowOffsetY:"set_shadowOffsetY",get_shadowOffsetY:"get_shadowOffsetY",set_shadowOffsetX:"set_shadowOffsetX",get_shadowOffsetX:"get_shadowOffsetX",set_fillStyle:"set_fillStyle",get_fillStyle:"get_fillStyle",set_strokeStyle:"set_strokeStyle",get_strokeStyle:"get_strokeStyle",set_globalCompositeOperation:"set_globalCompositeOperation",get_globalCompositeOperation:"get_globalCompositeOperation",set_globalAlpha:"set_globalAlpha",get_globalAlpha:"get_globalAlpha",get_canvas:"get_canvas"}
};
var gryffin_display__$Ctx_Ctx_$Impl_$ = {};
$hxClasses["gryffin.display._Ctx.Ctx_Impl_"] = gryffin_display__$Ctx_Ctx_$Impl_$;
gryffin_display__$Ctx_Ctx_$Impl_$.__name__ = ["gryffin","display","_Ctx","Ctx_Impl_"];
gryffin_display__$Ctx_Ctx_$Impl_$._new = function(c) {
	return new gryffin_display_Context(c);
};
gryffin_display__$Ctx_Ctx_$Impl_$.fromC2d = function(c) {
	return new gryffin_display_Context(c);
};
var gryffin_display_CtxTools = function() { };
$hxClasses["gryffin.display.CtxTools"] = gryffin_display_CtxTools;
gryffin_display_CtxTools.__name__ = ["gryffin","display","CtxTools"];
gryffin_display_CtxTools.patchedMeasureText = function(c,txt) {
	var font = c.font;
	var w = c.measureText(txt).width;
	var th = gryffin_display_CtxTools.getTextHeight(font);
	return { 'width' : w, 'height' : th.height, 'ascent' : th.ascent, 'descent' : th.descent};
};
gryffin_display_CtxTools.getTextHeight = function(font) {
	var doc = window.document;
	var span = doc.createElement("span");
	span.style.font = font;
	span.textContent = "Hg";
	var block = doc.createElement("div");
	block.style.display = "inline-block";
	block.style.width = "1px";
	block.style.height = "0px";
	var div = doc.createElement("div");
	div.appendChild(span);
	div.appendChild(block);
	var body = doc.body;
	body.appendChild(div);
	var result = { 'ascent' : 0.0, 'descent' : 0.0, 'height' : 0.0};
	try {
		var bo = (function(f,e) {
			return function() {
				return f(e);
			};
		})(gryffin_display_CtxTools.offset,block);
		var so = (function(f1,e1) {
			return function() {
				return f1(e1);
			};
		})(gryffin_display_CtxTools.offset,span);
		var align = new tannus_io__$Pointer_Ref(function() {
			return block.style.verticalAlign;
		},function(v) {
			return block.style.verticalAlign = v;
		});
		align.set("baseline");
		result.ascent = bo().top - so().top;
		align.set("bottom");
		result.height = bo().top - so().top;
		result.descent = result.height - result.ascent;
		div.remove();
		return result;
	} catch( err ) {
		if (err instanceof js__$Boot_HaxeError) err = err.val;
		console.log(err);
		div.remove();
	}
	return result;
};
gryffin_display_CtxTools.offset = function(e) {
	try {
		var rect = e.getBoundingClientRect();
		var win = window;
		var doc = win.document.documentElement;
		return { 'top' : rect.top + win.pageYOffset - doc.clientTop, 'left' : rect.left + win.pageXOffset - doc.clientLeft};
	} catch( error ) {
		if (error instanceof js__$Boot_HaxeError) error = error.val;
		console.log(error);
		return { 'top' : 0, 'left' : 0};
	}
};
gryffin_display_CtxTools.drawVertices = function(c,vertices) {
	var points;
	{
		var _g = [];
		var $it0 = vertices.iterator();
		while( $it0.hasNext() ) {
			var p = $it0.next();
			_g.push(p.clone());
		}
		points = _g;
	}
	var first = points.shift();
	c.moveTo(first.get_x(),first.get_y());
	var _g1 = 0;
	while(_g1 < points.length) {
		var p1 = points[_g1];
		++_g1;
		c.lineTo(p1.get_x(),p1.get_y());
	}
	c.lineTo(first.get_x(),first.get_y());
};
gryffin_display_CtxTools.applyMatrix = function(c,m) {
	if(m.a == 1 && m.b == 0 && m.c == 0 && m.d == 1) c.translate(m.tx,m.ty); else c.setTransform(m.a,m.b,m.c,m.d,m.tx,m.ty);
};
gryffin_display_CtxTools.obtainMatrix = function(c) {
	return new tannus_geom_Matrix();
};
var gryffin_display_Image = function(i) {
	if(i != null) this.img = i; else this.img = (function($this) {
		var $r;
		var _this = window.document;
		$r = _this.createElement("img");
		return $r;
	}(this));
	this.ready = new tannus_io_VoidSignal();
	this.targetWidth = this.targetHeight = 0;
	this.__init();
};
$hxClasses["gryffin.display.Image"] = gryffin_display_Image;
gryffin_display_Image.__name__ = ["gryffin","display","Image"];
gryffin_display_Image.__interfaces__ = [gryffin_display_Paintable];
gryffin_display_Image.load = function(src,cb) {
	if(!gryffin_display_Image.registry.exists(src)) {
		var img = new gryffin_display_Image();
		if(cb != null) img.ready.once(function() {
			cb(img);
		});
		img.img.src = src;
		{
			gryffin_display_Image.registry.set(src,img);
			img;
		}
		return img;
	} else {
		var img1 = gryffin_display_Image.registry.get(src);
		if(cb != null) (img1.img.complete && img1.img.src != null && img1.img.src != ""?gryffin_Tools.defer:($_=img1.ready,$bind($_,$_.once)))((function(f,a1) {
			return function() {
				f(a1);
			};
		})(cb,img1));
		return img1;
	}
};
gryffin_display_Image.prototype = {
	__init: function() {
		var _g = this;
		this.img.onload = function() {
			_g.ready.call();
		};
		this.img.onerror = function(err) {
			window.console.error(err);
		};
		if(this.img.complete) gryffin_Tools.defer(($_=this.ready,$bind($_,$_.fire)));
	}
	,toCanvas: function() {
		var _g = this;
		var can = gryffin_display_Canvas.create(this.targetWidth,this.targetHeight);
		var c = can._ctx.get();
		if(this.img.complete && this.img.src != null && this.img.src != "") {
			can.resize(this.img.naturalWidth,this.img.naturalHeight);
			c = can._ctx.get();
			c.drawComponent(this,0,0,this.img.naturalWidth,this.img.naturalHeight,0,0,this.img.naturalWidth,this.img.naturalHeight);
		} else {
			c.ctx.save();
			c.set_fillStyle("#000000");
			c.fillRect(0,0,this.targetWidth,this.targetHeight);
			c.ctx.restore();
			this.ready.once(function() {
				can.resize(_g.img.naturalWidth,_g.img.naturalHeight);
				c = can._ctx.get();
				c.drawComponent(_g,0,0,_g.img.naturalWidth,_g.img.naturalHeight,0,0,_g.img.naturalWidth,_g.img.naturalHeight);
			});
		}
		return can;
	}
	,paint: function(c,s,d) {
		c.drawImage(this.img,s.x,s.y,s.width,s.height,d.x,d.y,d.width,d.height);
	}
	,rotate: function(angle) {
		var r = new tannus_geom_CRectangle(0,0,this.img.naturalWidth,this.img.naturalHeight);
		var rr = this.rotatedSize(angle);
		var can = gryffin_display_Canvas.create(Math.floor(rr.width),Math.floor(rr.height));
		var cr = new tannus_geom_CRectangle(0,0,can.canvas.width,can.canvas.height);
		var c = can._ctx.get();
		c.ctx.save();
		c.ctx.translate(cr.x + cr.width / 2,cr.y + cr.height / 2);
		c.ctx.rotate(angle.v * Math.PI / 180);
		c.ctx.translate(-(cr.x + cr.width / 2),-(cr.y + cr.height / 2));
		c.drawImage(this.img,0,0,this.img.naturalWidth,this.img.naturalHeight,0,0,cr.width,cr.height);
		c.ctx.restore();
		return can;
	}
	,rotatedSize: function(angle) {
		var r = angle.v * Math.PI / 180;
		var a = this.img.naturalWidth * Math.cos(r);
		var b = this.img.naturalHeight * Math.sin(r);
		var rotatedWidth = a + b;
		var p = this.img.naturalWidth * Math.sin(r);
		var q = this.img.naturalHeight * Math.cos(r);
		var rotatedHeight = p + q;
		return new tannus_geom_CRectangle(0,0,rotatedWidth,rotatedHeight);
	}
	,get_src: function() {
		return this.img.src;
	}
	,set_src: function(v) {
		return this.img.src = v;
	}
	,get_width: function() {
		return this.img.naturalWidth;
	}
	,get_height: function() {
		return this.img.naturalHeight;
	}
	,get_rect: function() {
		return new tannus_geom_CRectangle(0,0,this.img.naturalWidth,this.img.naturalHeight);
	}
	,get_complete: function() {
		return this.img.complete && this.img.src != null && this.img.src != "";
	}
	,__class__: gryffin_display_Image
	,__properties__: {get_complete:"get_complete",get_rect:"get_rect",get_height:"get_height",get_width:"get_width",set_src:"set_src",get_src:"get_src"}
};
var gryffin_display_Pixel = function(s,p) {
	this.src = s;
	this.pos = p;
};
$hxClasses["gryffin.display.Pixel"] = gryffin_display_Pixel;
gryffin_display_Pixel.__name__ = ["gryffin","display","Pixel"];
gryffin_display_Pixel.prototype = {
	hsl: function() {
		return this.get_c().toHsl();
	}
	,hue: function() {
		return this.get_c().toHsl().hue;
	}
	,saturation: function() {
		return this.get_c().toHsl().saturation;
	}
	,lightness: function() {
		return this.get_c().toHsl().lightness;
	}
	,luminance: function() {
		return this.get_c().luminance();
	}
	,brightness: function() {
		return this.get_c().brightness();
	}
	,greyscale: function() {
		this.set_color(this.src.getAtPos(this.pos.get_x(),this.pos.get_y()).greyscale());
	}
	,rel: function(x,y) {
		var rx = this.pos.get_x() + x;
		var ry = this.pos.get_y() + y;
		if(rx <= this.src.idata.width && ry <= this.src.idata.height) return new gryffin_display_Pixel(this.src,new tannus_geom_TPoint(rx,ry,0)); else return null;
	}
	,get_color: function() {
		return this.src.getAtPos(this.pos.get_x(),this.pos.get_y());
	}
	,set_color: function(v) {
		return this.src.setAtPos(this.pos.get_x(),this.pos.get_y(),v);
	}
	,get_red: function() {
		return this.src.get_red(this.pos.get_x(),this.pos.get_y());
	}
	,set_red: function(v) {
		return this.src.set_red(this.pos.get_x(),this.pos.get_y(),v);
	}
	,get_green: function() {
		return this.src.get_green(this.pos.get_x(),this.pos.get_y());
	}
	,set_green: function(v) {
		return this.src.set_green(this.pos.get_x(),this.pos.get_y(),v);
	}
	,get_blue: function() {
		return this.src.get_blue(this.pos.get_x(),this.pos.get_y());
	}
	,set_blue: function(v) {
		return this.src.set_blue(this.pos.get_x(),this.pos.get_y(),v);
	}
	,get_alpha: function() {
		return this.src.get_alpha(this.pos.get_x(),this.pos.get_y());
	}
	,set_alpha: function(v) {
		return this.src.set_alpha(this.pos.get_x(),this.pos.get_y(),v);
	}
	,get_top: function() {
		return this.rel(0,-1);
	}
	,get_right: function() {
		return this.rel(1,0);
	}
	,get_bottom: function() {
		return this.rel(0,1);
	}
	,get_left: function() {
		return this.rel(-1,0);
	}
	,get_c: function() {
		var r = this.src.get_red(this.pos.get_x(),this.pos.get_y());
		var g = this.src.get_green(this.pos.get_x(),this.pos.get_y());
		var b = this.src.get_blue(this.pos.get_x(),this.pos.get_y());
		var a = this.src.get_alpha(this.pos.get_x(),this.pos.get_y());
		return new tannus_graphics__$Color_TColor(r,g,b,a);
	}
	,__class__: gryffin_display_Pixel
	,__properties__: {get_c:"get_c",get_left:"get_left",get_bottom:"get_bottom",get_right:"get_right",get_top:"get_top",set_alpha:"set_alpha",get_alpha:"get_alpha",set_blue:"set_blue",get_blue:"get_blue",set_green:"set_green",get_green:"get_green",set_red:"set_red",get_red:"get_red",set_color:"set_color",get_color:"get_color"}
};
var gryffin_display_Pixels = function(owner,position,dat) {
	this.c = owner;
	this.idata = dat;
	this.data = this.idata.data;
	this.pos = position;
};
$hxClasses["gryffin.display.Pixels"] = gryffin_display_Pixels;
gryffin_display_Pixels.__name__ = ["gryffin","display","Pixels"];
gryffin_display_Pixels.__interfaces__ = [gryffin_display_Paintable];
gryffin_display_Pixels.prototype = {
	paint: function(c,s,d) {
		c.ctx.putImageData(this.idata,s.x,s.y,d.x,d.y,d.width,d.height);
	}
	,at: function(x,y) {
		return new gryffin_display_Pixel(this,new tannus_geom_TPoint(x,y,0));
	}
	,ati: function(index) {
		return new gryffin_display_Pixel(this,new tannus_geom_TPoint(index % this.idata.width,index / this.idata.width,0));
	}
	,getColor: function(xi,y) {
		if(y == null) return this.getAtIndex(xi | 0); else return this.getAtIndex((xi | 0) + (y | 0) * this.idata.width);
	}
	,getAtPos: function(x,y) {
		return this.getAtIndex((x | 0) + (y | 0) * this.idata.width);
	}
	,getAtIndex: function(i) {
		i *= 4;
		var col = new tannus_graphics__$Color_TColor(this.data[i],this.data[i + 1],this.data[i + 2],this.data[i + 3]);
		return col;
	}
	,setAtIndex: function(i,color) {
		i *= 4;
		this.data[i] = color.get_red();
		this.data[i + 1] = color.get_green();
		this.data[i + 2] = color.get_blue();
		if(color.get_alpha() != null) this.data[i + 3] = color.get_alpha(); else this.data[i + 3] = 0;
		return color;
	}
	,setAtPos: function(x,y,color) {
		return this.setAtIndex((x | 0) + (y | 0) * this.idata.width,color);
	}
	,setColor: function(x,y,color) {
		return this.setAtIndex((x | 0) + (y | 0) * this.idata.width,color);
	}
	,get_red: function(x,y) {
		return this.data[((x | 0) + (y | 0) * this.idata.width) * 4];
	}
	,get_green: function(x,y) {
		return this.data[((x | 0) + (y | 0) * this.idata.width) * 4 + 1];
	}
	,get_blue: function(x,y) {
		return this.data[((x | 0) + (y | 0) * this.idata.width) * 4 + 2];
	}
	,get_alpha: function(x,y) {
		return this.data[((x | 0) + (y | 0) * this.idata.width) * 4 + 3];
	}
	,set_red: function(x,y,val) {
		return this.data[((x | 0) + (y | 0) * this.idata.width) * 4] = val;
	}
	,set_green: function(x,y,val) {
		return this.data[((x | 0) + (y | 0) * this.idata.width) * 4 + 1] = val;
	}
	,set_blue: function(x,y,val) {
		return this.data[((x | 0) + (y | 0) * this.idata.width) * 4 + 2] = val;
	}
	,set_alpha: function(x,y,val) {
		return this.data[((x | 0) + (y | 0) * this.idata.width) * 4 + 3] = val;
	}
	,index: function(x,y) {
		return (x | 0) + (y | 0) * this.idata.width;
	}
	,coords: function(index) {
		return [index % this.idata.width + 0.0,index / this.idata.width];
	}
	,write: function(target,x,y,sx,sy,sw,sh) {
		if(sy == null) sy = 0;
		if(sx == null) sx = 0;
		target.ctx.putImageData(this.idata,x,y,sx,sy,sw != null?sw:this.idata.width,sh != null?sh:this.idata.height);
	}
	,save: function() {
		this.write(this.c,this.pos.get_x(),this.pos.get_y());
	}
	,iterator: function() {
		return new gryffin_display_PixelsIterator(this);
	}
	,skim: function(jump) {
		return new gryffin_display_PixelsIterator(this,jump);
	}
	,getAverageColor: function() {
		var c = null;
		var $it0 = this.skim(25);
		while( $it0.hasNext() ) {
			var pixel = $it0.next();
			if(c == null) c = pixel.src.getAtPos(pixel.pos.get_x(),pixel.pos.get_y()); else {
				var other = pixel.src.getAtPos(pixel.pos.get_x(),pixel.pos.get_y());
				c = c.mix(other,50);
			}
		}
		return c;
	}
	,get_width: function() {
		return this.idata.width;
	}
	,get_height: function() {
		return this.idata.height;
	}
	,get_length: function() {
		return this.data.length / 4 | 0;
	}
	,__class__: gryffin_display_Pixels
	,__properties__: {get_length:"get_length",get_height:"get_height",get_width:"get_width"}
};
var gryffin_display_PixelsIterator = function(p,j) {
	if(j == null) j = 1;
	this.src = p;
	this.i = 0;
	this.step = j;
};
$hxClasses["gryffin.display.PixelsIterator"] = gryffin_display_PixelsIterator;
gryffin_display_PixelsIterator.__name__ = ["gryffin","display","PixelsIterator"];
gryffin_display_PixelsIterator.prototype = {
	hasNext: function() {
		return this.i < (this.src.data.length / 4 | 0);
	}
	,next: function() {
		var _i = this.i;
		this.i += this.step;
		return this.src.ati(_i);
	}
	,__class__: gryffin_display_PixelsIterator
};
var gryffin_display_TextBox = function() {
	this.cache = true;
	this.onStateChanged = new tannus_io_VoidSignal();
	this.onTextChanged = new tannus_io_VoidSignal();
	this.txt = "";
	this.multiline = false;
	this.wordWrap = null;
	this.stateChanged = true;
	this.canvas = new gryffin_display_Canvas();
	this.set_padding(0);
	this.set_fontFamily("Arial");
	this.set_fontSize(12);
	this.set_fontSizeUnit("pt");
	this._color = new tannus_graphics__$Color_TColor(0,0,0,null);
	this._backgroundColor = null;
	this._align = "start";
	this._bold = false;
	this._italic = false;
};
$hxClasses["gryffin.display.TextBox"] = gryffin_display_TextBox;
gryffin_display_TextBox.__name__ = ["gryffin","display","TextBox"];
gryffin_display_TextBox.__interfaces__ = [gryffin_display_Paintable];
gryffin_display_TextBox.prototype = {
	paint: function(c,s,d) {
		if(this.cache) c.paint(this.toCanvas(),s,d); else if(this.multiline) {
			this.measure();
			var w = Math.round(this.get_textWidth() + this.get_padding() * 2);
			var h = Math.round(this.get_textHeight() + this.get_padding() * 2);
			if(this.get_backgroundColor() != null) {
				c.set_fillStyle((function($this) {
					var $r;
					var this1 = $this.get_backgroundColor();
					$r = this1.toString();
					return $r;
				}(this)));
				c.fillRect(d.x,d.y,w,h);
			}
			this.applyStyles(c);
			var p;
			var x = d.x + this.get_padding();
			var y = d.y + this.get_padding();
			p = new tannus_geom_TPoint(x,y,0);
			var _g = 0;
			var _g1 = this.lines();
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				c.fillText(line.text,p.get_x(),p.get_y());
				var ny = p.get_y() + line.height;
				p.set_y(ny);
			}
		} else {
			this.measure();
			var w1 = Math.round(this.get_textWidth() + this.get_padding() * 2);
			var h1 = Math.round(this.get_textHeight() + this.get_padding() * 2);
			if(this.get_backgroundColor() != null) {
				c.set_fillStyle((function($this) {
					var $r;
					var this2 = $this.get_backgroundColor();
					$r = this2.toString();
					return $r;
				}(this)));
				c.fillRect(d.x,d.y,w1,h1);
			}
			this.applyStyles(c);
			c.fillText(this.get_text(),d.x + this.get_padding(),d.y + this.get_padding());
		}
	}
	,getMetrics: function(s) {
		this.applyStyles(this.canvas._ctx.get());
		return this.canvas._ctx.get().measureText(s);
	}
	,autoScale: function(mw,mh) {
		if(mw == null && mh == null) return; else {
			this.set_fontSize(1);
			while(true) {
				this.measure();
				if(mw != null && this.get_width() > mw) break;
				if(mh != null && this.get_height() > mh) break;
				var _g = this;
				_g.set_fontSize(_g.get_fontSize() + 1);
			}
			var _g1 = this;
			_g1.set_fontSize(_g1.get_fontSize() - 1);
		}
	}
	,fit: function(w,h) {
		if(w == null && h == null) return; else while(true) {
			this.measure();
			if(w != null && this.get_width() > w) {
				var _g = this;
				var _g1 = _g.get_fontSize();
				_g.set_fontSize(_g1 - 1);
				_g1;
			} else if(h != null && this.get_height() > h) {
				var _g2 = this;
				var _g11 = _g2.get_fontSize();
				_g2.set_fontSize(_g11 - 1);
				_g11;
			} else break;
		}
	}
	,wrappedLines: function() {
		var lineWidth = this.wordWrap;
		var s = tannus_ds_StringUtils.byteMap(this.get_text(),function($char) {
			if($char == 10 || $char == 13) return 32; else return $char;
		});
		var allwords = s.split(" ");
		var lines = [];
		var line = [];
		var _g = 0;
		while(_g < allwords.length) {
			var w = allwords[_g];
			++_g;
			var testLine = line.concat([w]).join(" ");
			var metrics = this.getMetrics(testLine);
			if(metrics.width > lineWidth) {
				lines.push(line.join(" "));
				line = [w];
			} else line.push(w);
		}
		return lines;
	}
	,toCanvas: function() {
		if(this.stateChanged) {
			this.stateChanged = false;
			if(this.multiline) {
				this.measure();
				this.canvas.resize(Math.round(this.get_textWidth() + this.get_padding() * 2),Math.round(this.get_textHeight() + this.get_padding() * 2));
				var c = this.canvas._ctx.get();
				if(this.get_backgroundColor() != null) {
					c.set_fillStyle((function($this) {
						var $r;
						var this1 = $this.get_backgroundColor();
						$r = this1.toString();
						return $r;
					}(this)));
					c.fillRect(0,0,this.canvas.canvas.width,this.canvas.canvas.height);
				}
				this.applyStyles(this.canvas._ctx.get());
				var p;
				var x = this.get_padding();
				var y = this.get_padding();
				p = new tannus_geom_TPoint(x,y,0);
				var _g = 0;
				var _g1 = this.lines();
				while(_g < _g1.length) {
					var line = _g1[_g];
					++_g;
					c.fillText(line.text,p.get_x(),p.get_y());
					var ny = p.get_y() + line.height;
					p.set_y(ny);
				}
			} else {
				this.measure();
				this.canvas.resize(Math.round(this.get_textWidth() + this.get_padding() * 2),Math.round(this.get_textHeight() + this.get_padding() * 2));
				var c1 = this.canvas._ctx.get();
				if(this.get_backgroundColor() != null) {
					c1.set_fillStyle((function($this) {
						var $r;
						var this2 = $this.get_backgroundColor();
						$r = this2.toString();
						return $r;
					}(this)));
					c1.fillRect(0,0,this.canvas.canvas.width,this.canvas.canvas.height);
				}
				this.applyStyles(this.canvas._ctx.get());
				this.canvas._ctx.get().fillText(this.get_text(),this.get_padding(),this.get_padding());
			}
		}
		return this.canvas;
	}
	,applyStyles: function(c) {
		c.set_font(this.fontString());
		c.set_textAlign(this.get_align());
		c.set_fillStyle((function($this) {
			var $r;
			var this1 = $this.get_color();
			$r = this1.toString();
			return $r;
		}(this)));
		c.set_textBaseline("top");
	}
	,fontString: function() {
		var bits = [];
		if(this.get_bold()) bits.push("bold");
		if(this.get_italic()) bits.push("italic");
		bits.push("" + this.get_fontSize() + this.get_fontSizeUnit());
		bits.push(this.get_fontFamily());
		return bits.join(" ");
	}
	,measure: function() {
		if(this.multiline) {
			this._textWidth = 0;
			this._textHeight = 0;
			var _g = 0;
			var _g1 = this.lines();
			while(_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				this._textWidth = Math.max(this._textWidth,l.width);
				this._textHeight += l.height;
			}
		} else {
			this.applyStyles(this.canvas._ctx.get());
			var size = this.canvas._ctx.get().measureText(this.get_text());
			this._textWidth = size.width;
			this._textHeight = size.height;
		}
	}
	,lines: function() {
		this.multiline = false;
		var slines;
		if(this.wordWrap != null) slines = this.wrappedLines(); else slines = this.get_text().split("\n");
		var lines = [];
		var _g = 0;
		while(_g < slines.length) {
			var s = slines[_g];
			++_g;
			var m = this.getMetrics(s);
			lines.push({ 'text' : s, 'width' : m.width, 'height' : m.height});
		}
		this.multiline = true;
		return lines;
	}
	,hasStateChanged: function() {
		return this.stateChanged;
	}
	,changed: function() {
		this.stateChanged = true;
		this.onStateChanged.call();
	}
	,get_text: function() {
		return this.txt;
	}
	,set_text: function(v) {
		if(v != this.txt) {
			this.changed();
			this.onTextChanged.call();
		}
		return this.txt = v;
	}
	,get_padding: function() {
		return this._padding;
	}
	,set_padding: function(v) {
		if(v != this._padding) this.changed();
		return this._padding = v;
	}
	,get_fontFamily: function() {
		return this._fontFamily;
	}
	,set_fontFamily: function(v) {
		if(v != this._fontFamily) this.changed();
		if(tannus_ds_StringUtils.has(v," ")) v = tannus_ds_StringUtils.wrap(v,"\"");
		return this._fontFamily = v;
	}
	,get_fontSize: function() {
		return this._fontSize;
	}
	,set_fontSize: function(v) {
		if(v != this._fontSize) this.changed();
		return this._fontSize = v;
	}
	,get_fontSizeUnit: function() {
		return this._fontSizeUnit;
	}
	,set_fontSizeUnit: function(v) {
		if(v != this._fontSizeUnit) this.changed();
		return this._fontSizeUnit = v;
	}
	,get_textWidth: function() {
		if(this.stateChanged) this.measure();
		return this._textWidth;
	}
	,get_textHeight: function() {
		if(this.stateChanged) this.measure();
		return this._textHeight;
	}
	,get_width: function() {
		return this.get_padding() * 2 + this.get_textWidth();
	}
	,get_height: function() {
		return this.get_padding() * 2 + this.get_textHeight();
	}
	,get_color: function() {
		return this._color;
	}
	,set_color: function(v) {
		if(v != this._color) this.changed();
		return this._color = v;
	}
	,get_backgroundColor: function() {
		return this._backgroundColor;
	}
	,set_backgroundColor: function(v) {
		if(v != this._backgroundColor) this.changed();
		return this._backgroundColor = v;
	}
	,get_align: function() {
		return this._align;
	}
	,set_align: function(v) {
		if(v != this._align) this.changed();
		return this._align = v;
	}
	,get_bold: function() {
		return this._bold;
	}
	,set_bold: function(v) {
		if(v != this._bold) this.changed();
		return this._bold = v;
	}
	,get_italic: function() {
		return this._italic;
	}
	,set_italic: function(v) {
		if(v != this._italic) this.changed();
		return this._italic = v;
	}
	,__class__: gryffin_display_TextBox
	,__properties__: {set_italic:"set_italic",get_italic:"get_italic",set_bold:"set_bold",get_bold:"get_bold",set_align:"set_align",get_align:"get_align",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_color:"set_color",get_color:"get_color",get_height:"get_height",get_width:"get_width",get_textHeight:"get_textHeight",get_textWidth:"get_textWidth",set_fontSizeUnit:"set_fontSizeUnit",get_fontSizeUnit:"get_fontSizeUnit",set_fontSize:"set_fontSize",get_fontSize:"get_fontSize",set_fontFamily:"set_fontFamily",get_fontFamily:"get_fontFamily",set_padding:"set_padding",get_padding:"get_padding",set_text:"set_text",get_text:"get_text"}
};
var gryffin_events_FrameManager = function() {
	this.frame = new tannus_io_Signal();
};
$hxClasses["gryffin.events.FrameManager"] = gryffin_events_FrameManager;
gryffin_events_FrameManager.__name__ = ["gryffin","events","FrameManager"];
gryffin_events_FrameManager.prototype = {
	_frame: function(delta) {
		this.frame.broadcast(delta);
		this.queueNext();
	}
	,queueNext: function() {
		this.id = window.requestAnimationFrame($bind(this,this._frame));
	}
	,start: function() {
		this.queueNext();
	}
	,stop: function() {
		window.cancelAnimationFrame(this.id);
	}
	,__class__: gryffin_events_FrameManager
};
var tannus_events_EventCreator = function() { };
$hxClasses["tannus.events.EventCreator"] = tannus_events_EventCreator;
tannus_events_EventCreator.__name__ = ["tannus","events","EventCreator"];
var gryffin_events_KeyListener = function(s) {
	this.stage = s;
	this.listen();
};
$hxClasses["gryffin.events.KeyListener"] = gryffin_events_KeyListener;
gryffin_events_KeyListener.__name__ = ["gryffin","events","KeyListener"];
gryffin_events_KeyListener.__interfaces__ = [tannus_events_EventCreator];
gryffin_events_KeyListener.prototype = {
	listen: function() {
		var win = window;
		var events = ["keydown","keyup","keypress"];
		var _g = 0;
		while(_g < events.length) {
			var name = events[_g];
			++_g;
			win.addEventListener(name,$bind(this,this.handle));
		}
	}
	,collectMods: function(e) {
		var mods = [];
		if(e.altKey) mods.push("alt");
		if(e.shiftKey) mods.push("shift");
		if(e.ctrlKey) mods.push("ctrl");
		if(e.metaKey) mods.push("super");
		return mods;
	}
	,handle: function(e) {
		var event = new tannus_events_KeyboardEvent(e.type,e.keyCode,this.collectMods(e));
		event.onDefaultPrevented.once($bind(e,e.preventDefault));
		event.onPropogationStopped.once($bind(e,e.stopPropagation));
		this.stage.dispatch(e.type,event);
	}
	,__class__: gryffin_events_KeyListener
};
var gryffin_events_MouseListener = function(s) {
	this.stage = s;
	this.relevant = ["click","mouseup","mousedown","mouseenter","mouseleave","mousemove","contextmenu","mousewheel"];
	this.bind();
};
$hxClasses["gryffin.events.MouseListener"] = gryffin_events_MouseListener;
gryffin_events_MouseListener.__name__ = ["gryffin","events","MouseListener"];
gryffin_events_MouseListener.__interfaces__ = [tannus_events_EventCreator];
gryffin_events_MouseListener.prototype = {
	bindMouse: function() {
		var relevant = this.relevant.slice(0,4);
		console.log(relevant);
		var _g = 0;
		while(_g < relevant.length) {
			var name = relevant[_g];
			++_g;
			this.stage.canvas.canvas.addEventListener(name,$bind(this,this.handle));
		}
		this.stage.canvas.canvas.addEventListener("mousemove",$bind(this,this.handleMove));
		this.stage.canvas.canvas.addEventListener("contextmenu",$bind(this,this.handleMenu));
	}
	,dragEvent: function(event) {
		var ev = tannus_events_MouseEvent.fromJsEvent(event);
		ev.position = this.findPos(event);
		this.stage.mouseEvent(ev);
	}
	,bindWheel: function() {
		this.stage.canvas.canvas.addEventListener("mousewheel",$bind(this,this.handleWheel));
	}
	,handleMenu: function(e) {
		var event = new tannus_events_MouseEvent(e.type,this.findPos(e),e.button,this.findMods(e));
		var prevent = function() {
			e.preventDefault();
		};
		event.onCancelled.once(prevent);
		event.onDefaultPrevented.once(prevent);
		event.onPropogationStopped.once(prevent);
		this.stage.mouseEvent(event);
	}
	,bind: function() {
		this.bindMouse();
		this.bindWheel();
	}
	,unbind: function() {
		var _g = 0;
		var _g1 = this.relevant;
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			this.stage.canvas.canvas.removeEventListener(name,$bind(this,this.handle));
		}
		this.stage.canvas.canvas.removeEventListener("mousemove",$bind(this,this.handleMove));
		this.stage.canvas.canvas.removeEventListener("contextmenu",$bind(this,this.handleMenu));
		this.stage.canvas.canvas.removeEventListener("mousewheel",$bind(this,this.handleWheel));
	}
	,rebind: function() {
		this.unbind();
		this.bind();
	}
	,findPos: function(e) {
		var pos = new tannus_geom_TPoint(e.clientX,e.clientY,0);
		var crect = this.stage.canvas.canvas.getBoundingClientRect();
		var nx = pos.get_x() - crect.left;
		pos.set_x(nx);
		var ny = pos.get_y() - crect.top;
		pos.set_y(ny);
		return pos;
	}
	,findMods: function(e) {
		var mods = [];
		if(e.altKey) mods.push("alt");
		if(e.ctrlKey) mods.push("ctrl");
		if(e.shiftKey) mods.push("shift");
		if(e.metaKey) mods.push("super");
		return mods;
	}
	,handle: function(e) {
		var pos = this.findPos(e);
		var mods = this.findMods(e);
		var event = new tannus_events_MouseEvent(e.type,pos,e.button,mods);
		event.onDefaultPrevented.once($bind(e,e.preventDefault));
		event.onPropogationStopped.once($bind(e,e.stopPropagation));
		this.stage.mouseEvent(event);
	}
	,handleMove: function() {
		var _g = this;
		var lastTarget = null;
		var _handle = function(e) {
			var pos = _g.findPos(e);
			var mods = _g.findMods(e);
			var event = new tannus_events_MouseEvent(e.type,pos,e.button,mods);
			event.onDefaultPrevented.once($bind(e,e.preventDefault));
			event.onPropogationStopped.once($bind(e,e.stopPropagation));
			var target = _g.getRootTarget(event);
			{
				var left = lastTarget;
				var left1 = lastTarget;
				if(lastTarget == null) {
					var entered = target;
					if(entered != null) entered.dispatch("mouseenter",e); else {
						var right = target;
						if(target == null) {
							if(left != null) left.dispatch("mouseleave",e); else if(left1 != null && right != null) {
								if(left1 == right) left1.dispatch("mousemove",e); else {
									left1.dispatch("mouseleave",e);
									right.dispatch("mouseenter",e);
								}
							}
						} else switch(target) {
						default:
							if(left1 != null && right != null) {
								if(left1 == right) left1.dispatch("mousemove",e); else {
									left1.dispatch("mouseleave",e);
									right.dispatch("mouseenter",e);
								}
							}
						}
					}
				} else switch(lastTarget) {
				default:
					var right = target;
					if(target == null) {
						if(left != null) left.dispatch("mouseleave",e); else if(left1 != null && right != null) {
							if(left1 == right) left1.dispatch("mousemove",e); else {
								left1.dispatch("mouseleave",e);
								right.dispatch("mouseenter",e);
							}
						}
					} else switch(target) {
					default:
						if(left1 != null && right != null) {
							if(left1 == right) left1.dispatch("mousemove",e); else {
								left1.dispatch("mouseleave",e);
								right.dispatch("mouseenter",e);
							}
						}
					}
				}
			}
			lastTarget = target;
			_g.stage.mouseEvent(event);
		};
		this.stage.canvas.canvas.addEventListener("mousemove",_handle);
	}
	,getRootTarget: function(e) {
		var _g = 0;
		var _g1 = this.stage.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.containsPoint(e.position) && !(child._cached || child.destroyed)) return child;
		}
		return null;
	}
	,handleWheel: function(e) {
		var delta = Std["int"](Math.max(-1,Math.min(1,-e.deltaY)));
		var event = new tannus_events_ScrollEvent(delta);
		this.stage.dispatch("scroll",event);
	}
	,get_canvas: function() {
		return this.stage.canvas.canvas;
	}
	,__class__: gryffin_events_MouseListener
	,__properties__: {get_canvas:"get_canvas"}
};
var gryffin_events_MouseWatcher = function(s) {
	this.stage = s;
	this.lastMousePos = null;
	this.lastMove = -1;
	this.hovered = new List();
	this._listen();
};
$hxClasses["gryffin.events.MouseWatcher"] = gryffin_events_MouseWatcher;
gryffin_events_MouseWatcher.__name__ = ["gryffin","events","MouseWatcher"];
gryffin_events_MouseWatcher.prototype = {
	getMousePosition: function() {
		if(this.lastMousePos == null) return null; else return this.lastMousePos.clone();
	}
	,getMoveTime: function() {
		if(this.lastMove != -1) return this.lastMove; else return null;
	}
	,_listen: function() {
		this.stage.on("mousemove",$bind(this,this.onmove));
		this.stage.on("mouseleave",$bind(this,this.onleave));
	}
	,onmove: function(e) {
		this.lastMousePos = e.position;
		this.lastMove = e.date;
	}
	,onleave: function(e) {
		this.lastMousePos = null;
	}
	,mouseInEnt: function(entity,event) {
		var prev = this.entityHovered(entity);
		var curr = entity.containsPoint(event.position);
		this.entityHovered(entity,curr);
		switch(prev) {
		case false:
			switch(curr) {
			case true:
				var mee = event.clone();
				mee.type = "mouseenter";
				entity.dispatch("mouseenter",mee);
				break;
			default:
				null;
			}
			break;
		case true:
			switch(curr) {
			case false:
				var mle = event.clone();
				mle.type = "mouseleave";
				entity.dispatch("mouseleave",mle);
				break;
			default:
				null;
			}
			break;
		}
	}
	,hoveredEntities: function(event) {
		var _g_head = this.hovered.h;
		var _g_val = null;
		while(_g_head != null) {
			var entity;
			entity = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			this.mouseInEnt(entity,event);
		}
	}
	,entityHovered: function(e,value) {
		if(value != null) {
			if(value && !Lambda.has(this.hovered,e)) this.hovered.add(e); else this.hovered.remove(e);
			return value;
		} else return Lambda.has(this.hovered,e);
	}
	,__class__: gryffin_events_MouseWatcher
};
var gryffin_fx_Actuator = function() {
};
$hxClasses["gryffin.fx.Actuator"] = gryffin_fx_Actuator;
gryffin_fx_Actuator.__name__ = ["gryffin","fx","Actuator"];
gryffin_fx_Actuator.prototype = {
	update: function(progress) {
		console.log("animation is " + ("" + progress + "%") + " complete");
	}
	,reverse: function() {
		return new gryffin_fx_Actuator();
	}
	,__class__: gryffin_fx_Actuator
};
var gryffin_fx_Animation = function() {
	this.start_time = null;
	this.complete = false;
	this.oncomplete = new tannus_io_VoidSignal();
	this.actuators = [];
};
$hxClasses["gryffin.fx.Animation"] = gryffin_fx_Animation;
gryffin_fx_Animation.__name__ = ["gryffin","fx","Animation"];
gryffin_fx_Animation.prototype = {
	start: function() {
		this.start_time = new Date().getTime();
		gryffin_fx_Animations.link(this);
	}
	,update: function() {
		if(!this.complete) {
			var progress;
			progress = (this.start_time != null?new Date().getTime() - this.start_time:null) / this.duration;
			if(progress > 1) progress = 1;
			var delt = this.delta(progress);
			this.step(delt * 100);
			if(progress == 1) {
				this.complete = true;
				this.oncomplete.call();
			}
		}
	}
	,delta: function(progress) {
		return progress;
	}
	,step: function(d) {
		var _g = 0;
		var _g1 = this.actuators;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			a.update(d);
		}
	}
	,actuate: function(a) {
		this.actuators.push(a);
	}
	,reverse: function() {
		var rev = new gryffin_fx_Animation();
		rev.duration = this.duration;
		rev.delta = $bind(this,this.delta);
		var _g = 0;
		var _g1 = this.actuators;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			rev.actuate(a.reverse());
		}
		return rev;
	}
	,get_now: function() {
		return new Date().getTime();
	}
	,get_passed: function() {
		if(this.start_time != null) return new Date().getTime() - this.start_time; else return null;
	}
	,__class__: gryffin_fx_Animation
	,__properties__: {get_passed:"get_passed",get_now:"get_now"}
};
var gryffin_fx_Animations = function() { };
$hxClasses["gryffin.fx.Animations"] = gryffin_fx_Animations;
gryffin_fx_Animations.__name__ = ["gryffin","fx","Animations"];
gryffin_fx_Animations.link = function(anim) {
	gryffin_fx_Animations.registry.push(anim);
};
gryffin_fx_Animations.tick = function() {
	var _g = 0;
	var _g1 = gryffin_fx_Animations.registry;
	while(_g < _g1.length) {
		var anim = _g1[_g];
		++_g;
		anim.update();
	}
	gryffin_fx_Animations.registry = gryffin_fx_Animations.registry.filter(function(item) {
		return !item.complete;
	});
};
gryffin_fx_Animations.claim = function(stage) {
	if(gryffin_fx_Animations.manager == null) gryffin_fx_Animations.manager = stage;
};
var gryffin_fx_Effect = function() {
};
$hxClasses["gryffin.fx.Effect"] = gryffin_fx_Effect;
gryffin_fx_Effect.__name__ = ["gryffin","fx","Effect"];
gryffin_fx_Effect.prototype = {
	active: function(e) {
		return true;
	}
	,affect: function(e) {
		null;
	}
	,attach: function(e) {
		null;
	}
	,__class__: gryffin_fx_Effect
};
var gryffin_ui_Border = function(size,colr,rad) {
	if(size == null) size = 0;
	this.width = size;
	if(rad != null) this.radius = rad; else this.radius = 0;
	if(colr != null) this.color = colr; else this.color = new tannus_graphics__$Color_TColor(0,0,0,null);
};
$hxClasses["gryffin.ui.Border"] = gryffin_ui_Border;
gryffin_ui_Border.__name__ = ["gryffin","ui","Border"];
gryffin_ui_Border.prototype = {
	toString: function() {
		return "Border(width=" + this.width + ", color=" + this.color.toString() + ")";
	}
	,__class__: gryffin_ui_Border
};
var gryffin_ui__$Button_Button_$Impl_$ = {};
$hxClasses["gryffin.ui._Button.Button_Impl_"] = gryffin_ui__$Button_Button_$Impl_$;
gryffin_ui__$Button_Button_$Impl_$.__name__ = ["gryffin","ui","_Button","Button_Impl_"];
gryffin_ui__$Button_Button_$Impl_$._new = function(data) {
	return data;
};
var gryffin_ui_ContextMenu = function() {
	this.goup = false;
	var _g = this;
	gryffin_ui_List.call(this);
	this.max_width = 0;
	this.total_height = 0;
	this.set_targetX(0);
	this.set_targetY(0);
	var x = new tannus_io__$Pointer_Ref(function() {
		return _g.targetX;
	},function(v) {
		return _g.set_targetX(v);
	});
	var y = new tannus_io__$Pointer_Ref(function() {
		return _g.targetY;
	},function(v1) {
		return _g.set_targetY(v1);
	});
	this.tar = new tannus_geom_LinkedPoint(x,y,null);
	this.viewport = $bind(this,this.get_vp);
	this.on("click",$bind(this,this.click));
};
$hxClasses["gryffin.ui.ContextMenu"] = gryffin_ui_ContextMenu;
gryffin_ui_ContextMenu.__name__ = ["gryffin","ui","ContextMenu"];
gryffin_ui_ContextMenu.__super__ = gryffin_ui_List;
gryffin_ui_ContextMenu.prototype = $extend(gryffin_ui_List.prototype,{
	firstPos: function() {
		var t = this.tar.clone();
		if(this.goup) {
			var ny = t.get_y() - this.contentHeight();
			t.set_y(ny);
		}
		return t;
	}
	,positionItem: function(p,item) {
		item.set_y(p.get_y());
		item.set_x(p.get_x());
		var ny = p.get_y() + item.get_h();
		p.set_y(ny);
		this.max_width = tannus_math_TMath.max(this.max_width,item.get_w());
		this.total_height = item.get_y() + item.get_h();
	}
	,positionItems: function(stage) {
		this.total_height = 0;
		gryffin_ui_List.prototype.positionItems.call(this,stage);
		var mr = new tannus_geom_CRectangle(this.max_width,this.total_height,0,0);
		var contained = this.inRect(mr,this.viewport());
		if(!this.goup && !contained) {
			this.goup = true;
			this.altered = true;
		} else if(this.goup && !contained) {
			this.goup = false;
			this.altered = true;
		}
	}
	,inRect: function(x,y) {
		var _g = 0;
		var _g1 = x.get_corners();
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			if(!y.contains(r.get_x(),r.get_y())) return false;
		}
		return true;
	}
	,contentHeight: function() {
		return tannus_math_TMath.sum_Float(this.items.map(function(item) {
			return item.get_h();
		}));
	}
	,render: function(s,c) {
		c.ctx.beginPath();
		c.set_fillStyle("#FFFFCC");
		c.set_shadowColor("#666666");
		c.set_shadowOffsetX(5);
		c.set_shadowOffsetY(5);
		c.set_shadowBlur(15);
		var rect;
		var _x = this.tar.get_x();
		var _y = this.tar.get_y();
		var _height = this.contentHeight();
		rect = new tannus_geom_CRectangle(_x,_y,this.max_width,_height);
		if(this.goup) rect.y -= this.contentHeight();
		c.ctx.rect(rect.x,rect.y,rect.width,rect.height);
		c.ctx.closePath();
		c.ctx.fill();
		gryffin_ui_List.prototype.render.call(this,s,c);
	}
	,containsPoint: function(p) {
		var cr;
		var _x = this.tar.get_x();
		var _y = this.tar.get_y();
		var _height = this.contentHeight();
		cr = new tannus_geom_CRectangle(_x,_y,this.max_width,_height);
		return cr.contains(p.get_x(),p.get_y());
	}
	,click: function(e) {
		console.log(e);
	}
	,item: function(btn) {
		var mitem = new gryffin_ui_ContextMenuItem(this,btn);
		this.addItem(mitem);
		return mitem;
	}
	,button: function(text,cb) {
		return this.item({ 'text' : text, 'click' : cb});
	}
	,get_target: function() {
		return this.tar;
	}
	,set_target: function(v) {
		this.tar.copyFrom(v);
		this.altered = true;
		return this.tar;
	}
	,set_targetX: function(v) {
		this.targetX = v;
		this.altered = true;
		return this.targetX;
	}
	,set_targetY: function(v) {
		this.targetY = v;
		this.altered = true;
		return this.targetY;
	}
	,get_vp: function() {
		if(this.stage == null) return new tannus_geom_CRectangle(0,0,0,0); else return this.stage.get_rect();
	}
	,__class__: gryffin_ui_ContextMenu
	,__properties__: $extend(gryffin_ui_List.prototype.__properties__,{set_targetY:"set_targetY",set_targetX:"set_targetX",set_target:"set_target",get_target:"get_target"})
});
var gryffin_ui_ContextMenuItem = function(m,data) {
	gryffin_ui_ListItem.call(this);
	this.menu = m;
	this.button = data;
	this.hovered = false;
	this.padding = new gryffin_ui_Padding();
	this.box = new gryffin_display_TextBox();
	this.box.set_fontFamily("Ubuntu");
	this.box.set_fontSize(10);
	this.padding.set_vertical(8);
	this.padding.set_horizontal(6);
};
$hxClasses["gryffin.ui.ContextMenuItem"] = gryffin_ui_ContextMenuItem;
gryffin_ui_ContextMenuItem.__name__ = ["gryffin","ui","ContextMenuItem"];
gryffin_ui_ContextMenuItem.__super__ = gryffin_ui_ListItem;
gryffin_ui_ContextMenuItem.prototype = $extend(gryffin_ui_ListItem.prototype,{
	init: function(stage) {
		gryffin_ui_ListItem.prototype.init.call(this,stage);
	}
	,update: function(s) {
		gryffin_ui_ListItem.prototype.update.call(this,s);
		var mp = s.getMousePosition();
		if(mp != null) {
			this.hovered = this.containsPoint(mp);
			if(this.hovered) s.set_cursor("point");
		} else this.hovered = false;
		if(this.hovered) s.set_cursor("pointer");
		this.box.set_text(this.button.text);
		this.altered = this.box.stateChanged;
	}
	,render: function(s,c) {
		c.drawComponent(this.box,0,0,this.box.get_width(),this.box.get_height(),this.padding.left + this.get_x(),this.padding.top + this.get_y(),this.box.get_width(),this.box.get_height());
	}
	,click: function(self,e) {
		this.button.click(e);
	}
	,get_text: function() {
		return this.box.get_text();
	}
	,set_text: function(v) {
		return this.box.set_text(v);
	}
	,get_w: function() {
		return this.padding.get_horizontal() + this.box.get_width();
	}
	,get_h: function() {
		return this.padding.get_vertical() + this.box.get_height();
	}
	,__class__: gryffin_ui_ContextMenuItem
	,__properties__: $extend(gryffin_ui_ListItem.prototype.__properties__,{set_text:"set_text",get_text:"get_text"})
});
var tannus_geom_Position = function(top,right,bottom,left) {
	if(left == null) left = 0;
	if(bottom == null) bottom = 0;
	if(right == null) right = 0;
	if(top == null) top = 0;
	this.top = top;
	this.right = right;
	this.bottom = bottom;
	this.left = left;
};
$hxClasses["tannus.geom.Position"] = tannus_geom_Position;
tannus_geom_Position.__name__ = ["tannus","geom","Position"];
tannus_geom_Position.prototype = {
	clone: function() {
		return new tannus_geom_Position(this.top,this.right,this.bottom,this.left);
	}
	,__class__: tannus_geom_Position
};
var gryffin_ui_Padding = function(top,right,bottom,left) {
	tannus_geom_Position.call(this,top,right,bottom,left);
};
$hxClasses["gryffin.ui.Padding"] = gryffin_ui_Padding;
gryffin_ui_Padding.__name__ = ["gryffin","ui","Padding"];
gryffin_ui_Padding.__super__ = tannus_geom_Position;
gryffin_ui_Padding.prototype = $extend(tannus_geom_Position.prototype,{
	copyFrom: function(other) {
		this.left = other.left;
		this.right = other.right;
		this.bottom = other.bottom;
		this.top = other.top;
	}
	,get_horizontal: function() {
		return this.left + this.right;
	}
	,set_horizontal: function(v) {
		this.left = v;
		this.right = v;
		return v;
	}
	,get_vertical: function() {
		return this.top + this.bottom;
	}
	,set_vertical: function(v) {
		this.top = v;
		this.bottom = v;
		return v;
	}
	,get_all: function() {
		return this.left;
	}
	,set_all: function(v) {
		return this.left = this.right = this.bottom = this.top = v;
	}
	,__class__: gryffin_ui_Padding
	,__properties__: {set_all:"set_all",get_all:"get_all",set_vertical:"set_vertical",get_vertical:"get_vertical",set_horizontal:"set_horizontal",get_horizontal:"get_horizontal"}
});
var gryffin_ui_ScrollBar = function(cr,vp,sy) {
	gryffin_core_Entity.call(this);
	this.priority = 90;
	this._cr = cr;
	this._vp = vp;
	this._scroll = sy;
	this.on("click",$bind(this,this._click));
};
$hxClasses["gryffin.ui.ScrollBar"] = gryffin_ui_ScrollBar;
gryffin_ui_ScrollBar.__name__ = ["gryffin","ui","ScrollBar"];
gryffin_ui_ScrollBar.__super__ = gryffin_core_Entity;
gryffin_ui_ScrollBar.prototype = $extend(gryffin_core_Entity.prototype,{
	needed: function() {
		return this._cr().get_h() > this.get_viewport().get_h();
	}
	,containsPoint: function(p) {
		return this.get_track().containsPoint(p);
	}
	,render: function(stage,c) {
		if(this.needed()) {
			c.ctx.save();
			c.set_fillStyle("#F1F1F1");
			c.ctx.beginPath();
			c.drawRect(this.get_track());
			c.ctx.closePath();
			c.ctx.fill();
			c.set_fillStyle("#C2C2C2");
			c.ctx.beginPath();
			c.drawRect(this.get_bar());
			c.ctx.closePath();
			c.ctx.fill();
			c.ctx.restore();
		}
	}
	,_click: function(event) {
		if(this.get_track().containsPoint(event.position)) {
			var mp = this.pointPercent(event.position);
			var mx = this._cr().get_h() - this.get_viewport().get_h();
			this.set_scroll(tannus_math_TMath.min(mx,mx * (mp / 100)));
		}
	}
	,pointPercent: function(p) {
		var t = this.get_track();
		var y = p.get_y() - t.y;
		return tannus_math__$Percent_Percent_$Impl_$.percent(y,t.height);
	}
	,get_content: function() {
		return this._cr();
	}
	,get_viewport: function() {
		var _x = this._vp().x;
		var _y = this._vp().y + this._scroll.get();
		var _width = this._vp().get_w();
		var _height = this._vp().get_h();
		return new tannus_geom_CRectangle(_x,_y,_width,_height);
	}
	,get_scroll: function() {
		return this._scroll.get();
	}
	,set_scroll: function(v) {
		return this._scroll.set(v);
	}
	,get_scrollProgress: function() {
		return tannus_math__$Percent_Percent_$Impl_$.percent(this._scroll.get(),this._cr().get_h() - this.get_viewport().get_h());
	}
	,get_track: function() {
		var w = 20;
		var vp = this.get_viewport();
		var _y = this._vp().y;
		return new tannus_geom_CRectangle(vp.x + vp.width - w,_y,w,vp.height);
	}
	,get_bar: function() {
		var vp = this.get_viewport();
		var cr = this._cr();
		var bh = vp.height / cr.height * vp.height;
		var by;
		by = (vp.height - bh) * ((function($this) {
			var $r;
			var this1 = tannus_math__$Percent_Percent_$Impl_$.percent($this._scroll.get(),$this._cr().get_h() - $this.get_viewport().get_h());
			$r = this1;
			return $r;
		}(this)) / 100);
		var t = this.get_track();
		return new tannus_geom_CRectangle(t.x,by,t.width,bh);
	}
	,__class__: gryffin_ui_ScrollBar
	,__properties__: $extend(gryffin_core_Entity.prototype.__properties__,{get_bar:"get_bar",get_track:"get_track",get_scrollProgress:"get_scrollProgress",set_scroll:"set_scroll",get_scroll:"get_scroll",get_viewport:"get_viewport",get_content:"get_content"})
});
var gryffin_ui_Tooltip = function() {
	gryffin_core_Entity.call(this);
	this.target = new tannus_geom_CRectangle(0,0,0,0);
	this.box = new gryffin_display_TextBox();
	this.padding = new gryffin_ui_Padding();
	this.margin = 0;
	this.direction = 3;
	this.set_textColor(tannus_graphics__$Color_TColor.fromString("#000"));
	this.backgroundColor = tannus_graphics__$Color_TColor.fromString("#FFF");
	this.borderColor = tannus_graphics__$Color_TColor.fromString("#676767");
	this.borderWidth = 1;
	this.borderRadius = 0;
};
$hxClasses["gryffin.ui.Tooltip"] = gryffin_ui_Tooltip;
gryffin_ui_Tooltip.__name__ = ["gryffin","ui","Tooltip"];
gryffin_ui_Tooltip.__super__ = gryffin_core_Entity;
gryffin_ui_Tooltip.prototype = $extend(gryffin_core_Entity.prototype,{
	init: function(s) {
		gryffin_core_Entity.prototype.init.call(this,s);
		this.padding.set_vertical(2);
		this.padding.set_horizontal(2);
		this.box.set_fontFamily("Ubuntu");
		this.box.set_fontSize(10);
	}
	,render: function(s,c) {
		var r = this.get_rect();
		c.ctx.save();
		c.ctx.beginPath();
		c.set_strokeStyle(this.borderColor.toString());
		c.set_lineWidth(this.borderWidth);
		c.set_fillStyle(this.backgroundColor.toString());
		c.roundRect(r.x,r.y,r.width,r.height,this.borderRadius);
		c.ctx.closePath();
		c.ctx.fill();
		c.ctx.stroke();
		this.drawTail(r,s,c);
		c.ctx.restore();
		var tr;
		var _width = this.box.get_width();
		var _height = this.box.get_height();
		tr = new tannus_geom_CRectangle(0,0,_width,_height);
		tr.set_center(new tannus_geom_TPoint(r.x + r.width / 2,r.y + r.height / 2,0));
		c.drawComponent(this.box,0,0,tr.width,tr.height,tr.x,tr.y,tr.width,tr.height);
	}
	,drawTail: function(r,s,c) {
		var tw = 0;
		var mp = new tannus_geom_TPoint(0,0,0);
		var tri = new tannus_geom_Triangle();
		var _g = this.direction;
		switch(_g) {
		case 3:
			tw = 0.45 * r.height;
			mp.copyFrom(new tannus_geom_TPoint(r.x + r.width,r.y + r.height / 2,0));
			var _g1 = 0;
			var _g2 = [tri.one,tri.two,tri.three];
			while(_g1 < _g2.length) {
				var item = _g2[_g1];
				++_g1;
				item.copyFrom(mp);
			}
			var _g11 = tri.one;
			var ny = _g11.get_y() - tw / 2;
			_g11.set_y(ny);
			var _g12 = tri.two;
			var ny1 = _g12.get_y() + tw / 2;
			_g12.set_y(ny1);
			var _g13 = tri.three;
			var nx = _g13.get_x() + tw;
			_g13.set_x(nx);
			break;
		case 1:
			tw = 0.45 * r.height;
			mp.copyFrom(new tannus_geom_TPoint(r.x,r.y + r.height / 2,0));
			var _g14 = 0;
			var _g21 = [tri.one,tri.two,tri.three];
			while(_g14 < _g21.length) {
				var item1 = _g21[_g14];
				++_g14;
				item1.copyFrom(mp);
			}
			var _g15 = tri.one;
			var ny2 = _g15.get_y() - tw / 2;
			_g15.set_y(ny2);
			var _g16 = tri.two;
			var ny3 = _g16.get_y() + tw / 2;
			_g16.set_y(ny3);
			var _g17 = tri.three;
			var nx1 = _g17.get_x() - tw;
			_g17.set_x(nx1);
			break;
		case 0:
			tw = 0.55 * r.height;
			mp.copyFrom(new tannus_geom_TPoint(r.x + r.width / 2,r.y,0));
			var _g18 = 0;
			var _g22 = [tri.one,tri.two,tri.three];
			while(_g18 < _g22.length) {
				var item2 = _g22[_g18];
				++_g18;
				item2.copyFrom(mp);
			}
			var _g19 = tri.two;
			var nx2 = _g19.get_x() - tw / 2;
			_g19.set_x(nx2);
			var _g110 = tri.three;
			var nx3 = _g110.get_x() + tw / 2;
			_g110.set_x(nx3);
			var _g111 = tri.one;
			var ny4 = _g111.get_y() - tw;
			_g111.set_y(ny4);
			break;
		case 2:
			tw = 0.55 * r.height;
			mp.copyFrom(new tannus_geom_TPoint(r.x + r.width / 2,r.y + r.height,0));
			var _g112 = 0;
			var _g23 = [tri.one,tri.two,tri.three];
			while(_g112 < _g23.length) {
				var item3 = _g23[_g112];
				++_g112;
				item3.copyFrom(mp);
			}
			var _g113 = tri.two;
			var nx4 = _g113.get_x() - tw / 2;
			_g113.set_x(nx4);
			var _g114 = tri.three;
			var nx5 = _g114.get_x() + tw / 2;
			_g114.set_x(nx5);
			var _g115 = tri.one;
			var ny5 = _g115.get_y() + tw;
			_g115.set_y(ny5);
			break;
		default:
			throw new js__$Boot_HaxeError("fuck you");
		}
		c.set_strokeStyle(this.borderColor.toString());
		c.set_lineWidth(this.borderWidth);
		c.set_fillStyle(this.backgroundColor.toString());
		c.ctx.beginPath();
		c.moveTo(tri.one.get_x(),tri.one.get_y());
		c.lineTo(tri.three.get_x(),tri.three.get_y());
		c.lineTo(tri.two.get_x(),tri.two.get_y());
		c.ctx.closePath();
		c.ctx.fill();
		c.ctx.stroke();
		var _g3 = this.direction;
		switch(_g3) {
		case 3:case 1:
			c.fillRect(tri.one.get_x() - 1,tri.one.get_y(),c.get_lineWidth() + 1,tri.two.get_y() - tri.one.get_y() - 1);
			break;
		case 0:case 2:
			c.fillRect(tri.two.get_x(),tri.two.get_y() - 1,tri.three.get_x() - tri.two.get_x() - 1,c.get_lineWidth() + 1);
			break;
		}
	}
	,get_x: function() {
		return this.target.x;
	}
	,set_x: function(v) {
		return this.target.x = v;
	}
	,get_y: function() {
		return this.target.y;
	}
	,set_y: function(v) {
		return this.target.y = v;
	}
	,get_text: function() {
		return this.box.get_text();
	}
	,set_text: function(v) {
		return this.box.set_text(v);
	}
	,get_rect: function() {
		var r = new tannus_geom_CRectangle(0,0,0,0);
		r.set_w(this.box.get_width() + this.padding.get_horizontal());
		r.set_h(this.box.get_height() + this.padding.get_vertical());
		var _g = this.direction;
		switch(_g) {
		case 3:
			r.x = this.target.x - r.width - this.margin - this.get_tailSize();
			r.set_centerY(this.target.get_centerY());
			break;
		case 1:
			r.x = this.target.x + this.target.width + this.margin + this.get_tailSize();
			r.set_centerY(this.target.get_centerY());
			break;
		case 0:
			r.set_centerX(this.target.get_centerX());
			r.y = this.target.y + this.target.height + this.margin + this.get_tailSize();
			break;
		case 2:
			r.set_centerX(this.target.get_centerX());
			r.y = this.target.y - r.height - this.margin - this.get_tailSize();
			break;
		}
		return r;
	}
	,get_tailSize: function() {
		return (function($this) {
			var $r;
			var _g = $this.direction;
			$r = (function($this) {
				var $r;
				switch(_g) {
				case 3:case 1:
					$r = 0.45;
					break;
				case 2:case 0:
					$r = 0.55;
					break;
				}
				return $r;
			}($this));
			return $r;
		}(this)) * (this.box.get_height() + this.padding.get_vertical());
	}
	,get_textColor: function() {
		return this.box.get_color();
	}
	,set_textColor: function(v) {
		return this.box.set_color(v);
	}
	,get_multiline: function() {
		return this.box.multiline;
	}
	,set_multiline: function(v) {
		return this.box.multiline = v;
	}
	,get_fontFamily: function() {
		return this.box.get_fontFamily();
	}
	,set_fontFamily: function(v) {
		return this.box.set_fontFamily(v);
	}
	,get_fontSize: function() {
		return this.box.get_fontSize();
	}
	,set_fontSize: function(v) {
		return this.box.set_fontSize(v);
	}
	,__class__: gryffin_ui_Tooltip
	,__properties__: $extend(gryffin_core_Entity.prototype.__properties__,{set_fontSize:"set_fontSize",get_fontSize:"get_fontSize",set_fontFamily:"set_fontFamily",get_fontFamily:"get_fontFamily",set_multiline:"set_multiline",get_multiline:"get_multiline",set_textColor:"set_textColor",get_textColor:"get_textColor",get_tailSize:"get_tailSize",get_rect:"get_rect",set_text:"set_text",get_text:"get_text",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"})
});
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = ["haxe","Serializer"];
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var x = this.shash.get(s);
		if(x != null) {
			this.buf.b += "R";
			if(x == null) this.buf.b += "null"; else this.buf.b += "" + x;
			return;
		}
		this.shash.set(s,this.scount++);
		this.buf.b += "y";
		s = encodeURIComponent(s);
		if(s.length == null) this.buf.b += "null"; else this.buf.b += "" + s.length;
		this.buf.b += ":";
		if(s == null) this.buf.b += "null"; else this.buf.b += "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				if(i == null) this.buf.b += "null"; else this.buf.b += "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		{
			var _g = Type["typeof"](v);
			switch(_g[1]) {
			case 0:
				this.buf.b += "n";
				break;
			case 1:
				var v1 = v;
				if(v1 == 0) {
					this.buf.b += "z";
					return;
				}
				this.buf.b += "i";
				if(v1 == null) this.buf.b += "null"; else this.buf.b += "" + v1;
				break;
			case 2:
				var v2 = v;
				if(isNaN(v2)) this.buf.b += "k"; else if(!isFinite(v2)) if(v2 < 0) this.buf.b += "m"; else this.buf.b += "p"; else {
					this.buf.b += "d";
					if(v2 == null) this.buf.b += "null"; else this.buf.b += "" + v2;
				}
				break;
			case 3:
				if(v) this.buf.b += "t"; else this.buf.b += "f";
				break;
			case 6:
				var c = _g[2];
				if(c == String) {
					this.serializeString(v);
					return;
				}
				if(this.useCache && this.serializeRef(v)) return;
				switch(c) {
				case Array:
					var ucount = 0;
					this.buf.b += "a";
					var l = v.length;
					var _g1 = 0;
					while(_g1 < l) {
						var i = _g1++;
						if(v[i] == null) ucount++; else {
							if(ucount > 0) {
								if(ucount == 1) this.buf.b += "n"; else {
									this.buf.b += "u";
									if(ucount == null) this.buf.b += "null"; else this.buf.b += "" + ucount;
								}
								ucount = 0;
							}
							this.serialize(v[i]);
						}
					}
					if(ucount > 0) {
						if(ucount == 1) this.buf.b += "n"; else {
							this.buf.b += "u";
							if(ucount == null) this.buf.b += "null"; else this.buf.b += "" + ucount;
						}
					}
					this.buf.b += "h";
					break;
				case List:
					this.buf.b += "l";
					var v3 = v;
					var _g1_head = v3.h;
					var _g1_val = null;
					while(_g1_head != null) {
						var i1;
						_g1_val = _g1_head[0];
						_g1_head = _g1_head[1];
						i1 = _g1_val;
						this.serialize(i1);
					}
					this.buf.b += "h";
					break;
				case Date:
					var d = v;
					this.buf.b += "v";
					this.buf.add(d.getTime());
					break;
				case haxe_ds_StringMap:
					this.buf.b += "b";
					var v4 = v;
					var $it0 = v4.keys();
					while( $it0.hasNext() ) {
						var k = $it0.next();
						this.serializeString(k);
						this.serialize(__map_reserved[k] != null?v4.getReserved(k):v4.h[k]);
					}
					this.buf.b += "h";
					break;
				case haxe_ds_IntMap:
					this.buf.b += "q";
					var v5 = v;
					var $it1 = v5.keys();
					while( $it1.hasNext() ) {
						var k1 = $it1.next();
						this.buf.b += ":";
						if(k1 == null) this.buf.b += "null"; else this.buf.b += "" + k1;
						this.serialize(v5.h[k1]);
					}
					this.buf.b += "h";
					break;
				case haxe_ds_ObjectMap:
					this.buf.b += "M";
					var v6 = v;
					var $it2 = v6.keys();
					while( $it2.hasNext() ) {
						var k2 = $it2.next();
						var id = Reflect.field(k2,"__id__");
						Reflect.deleteField(k2,"__id__");
						this.serialize(k2);
						k2.__id__ = id;
						this.serialize(v6.h[k2.__id__]);
					}
					this.buf.b += "h";
					break;
				case haxe_io_Bytes:
					var v7 = v;
					var i2 = 0;
					var max = v7.length - 2;
					var charsBuf = new StringBuf();
					var b64 = haxe_Serializer.BASE64;
					while(i2 < max) {
						var b1 = v7.get(i2++);
						var b2 = v7.get(i2++);
						var b3 = v7.get(i2++);
						charsBuf.add(b64.charAt(b1 >> 2));
						charsBuf.add(b64.charAt((b1 << 4 | b2 >> 4) & 63));
						charsBuf.add(b64.charAt((b2 << 2 | b3 >> 6) & 63));
						charsBuf.add(b64.charAt(b3 & 63));
					}
					if(i2 == max) {
						var b11 = v7.get(i2++);
						var b21 = v7.get(i2++);
						charsBuf.add(b64.charAt(b11 >> 2));
						charsBuf.add(b64.charAt((b11 << 4 | b21 >> 4) & 63));
						charsBuf.add(b64.charAt(b21 << 2 & 63));
					} else if(i2 == max + 1) {
						var b12 = v7.get(i2++);
						charsBuf.add(b64.charAt(b12 >> 2));
						charsBuf.add(b64.charAt(b12 << 4 & 63));
					}
					var chars = charsBuf.b;
					this.buf.b += "s";
					if(chars.length == null) this.buf.b += "null"; else this.buf.b += "" + chars.length;
					this.buf.b += ":";
					if(chars == null) this.buf.b += "null"; else this.buf.b += "" + chars;
					break;
				default:
					if(this.useCache) this.cache.pop();
					if(v.hxSerialize != null) {
						this.buf.b += "C";
						this.serializeString(Type.getClassName(c));
						if(this.useCache) this.cache.push(v);
						v.hxSerialize(this);
						this.buf.b += "g";
					} else {
						this.buf.b += "c";
						this.serializeString(Type.getClassName(c));
						if(this.useCache) this.cache.push(v);
						this.serializeFields(v);
					}
				}
				break;
			case 4:
				if(js_Boot.__instanceof(v,Class)) {
					var className = Type.getClassName(v);
					this.buf.b += "A";
					this.serializeString(className);
				} else if(js_Boot.__instanceof(v,Enum)) {
					this.buf.b += "B";
					this.serializeString(Type.getEnumName(v));
				} else {
					if(this.useCache && this.serializeRef(v)) return;
					this.buf.b += "o";
					this.serializeFields(v);
				}
				break;
			case 7:
				var e = _g[2];
				if(this.useCache) {
					if(this.serializeRef(v)) return;
					this.cache.pop();
				}
				if(this.useEnumIndex) this.buf.b += "j"; else this.buf.b += "w";
				this.serializeString(Type.getEnumName(e));
				if(this.useEnumIndex) {
					this.buf.b += ":";
					this.buf.b += Std.string(v[1]);
				} else this.serializeString(v[0]);
				this.buf.b += ":";
				var l1 = v.length;
				this.buf.b += Std.string(l1 - 2);
				var _g11 = 2;
				while(_g11 < l1) {
					var i3 = _g11++;
					this.serialize(v[i3]);
				}
				if(this.useCache) this.cache.push(v);
				break;
			case 5:
				throw new js__$Boot_HaxeError("Cannot serialize function");
				break;
			default:
				throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
			}
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = Type;
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.setResolver(r);
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = ["haxe","Unserializer"];
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	setResolver: function(r) {
		if(r == null) this.resolver = { resolveClass : function(_) {
			return null;
		}, resolveEnum : function(_1) {
			return null;
		}}; else this.resolver = r;
	}
	,get: function(p) {
		return this.buf.charCodeAt(p);
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) break;
			if(c == 45) {
				if(this.pos != fpos) break;
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) break;
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) k *= -1;
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c >= 43 && c < 58 || c == 101 || c == 69) this.pos++; else break;
		}
		return Std.parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) throw new js__$Boot_HaxeError("Invalid object");
			if(this.buf.charCodeAt(this.pos) == 103) break;
			var k = this.unserialize();
			if(!(typeof(k) == "string")) throw new js__$Boot_HaxeError("Invalid object key");
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.get(this.pos++) != 58) throw new js__$Boot_HaxeError("Invalid enum format");
		var nargs = this.readDigits();
		if(nargs == 0) return Type.createEnum(edecl,tag);
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.get(this.pos++);
		switch(_g) {
		case 110:
			return null;
		case 116:
			return true;
		case 102:
			return false;
		case 122:
			return 0;
		case 105:
			return this.readDigits();
		case 100:
			return this.readFloat();
		case 121:
			var len = this.readDigits();
			if(this.get(this.pos++) != 58 || this.length - this.pos < len) throw new js__$Boot_HaxeError("Invalid string length");
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 107:
			return NaN;
		case 109:
			return -Infinity;
		case 112:
			return Infinity;
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else a.push(this.unserialize());
			}
			return a;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 114:
			var n1 = this.readDigits();
			if(n1 < 0 || n1 >= this.cache.length) throw new js__$Boot_HaxeError("Invalid reference");
			return this.cache[n1];
		case 82:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.scache.length) throw new js__$Boot_HaxeError("Invalid string reference");
			return this.scache[n2];
		case 120:
			throw new js__$Boot_HaxeError(this.unserialize());
			break;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) throw new js__$Boot_HaxeError("Class not found " + name);
			var o1 = Type.createEmptyInstance(cl);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 119:
			var name1 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name1);
			if(edecl == null) throw new js__$Boot_HaxeError("Enum not found " + name1);
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 106:
			var name2 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name2);
			if(edecl1 == null) throw new js__$Boot_HaxeError("Enum not found " + name2);
			this.pos++;
			var index = this.readDigits();
			var tag = Type.getEnumConstructs(edecl1)[index];
			if(tag == null) throw new js__$Boot_HaxeError("Unknown enum index " + name2 + "@" + index);
			var e1 = this.unserializeEnum(edecl1,tag);
			this.cache.push(e1);
			return e1;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf1 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				h.set(s1,this.unserialize());
			}
			this.pos++;
			return h;
		case 113:
			var h1 = new haxe_ds_IntMap();
			this.cache.push(h1);
			var buf3 = this.buf;
			var c1 = this.get(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				h1.set(i,this.unserialize());
				c1 = this.get(this.pos++);
			}
			if(c1 != 104) throw new js__$Boot_HaxeError("Invalid IntMap format");
			return h1;
		case 77:
			var h2 = new haxe_ds_ObjectMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s2 = this.unserialize();
				h2.set(s2,this.unserialize());
			}
			this.pos++;
			return h2;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				var s3 = HxOverrides.substr(this.buf,this.pos,19);
				d = HxOverrides.strDate(s3);
				this.pos += 19;
			} else {
				var t = this.readFloat();
				var d1 = new Date();
				d1.setTime(t);
				d = d1;
			}
			this.cache.push(d);
			return d;
		case 115:
			var len1 = this.readDigits();
			var buf5 = this.buf;
			if(this.get(this.pos++) != 58 || this.length - this.pos < len1) throw new js__$Boot_HaxeError("Invalid bytes length");
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len1 & 3;
			var size;
			size = (len1 >> 2) * 3 + (rest >= 2?rest - 1:0);
			var max = i1 + (len1 - rest);
			var bytes = haxe_io_Bytes.alloc(size);
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c2 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c11 << 2 | c2 >> 4);
				var c3 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c2 << 4 | c3 >> 2);
				var c4 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c3 << 6 | c4);
			}
			if(rest >= 2) {
				var c12 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c21 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c12 << 2 | c21 >> 4);
				if(rest == 3) {
					var c31 = codes[StringTools.fastCodeAt(buf5,i1++)];
					bytes.set(bpos++,c21 << 4 | c31 >> 2);
				}
			}
			this.pos += len1;
			this.cache.push(bytes);
			return bytes;
		case 67:
			var name3 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name3);
			if(cl1 == null) throw new js__$Boot_HaxeError("Class not found " + name3);
			var o2 = Type.createEmptyInstance(cl1);
			this.cache.push(o2);
			o2.hxUnserialize(this);
			if(this.get(this.pos++) != 103) throw new js__$Boot_HaxeError("Invalid custom data");
			return o2;
		case 65:
			var name4 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name4);
			if(cl2 == null) throw new js__$Boot_HaxeError("Class not found " + name4);
			return cl2;
		case 66:
			var name5 = this.unserialize();
			var e2 = this.resolver.resolveEnum(name5);
			if(e2 == null) throw new js__$Boot_HaxeError("Enum not found " + name5);
			return e2;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) return hb;
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) break;
				s += fcc(c);
			} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) complement = true;
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		var _g = bytes.length % 3;
		switch(_g) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) complement = true;
	if(complement) while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) nbits++;
	if(nbits > 8 || len != 1 << nbits) throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = haxe_io_Bytes.alloc(size + (b.length * 8 % nbits == 0?0:1));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.get(pin++);
			}
			curbits -= nbits;
			out.set(pout++,base.b[buf >> curbits & mask]);
		}
		if(curbits > 0) out.set(pout++,base.b[buf << nbits - curbits & mask]);
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) this.initTable();
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = haxe_io_Bytes.alloc(size);
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.get(pin++)];
				if(i == -1) throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				buf |= i;
			}
			curbits -= 8;
			out.set(pout++,buf >> curbits & 255);
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Crc32 = function() { };
$hxClasses["haxe.crypto.Crc32"] = haxe_crypto_Crc32;
haxe_crypto_Crc32.__name__ = ["haxe","crypto","Crc32"];
haxe_crypto_Crc32.make = function(data) {
	var init = -1;
	var crc = init;
	var b = data.b.buffer;
	var _g1 = 0;
	var _g = data.length;
	while(_g1 < _g) {
		var i = _g1++;
		var tmp = (crc ^ b.bytes[i]) & 255;
		var _g2 = 0;
		while(_g2 < 8) {
			var j = _g2++;
			if((tmp & 1) == 1) tmp = tmp >>> 1 ^ -306674912; else tmp >>>= 1;
		}
		crc = crc >>> 8 ^ tmp;
	}
	return crc ^ init;
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = ["haxe","ds","ArraySort"];
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) return;
		var _g = from + 1;
		while(_g < to) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) haxe_ds_ArraySort.swap(a,j - 1,j); else break;
				j--;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	var new_mid;
	if(len1 == 0 || len2 == 0) return;
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) haxe_ds_ArraySort.swap(a,pivot,from);
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	var n;
	if(from == mid || mid == to) return;
	n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) p2 += shift; else p2 = from + (shift - (to - p2));
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) len = half; else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else len = half;
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = ["haxe","ds","BalancedTree"];
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) return node.value;
			if(c < 0) node = node.left; else node = node.right;
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,String) ) {
				return false;
			} else throw(e);
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) return true; else if(c < 0) node = node.left; else node = node.right;
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		this.iteratorLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) return new haxe_ds_TreeNode(null,k,v,null);
		var c = this.compare(k,node.key);
		if(c == 0) return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null?0:node._height); else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) throw new js__$Boot_HaxeError("Not_found");
		var c = this.compare(k,node.key);
		if(c == 0) return this.merge(node.left,node.right); else if(c < 0) return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right); else return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
	}
	,iteratorLoop: function(node,acc) {
		if(node != null) {
			this.iteratorLoop(node.left,acc);
			acc.push(node.value);
			this.iteratorLoop(node.right,acc);
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) return t2;
		if(t2 == null) return t1;
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) throw new js__$Boot_HaxeError("Not_found"); else if(t.left == null) return t; else return this.minBinding(t.left);
	}
	,removeMinBinding: function(t) {
		if(t.left == null) return t.right; else return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
	}
	,balance: function(l,k,v,r) {
		var hl;
		if(l == null) hl = 0; else hl = l._height;
		var hr;
		if(r == null) hr = 0; else hr = r._height;
		if(hl > hr + 2) {
			if((function($this) {
				var $r;
				var _this = l.left;
				$r = _this == null?0:_this._height;
				return $r;
			}(this)) >= (function($this) {
				var $r;
				var _this1 = l.right;
				$r = _this1 == null?0:_this1._height;
				return $r;
			}(this))) return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r)); else return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
		} else if(hr > hl + 2) {
			if((function($this) {
				var $r;
				var _this2 = r.right;
				$r = _this2 == null?0:_this2._height;
				return $r;
			}(this)) > (function($this) {
				var $r;
				var _this3 = r.left;
				$r = _this3 == null?0:_this3._height;
				return $r;
			}(this))) return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right); else return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
		} else return new haxe_ds_TreeNode(l,k,v,r,(hl > hr?hl:hr) + 1);
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) h = -1;
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) this._height = ((function($this) {
		var $r;
		var _this = $this.left;
		$r = _this == null?0:_this._height;
		return $r;
	}(this)) > (function($this) {
		var $r;
		var _this1 = $this.right;
		$r = _this1 == null?0:_this1._height;
		return $r;
	}(this))?(function($this) {
		var $r;
		var _this2 = $this.left;
		$r = _this2 == null?0:_this2._height;
		return $r;
	}(this)):(function($this) {
		var $r;
		var _this3 = $this.right;
		$r = _this3 == null?0:_this3._height;
		return $r;
	}(this))) + 1; else this._height = h;
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = ["haxe","ds","TreeNode"];
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = ["haxe","ds","EnumValueMap"];
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) return d;
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) return 0;
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) return ld;
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) return d;
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) return this.compare(v1,v2); else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) return this.compareArgs(v1,v2); else return Reflect.compare(v1,v2);
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { };
	this.h.__keys__ = { };
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) a.push(this.h.__keys__[key]);
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		return this.map.get(this.keys[this.index++]);
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) this.setReserved(key,value); else this.h[key] = value;
	}
	,get: function(key) {
		if(__map_reserved[key] != null) return this.getReserved(key);
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) return this.existsReserved(key);
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) this.rh = { };
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) return null; else return this.rh["$" + key];
	}
	,existsReserved: function(key) {
		if(this.rh == null) return false;
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) return false;
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) return false;
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		var _this = this.arrayKeys();
		return HxOverrides.iter(_this);
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) out.push(key);
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) out.push(key.substr(1));
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_BytesBuffer = function() {
	this.b = [];
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = ["haxe","io","BytesBuffer"];
haxe_io_BytesBuffer.prototype = {
	addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		var b1 = this.b;
		var b2 = src.b;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var i = _g1++;
			this.b.push(b2[i]);
		}
	}
	,getBytes: function() {
		var bytes = new haxe_io_Bytes(new Uint8Array(this.b).buffer);
		this.b = null;
		return bytes;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = ["haxe","io","Input"];
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) pos = 0;
	if(len == null) len = b.length - pos;
	if(pos < 0 || len < 0 || pos + len > b.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = ["haxe","io","BytesInput"];
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = ["haxe","io","Output"];
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		var k = len;
		var b = s.b.buffer;
		if(pos < 0 || len < 0 || pos + len > s.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		while(k > 0) {
			this.writeByte(b[pos]);
			pos++;
			k--;
		}
		return len;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			p += k;
			l -= k;
		}
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeUInt16: function(x) {
		if(x < 0 || x >= 65536) throw new js__$Boot_HaxeError(haxe_io_Error.Overflow);
		if(this.bigEndian) {
			this.writeByte(x >> 8);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8);
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,writeString: function(s) {
		var b = haxe_io_Bytes.ofString(s);
		this.writeFullBytes(b,0,b.length);
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = ["haxe","io","BytesOutput"];
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		this.b.b.push(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() { };
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : ["haxe","io","Error"], __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) return 0.0;
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) return 0;
	var af;
	if(f < 0) af = -f; else af = f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) exp = -127; else if(exp > 128) exp = 128;
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608) & 8388607;
	return (f < 0?-2147483648:0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) return 0.0;
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else {
		var av;
		if(v < 0) av = -v; else av = v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig;
		var v1 = (av / Math.pow(2,exp) - 1) * 4503599627370496.;
		sig = Math.round(v1);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0?-2147483648:0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else this.dir = null;
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.withoutDirectory = function(path) {
	var s = new haxe_io_Path(path);
	s.dir = null;
	return s.toString();
};
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) return "";
	return s.dir;
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) return "";
	return s.ext;
};
haxe_io_Path.isAbsolute = function(path) {
	if(StringTools.startsWith(path,"/")) return true;
	if(path.charAt(1) == ":") return true;
	return false;
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null?"":this.dir + (this.backslash?"\\":"/")) + this.file + (this.ext == null?"":"." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_rtti_Meta = function() { };
$hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
haxe_rtti_Meta.__name__ = ["haxe","rtti","Meta"];
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
haxe_rtti_Meta.getFields = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.fields == null) return { }; else return meta.fields;
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = ["haxe","xml","Parser"];
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) strict = false;
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) p = 0;
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(!(c != c)) {
		switch(state) {
		case 0:
			switch(c) {
			case 10:case 13:case 9:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			switch(c) {
			case 60:
				state = 0;
				next = 2;
				break;
			default:
				start = p;
				state = 13;
				continue;
			}
			break;
		case 13:
			if(c == 60) {
				buf.addSub(str,start,p - start);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				nsubs++;
				state = 0;
				next = 2;
			} else if(c == 38) {
				buf.addSub(str,start,p - start);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				nsubs++;
				p += 2;
				state = 1;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") throw new js__$Boot_HaxeError("Expected <![CDATA[");
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") throw new js__$Boot_HaxeError("Expected <!DOCTYPE");
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) throw new js__$Boot_HaxeError("Expected <!--"); else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 63:
				state = 14;
				start = p;
				break;
			case 47:
				if(parent == null) throw new js__$Boot_HaxeError("Expected node name");
				start = p + 1;
				state = 0;
				next = 10;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) throw new js__$Boot_HaxeError("Expected node name");
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				nsubs++;
				break;
			case 62:
				state = 9;
				nsubs++;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) throw new js__$Boot_HaxeError("Expected attribute name");
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) throw new js__$Boot_HaxeError("Duplicate attribute");
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			switch(c) {
			case 61:
				state = 0;
				next = 7;
				break;
			default:
				throw new js__$Boot_HaxeError("Expected =");
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError("Expected \"");
			}
			break;
		case 8:
			switch(c) {
			case 38:
				buf.addSub(str,start,p - start);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 62:
				if(strict) throw new js__$Boot_HaxeError("Invalid unescaped " + String.fromCharCode(c) + " in attribute value"); else if(c == attrValQuote) {
					buf.addSub(str,start,p - start);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			case 60:
				if(strict) throw new js__$Boot_HaxeError("Invalid unescaped " + String.fromCharCode(c) + " in attribute value"); else if(c == attrValQuote) {
					buf.addSub(str,start,p - start);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					buf.addSub(str,start,p - start);
					var val2 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val2);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 11:
			switch(c) {
			case 62:
				state = 1;
				break;
			default:
				throw new js__$Boot_HaxeError("Expected >");
			}
			break;
		case 12:
			switch(c) {
			case 62:
				if(nsubs == 0) parent.addChild(Xml.createPCData(""));
				return p;
			default:
				throw new js__$Boot_HaxeError("Expected >");
			}
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) throw new js__$Boot_HaxeError("Expected node name");
				var v = HxOverrides.substr(str,start,p - start);
				if(v != (function($this) {
					var $r;
					if(parent.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					$r = parent.nodeName;
					return $r;
				}(this))) throw new js__$Boot_HaxeError("Expected </" + (function($this) {
					var $r;
					if(parent.nodeType != Xml.Element) throw "Bad node type, expected Element but found " + parent.nodeType;
					$r = parent.nodeName;
					return $r;
				}(this)) + ">");
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) nbrackets++; else if(c == 93) nbrackets--; else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				state = 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				p++;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1;
					if(s.charCodeAt(1) == 120) c1 = Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)); else c1 = Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCharCode(c1);
				} else if(!haxe_xml_Parser.escapes.exists(s)) {
					if(strict) throw new js__$Boot_HaxeError("Undefined entity: " + s);
					buf.b += Std.string("&" + s + ";");
				} else buf.add(haxe_xml_Parser.escapes.get(s));
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) throw new js__$Boot_HaxeError("Invalid character in entity: " + String.fromCharCode(c));
				buf.b += "&";
				buf.addSub(str,start,p - start);
				p--;
				start = p;
				state = escapeNext;
			}
			break;
		}
		c = StringTools.fastCodeAt(str,++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			buf.addSub(str,start,p - start);
			parent.addChild(Xml.createPCData(buf.b));
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		buf.addSub(str,start,p - start);
		parent.addChild(Xml.createPCData(buf.b));
		return p;
	}
	throw new js__$Boot_HaxeError("Unexpected end");
};
var haxe_zip_ExtraField = $hxClasses["haxe.zip.ExtraField"] = { __ename__ : ["haxe","zip","ExtraField"], __constructs__ : ["FUnknown","FInfoZipUnicodePath","FUtf8"] };
haxe_zip_ExtraField.FUnknown = function(tag,bytes) { var $x = ["FUnknown",0,tag,bytes]; $x.__enum__ = haxe_zip_ExtraField; $x.toString = $estr; return $x; };
haxe_zip_ExtraField.FInfoZipUnicodePath = function(name,crc) { var $x = ["FInfoZipUnicodePath",1,name,crc]; $x.__enum__ = haxe_zip_ExtraField; $x.toString = $estr; return $x; };
haxe_zip_ExtraField.FUtf8 = ["FUtf8",2];
haxe_zip_ExtraField.FUtf8.toString = $estr;
haxe_zip_ExtraField.FUtf8.__enum__ = haxe_zip_ExtraField;
var haxe_zip_Writer = function(o) {
	this.o = o;
	this.files = new List();
};
$hxClasses["haxe.zip.Writer"] = haxe_zip_Writer;
haxe_zip_Writer.__name__ = ["haxe","zip","Writer"];
haxe_zip_Writer.prototype = {
	writeZipDate: function(date) {
		var hour = date.getHours();
		var min = date.getMinutes();
		var sec = date.getSeconds() >> 1;
		this.o.writeUInt16(hour << 11 | min << 5 | sec);
		var year = date.getFullYear() - 1980;
		var month = date.getMonth() + 1;
		var day = date.getDate();
		this.o.writeUInt16(year << 9 | month << 5 | day);
	}
	,writeEntryHeader: function(f) {
		var o = this.o;
		var flags = 0;
		if(f.extraFields != null) {
			var _g_head = f.extraFields.h;
			var _g_val = null;
			while(_g_head != null) {
				var e1;
				e1 = (function($this) {
					var $r;
					_g_val = _g_head[0];
					_g_head = _g_head[1];
					$r = _g_val;
					return $r;
				}(this));
				switch(e1[1]) {
				case 2:
					flags |= 2048;
					break;
				default:
				}
			}
		}
		o.writeInt32(67324752);
		o.writeUInt16(20);
		o.writeUInt16(flags);
		if(f.data == null) {
			f.fileSize = 0;
			f.dataSize = 0;
			f.crc32 = 0;
			f.compressed = false;
			f.data = haxe_io_Bytes.alloc(0);
		} else {
			if(f.crc32 == null) {
				if(f.compressed) throw new js__$Boot_HaxeError("CRC32 must be processed before compression");
				f.crc32 = haxe_crypto_Crc32.make(f.data);
			}
			if(!f.compressed) f.fileSize = f.data.length;
			f.dataSize = f.data.length;
		}
		o.writeUInt16(f.compressed?8:0);
		this.writeZipDate(f.fileTime);
		o.writeInt32(f.crc32);
		o.writeInt32(f.dataSize);
		o.writeInt32(f.fileSize);
		o.writeUInt16(f.fileName.length);
		var e = new haxe_io_BytesOutput();
		if(f.extraFields != null) {
			var _g_head1 = f.extraFields.h;
			var _g_val1 = null;
			while(_g_head1 != null) {
				var f1;
				f1 = (function($this) {
					var $r;
					_g_val1 = _g_head1[0];
					_g_head1 = _g_head1[1];
					$r = _g_val1;
					return $r;
				}(this));
				switch(f1[1]) {
				case 1:
					var crc = f1[3];
					var name = f1[2];
					var namebytes = haxe_io_Bytes.ofString(name);
					e.writeUInt16(28789);
					e.writeUInt16(namebytes.length + 5);
					e.writeByte(1);
					e.writeInt32(crc);
					e.write(namebytes);
					break;
				case 0:
					var bytes = f1[3];
					var tag = f1[2];
					e.writeUInt16(tag);
					e.writeUInt16(bytes.length);
					e.write(bytes);
					break;
				case 2:
					break;
				}
			}
		}
		var ebytes = e.getBytes();
		o.writeUInt16(ebytes.length);
		o.writeString(f.fileName);
		o.write(ebytes);
		this.files.add({ name : f.fileName, compressed : f.compressed, clen : f.data.length, size : f.fileSize, crc : f.crc32, date : f.fileTime, fields : ebytes});
	}
	,write: function(files) {
		var _g_head = files.h;
		var _g_val = null;
		while(_g_head != null) {
			var f;
			f = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			this.writeEntryHeader(f);
			this.o.writeFullBytes(f.data,0,f.data.length);
		}
		this.writeCDR();
	}
	,writeCDR: function() {
		var cdr_size = 0;
		var cdr_offset = 0;
		var _g_head = this.files.h;
		var _g_val = null;
		while(_g_head != null) {
			var f;
			f = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			var namelen = f.name.length;
			var extraFieldsLength = f.fields.length;
			this.o.writeInt32(33639248);
			this.o.writeUInt16(20);
			this.o.writeUInt16(20);
			this.o.writeUInt16(0);
			this.o.writeUInt16(f.compressed?8:0);
			this.writeZipDate(f.date);
			this.o.writeInt32(f.crc);
			this.o.writeInt32(f.clen);
			this.o.writeInt32(f.size);
			this.o.writeUInt16(namelen);
			this.o.writeUInt16(extraFieldsLength);
			this.o.writeUInt16(0);
			this.o.writeUInt16(0);
			this.o.writeUInt16(0);
			this.o.writeInt32(0);
			this.o.writeInt32(cdr_offset);
			this.o.writeString(f.name);
			this.o.write(f.fields);
			cdr_size += 46 + namelen + extraFieldsLength;
			cdr_offset += 30 + namelen + extraFieldsLength + f.clen;
		}
		this.o.writeInt32(101010256);
		this.o.writeUInt16(0);
		this.o.writeUInt16(0);
		this.o.writeUInt16(this.files.length);
		this.o.writeUInt16(this.files.length);
		this.o.writeInt32(cdr_size);
		this.o.writeInt32(cdr_offset);
		this.o.writeUInt16(0);
	}
	,__class__: haxe_zip_Writer
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) Error.captureStackTrace(this,js__$Boot_HaxeError);
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else {
		var cl = o.__class__;
		if(cl != null) return cl;
		var name = js_Boot.__nativeClassName(o);
		if(name != null) return js_Boot.__resolveNativeClass(name);
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str2 = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i1 = _g1++;
					if(i1 != 2) str2 += "," + js_Boot.__string_rec(o[i1],s); else str2 += js_Boot.__string_rec(o[i1],s);
				}
				return str2 + ")";
			}
			var l = o.length;
			var i;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) str += ", \n";
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) return true;
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) return o; else throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") return null;
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	if(typeof window != "undefined") return window[name]; else return global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = ["js","Browser"];
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		return s;
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return null;
	}
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null?null:end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	if(byteOffset == null) this.offset = 0; else this.offset = byteOffset;
	if(byteLength == null) this.length = buffer.byteLength - this.offset; else this.length = byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) return v - 256; else return v;
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) return v - 65536; else return v;
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8; else return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) return a | b << 8 | c << 16 | d << 24; else return d | c << 8 | b << 16 | a << 24;
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) return v + 4294967296.; else return v;
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian?a:b,littleEndian?b:a);
	}
	,setInt8: function(byteOffset,value) {
		if(value < 0) this.buf.a[byteOffset + this.offset] = value + 128 & 255; else this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0?value + 65536:value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g = 0;
		while(_g < arg1) {
			var i = _g++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) offset = 0;
		if(length == null) length = buffer.byteLength - offset;
		if(offset == 0) arr = buffer.a; else arr = buffer.a.slice(offset,offset + length);
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	var t = this;
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			t[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			t[i1 + offset] = a1[i1];
		}
	} else throw new js__$Boot_HaxeError("TODO");
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var t = this;
	var a = js_html_compat_Uint8Array._new(t.slice(start,end));
	a.byteOffset = start;
	return a;
};
var tannus_chrome_Clipboard = $hx_exports.clipboard = function() { };
$hxClasses["tannus.chrome.Clipboard"] = tannus_chrome_Clipboard;
tannus_chrome_Clipboard.__name__ = ["tannus","chrome","Clipboard"];
tannus_chrome_Clipboard.__properties__ = {get_doc:"get_doc",get_win:"get_win"}
tannus_chrome_Clipboard.getData = function() {
	var i = tannus_chrome_Clipboard.inp();
	i.focus();
	tannus_chrome_Clipboard.get_doc().execCommand("paste");
	var result = i.value;
	i.remove();
	return result;
};
tannus_chrome_Clipboard.setData = function(s) {
	var i = tannus_chrome_Clipboard.inp();
	i.focus();
	i.value = s;
	tannus_chrome_Clipboard.get_doc().execCommand("selectAll");
	i.select();
	tannus_chrome_Clipboard.get_doc().execCommand("copy",false,null);
	i.remove();
};
tannus_chrome_Clipboard.inp = function() {
	var i = tannus_chrome_Clipboard.get_doc().createElement("textarea");
	tannus_chrome_Clipboard.get_doc().body.appendChild(i);
	return i;
};
tannus_chrome_Clipboard.get_win = function() {
	return window;
};
tannus_chrome_Clipboard.get_doc = function() {
	var this1 = window;
	return this1.document;
};
var tannus_chrome_FileSystem = function() { };
$hxClasses["tannus.chrome.FileSystem"] = tannus_chrome_FileSystem;
tannus_chrome_FileSystem.__name__ = ["tannus","chrome","FileSystem"];
tannus_chrome_FileSystem.__properties__ = {get_lib:"get_lib"}
tannus_chrome_FileSystem.requestFileSystem = function(volume,cb) {
	chrome.fileSystem.requestFileSystem({ 'volumeId' : volume, 'writable' : true},cb);
};
tannus_chrome_FileSystem.getVolumeList = function(cb) {
	chrome.fileSystem.getVolumeList(cb);
};
tannus_chrome_FileSystem.chooseEntry = function(options,cb) {
	chrome.fileSystem.chooseEntry(options,function(entry) {
		var all = [];
		var tn = tannus_internal_TypeTools.typename(entry);
		if(entry != null) {
			if(tn == "Array") all = all.concat(entry); else all.push(entry);
		}
		console.log(all);
		cb(all);
	});
};
tannus_chrome_FileSystem.retainEntry = function(entry) {
	return chrome.fileSystem.retainEntry(entry);
};
tannus_chrome_FileSystem.restoreEntry = function(id,cb) {
	chrome.fileSystem.restoreEntry(id,cb);
};
tannus_chrome_FileSystem.isRestorable = function(id,cb) {
	chrome.fileSystem.isRestorable(id,cb);
};
tannus_chrome_FileSystem.canRestore = function(id) {
	return new tannus_ds_Promise(function(accept,reject) {
		chrome.fileSystem.isRestorable(id,function(status) {
			accept(status);
		});
	},null).bool();
};
tannus_chrome_FileSystem.chooseDirectory = function() {
	return new tannus_ds_Promise(function(accept,reject) {
		tannus_chrome_FileSystem.chooseEntry({ type : "openDirectory"},function(entries) {
			var e = entries.shift();
			if(e == null || !e.isDirectory) reject("Not a Directory!"); else accept(e);
		});
	},null);
};
tannus_chrome_FileSystem.chooseFile = function(writable,mustExist) {
	if(mustExist == null) mustExist = true;
	if(writable == null) writable = false;
	return new tannus_html_fs_FilePromise(function(provide) {
		var options = { };
		switch(writable) {
		case true:
			switch(mustExist) {
			case true:
				options.type = "openWritableFile";
				break;
			case false:
				options.type = "saveFile";
				break;
			}
			break;
		default:
			switch(mustExist) {
			case false:
				options.type = "saveFile";
				break;
			default:
				options.type = "openFile";
			}
		}
		tannus_chrome_FileSystem.chooseEntry(options,function(entries) {
			provide(entries[0]);
		});
	});
};
tannus_chrome_FileSystem.saveAs = function(name) {
	return new tannus_ds_Promise(function(accept,reject) {
		var options = { 'type' : "saveFile", 'suggestedName' : name};
		tannus_chrome_FileSystem.chooseEntry(options,function(entries) {
			if(chrome.runtime.lastError != null) {
				var error = chrome.runtime.lastError;
				console.log(error);
				reject(error);
				return;
			}
			if(entries.length > 0) accept(entries[0]); else reject("No File Selected");
		});
	},null);
};
tannus_chrome_FileSystem.getDisplayPath = function(entry,cb) {
	chrome.fileSystem.getDisplayPath(entry,cb);
};
tannus_chrome_FileSystem.get_lib = function() {
	return chrome.fileSystem;
};
var tannus_chrome_MediaGalleries = function() { };
$hxClasses["tannus.chrome.MediaGalleries"] = tannus_chrome_MediaGalleries;
tannus_chrome_MediaGalleries.__name__ = ["tannus","chrome","MediaGalleries"];
tannus_chrome_MediaGalleries.__properties__ = {get_lib:"get_lib"}
tannus_chrome_MediaGalleries.getMediaFileSystems = function(callback) {
	chrome.mediaGalleries.getMediaFileSystems({ },callback);
};
tannus_chrome_MediaGalleries.addUserSelectedFolder = function(callback) {
	chrome.mediaGalleries.addUserSelectedFolder(callback);
};
tannus_chrome_MediaGalleries.getMediaFileSystemMetadata = function(fileSystem) {
	return chrome.mediaGalleries.getMediaFileSystemMetadata(fileSystem);
};
tannus_chrome_MediaGalleries.getMetadata = function(mediaFile,callback) {
	chrome.mediaGalleries.getMetadata(mediaFile,null,callback);
};
tannus_chrome_MediaGalleries.scan = function(complete,progress) {
	chrome.mediaGalleries.onScanProgress.addListener(function(details) {
		var _g = details.type;
		switch(_g) {
		case "finish":
			if(complete != null) complete(details);
			break;
		default:
			null;
		}
		if(progress != null) progress(details);
	});
	chrome.mediaGalleries.startMediaScan();
};
tannus_chrome_MediaGalleries.get_lib = function() {
	return chrome.mediaGalleries;
};
var tannus_chrome_Notification = function(id,def) {
	this.id = id;
	this.o = def;
	this.clicked = new tannus_io_VoidSignal();
	this.closed = new tannus_io_VoidSignal();
	this.buttons = [];
	this.pullOptions();
	this.__listen();
};
$hxClasses["tannus.chrome.Notification"] = tannus_chrome_Notification;
tannus_chrome_Notification.__name__ = ["tannus","chrome","Notification"];
tannus_chrome_Notification.prototype = {
	update: function(cb) {
		if(cb == null) cb = function(x) {
			null;
		};
		tannus_chrome_Notifications.update(this.id,this.getOptions(),cb);
	}
	,close: function(cb) {
		if(cb == null) cb = function(x) {
			null;
		};
		chrome.notifications.clear(this.id,cb);
	}
	,pullOptions: function() {
		this.type = this.o.type;
		this.iconUrl = this.o.iconUrl;
		this.title = this.o.title;
		this.message = this.o.message;
		this.contextMessage = this.o.contextMessage;
		this.buttonDefs = this.o.buttons;
		this.buttons = [];
		if(this.buttonDefs != null && this.buttonDefs.length > 0) {
			var _g = 0;
			var _g1 = this.buttonDefs;
			while(_g < _g1.length) {
				var d = _g1[_g];
				++_g;
				this.buttons.push(new tannus_chrome_NotificationButton(this,d));
			}
		}
	}
	,getOptions: function() {
		var keys = ["type","iconUrl","title","message","contextMessage","isClickable"];
		var _o = tannus_ds_CObj.create(this).pluck(keys);
		var no = _o.o;
		no.buttons = this.buttonDefs.slice();
		return no;
	}
	,__click: function(e) {
		if(e == this.id) this.clicked.call();
	}
	,__clickButton: function(e) {
		if(e.notificationId == this.id) {
			var button = this.buttons[e.buttonIndex];
			if(button != null) button.clicked.call();
		}
	}
	,__close: function(e) {
		if(e.notificationId == this.id) {
			this.closed.call();
			this.__delete();
		}
	}
	,__listen: function() {
		chrome.notifications.onClosed.addListener($bind(this,this.__close));
		chrome.notifications.onClicked.addListener($bind(this,this.__click));
		chrome.notifications.onButtonClicked.addListener($bind(this,this.__clickButton));
	}
	,__delete: function() {
		chrome.notifications.onClosed.removeListener($bind(this,this.__close));
		chrome.notifications.onClicked.removeListener($bind(this,this.__click));
		chrome.notifications.onButtonClicked.removeListener($bind(this,this.__clickButton));
	}
	,__class__: tannus_chrome_Notification
};
var tannus_chrome_NotificationButton = function(n,def) {
	this.notification = n;
	this.title = def.title;
	this.iconUrl = def.iconUrl;
	this.clicked = new tannus_io_VoidSignal();
};
$hxClasses["tannus.chrome.NotificationButton"] = tannus_chrome_NotificationButton;
tannus_chrome_NotificationButton.__name__ = ["tannus","chrome","NotificationButton"];
tannus_chrome_NotificationButton.prototype = {
	__class__: tannus_chrome_NotificationButton
};
var tannus_chrome_Notifications = function() { };
$hxClasses["tannus.chrome.Notifications"] = tannus_chrome_Notifications;
tannus_chrome_Notifications.__name__ = ["tannus","chrome","Notifications"];
tannus_chrome_Notifications.__properties__ = {get_lib:"get_lib",get_onButtonClicked:"get_onButtonClicked",get_onClicked:"get_onClicked",get_onClosed:"get_onClosed"}
tannus_chrome_Notifications.createRaw = function(id,options,cb) {
	chrome.notifications.create(id,options,cb);
};
tannus_chrome_Notifications.create = function(options) {
	return new tannus_ds_Promise(function(accept,reject) {
		chrome.notifications.create(null,options,function(id) {
			accept(new tannus_chrome_Notification(id,options));
		});
	},null);
};
tannus_chrome_Notifications.update = function(id,options,cb) {
	chrome.notifications.update(id,options,cb);
};
tannus_chrome_Notifications.clear = function(id,cb) {
	chrome.notifications.clear(id,cb);
};
tannus_chrome_Notifications.getAll = function(cb) {
	chrome.notifications.getAll(cb);
};
tannus_chrome_Notifications.getPermissionLevel = function(cb) {
	chrome.notifications.getPermissionLevel(cb);
};
tannus_chrome_Notifications.getPermission = function(cb) {
	chrome.notifications.getPermissionLevel(function(pm) {
		cb(pm == "granted");
	});
};
tannus_chrome_Notifications.get_onClosed = function() {
	return chrome.notifications.onClosed;
};
tannus_chrome_Notifications.get_onClicked = function() {
	return chrome.notifications.onClicked;
};
tannus_chrome_Notifications.get_onButtonClicked = function() {
	return chrome.notifications.onButtonClicked;
};
tannus_chrome_Notifications.get_lib = function() {
	return chrome.notifications;
};
var tannus_chrome__$Notifications_PermissionLevel_$Impl_$ = {};
$hxClasses["tannus.chrome._Notifications.PermissionLevel_Impl_"] = tannus_chrome__$Notifications_PermissionLevel_$Impl_$;
tannus_chrome__$Notifications_PermissionLevel_$Impl_$.__name__ = ["tannus","chrome","_Notifications","PermissionLevel_Impl_"];
tannus_chrome__$Notifications_PermissionLevel_$Impl_$.toBool = function(this1) {
	return this1 == "granted";
};
tannus_chrome__$Notifications_PermissionLevel_$Impl_$.fromBool = function(b) {
	if(b) return "granted"; else return "denied";
};
var tannus_chrome_Runtime = function() { };
$hxClasses["tannus.chrome.Runtime"] = tannus_chrome_Runtime;
tannus_chrome_Runtime.__name__ = ["tannus","chrome","Runtime"];
tannus_chrome_Runtime.__properties__ = {get_lib:"get_lib",get_lastError:"get_lastError",get_id:"get_id"}
tannus_chrome_Runtime.reload = function() {
	chrome.runtime.reload();
};
tannus_chrome_Runtime.sendMessage = function(tid,data,onresponse) {
	chrome.runtime.sendMessage(tid,data,{ },function(response) {
		if(onresponse != null) {
			var f = onresponse;
			f(response);
		}
	});
};
tannus_chrome_Runtime.onMessageRaw = function(callb) {
	chrome.runtime.onMessage.addListener(callb);
};
tannus_chrome_Runtime.onMessage = function(callb) {
	chrome.runtime.onMessage.addListener(function(d,sendr,sendResponse) {
		callb({ 'data' : d, 'sender' : sendr, 'respond' : sendResponse});
	});
};
tannus_chrome_Runtime.getBackgroundPage = function(cb) {
	if(tannus_chrome_Runtime._bg == null) chrome.runtime.getBackgroundPage(function(w) {
		cb(tannus_chrome_Runtime._bg = w);
	}); else cb(tannus_chrome_Runtime._bg);
};
tannus_chrome_Runtime.isBackgroundPage = function(w,cb) {
	tannus_chrome_Runtime.getBackgroundPage(function(bg) {
		cb(w == bg);
	});
};
tannus_chrome_Runtime.inBackgroundPage = function(cb) {
	tannus_chrome_Runtime.isBackgroundPage(window,cb);
};
tannus_chrome_Runtime.get_id = function() {
	return Std.string(chrome.runtime.id) + "";
};
tannus_chrome_Runtime.get_lastError = function() {
	return chrome.runtime.lastError;
};
tannus_chrome_Runtime.get_lib = function() {
	return chrome.runtime;
};
var tannus_chrome_Storage = function() { };
$hxClasses["tannus.chrome.Storage"] = tannus_chrome_Storage;
tannus_chrome_Storage.__name__ = ["tannus","chrome","Storage"];
tannus_chrome_Storage.__properties__ = {get_sync:"get_sync",get_local:"get_local",get_lib:"get_lib"}
tannus_chrome_Storage.get_lib = function() {
	return chrome.storage;
};
tannus_chrome_Storage.get_local = function() {
	return chrome.storage.local;
};
tannus_chrome_Storage.get_sync = function() {
	return chrome.storage.sync;
};
tannus_chrome_Storage.onChange = function(listener) {
	chrome.storage.onChanged.addListener(function(changes,area) {
		var change = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = Reflect.fields(changes);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			var c = Reflect.getProperty(changes,key);
			change.set(key,(function($this) {
				var $r;
				var cur = c.newValue;
				var prev = c.oldValue;
				$r = [cur,prev];
				return $r;
			}(this)));
		}
		listener(area,change);
	});
};
var tannus_chrome__$StorageArea_StorageArea_$Impl_$ = {};
$hxClasses["tannus.chrome._StorageArea.StorageArea_Impl_"] = tannus_chrome__$StorageArea_StorageArea_$Impl_$;
tannus_chrome__$StorageArea_StorageArea_$Impl_$.__name__ = ["tannus","chrome","_StorageArea","StorageArea_Impl_"];
tannus_chrome__$StorageArea_StorageArea_$Impl_$._new = function(a) {
	return a;
};
tannus_chrome__$StorageArea_StorageArea_$Impl_$.onChange = function(this1,cb) {
	tannus_chrome_Storage.onChange(function(area,changes) {
		switch(area) {
		case "local":
			if(this1 == chrome.storage.local) cb(changes); else null;
			break;
		case "sync":
			if(this1 == chrome.storage.sync) cb(changes); else null;
			break;
		default:
			null;
		}
	});
};
tannus_chrome__$StorageArea_StorageArea_$Impl_$.onChangeField = function(this1,key,cb) {
	var this2 = this1;
	var cb1 = function(changes) {
		if(__map_reserved[key] != null?changes.existsReserved(key):changes.h.hasOwnProperty(key)) {
			var d;
			d = __map_reserved[key] != null?changes.getReserved(key):changes.h[key];
			cb(d);
		}
	};
	tannus_chrome_Storage.onChange(function(area,changes1) {
		switch(area) {
		case "local":
			if(this2 == chrome.storage.local) cb1(changes1); else null;
			break;
		case "sync":
			if(this2 == chrome.storage.sync) cb1(changes1); else null;
			break;
		default:
			null;
		}
	});
};
tannus_chrome__$StorageArea_StorageArea_$Impl_$.watch = function(this1,key,cb) {
	var key1 = key;
	var cb1 = function(change) {
		console.log(tannus_ds__$Delta_Delta_$Impl_$.toString(change));
	};
	var this2 = this1;
	var cb2 = function(changes) {
		if(__map_reserved[key1] != null?changes.existsReserved(key1):changes.h.hasOwnProperty(key1)) {
			var d;
			d = __map_reserved[key1] != null?changes.getReserved(key1):changes.h[key1];
			cb1(d);
		}
	};
	tannus_chrome_Storage.onChange(function(area,changes1) {
		switch(area) {
		case "local":
			if(this2 == chrome.storage.local) cb2(changes1); else null;
			break;
		case "sync":
			if(this2 == chrome.storage.sync) cb2(changes1); else null;
			break;
		default:
			null;
		}
	});
};
tannus_chrome__$StorageArea_StorageArea_$Impl_$.watchAll = function(this1,cb) {
	var this2 = this1;
	var cb1 = cb;
	tannus_chrome_Storage.onChange(function(area,changes) {
		switch(area) {
		case "local":
			if(this2 == chrome.storage.local) cb1(changes); else null;
			break;
		case "sync":
			if(this2 == chrome.storage.sync) cb1(changes); else null;
			break;
		default:
			null;
		}
	});
};
var tannus_chrome_SyncFileSystem = function() { };
$hxClasses["tannus.chrome.SyncFileSystem"] = tannus_chrome_SyncFileSystem;
tannus_chrome_SyncFileSystem.__name__ = ["tannus","chrome","SyncFileSystem"];
tannus_chrome_SyncFileSystem.__properties__ = {get_lib:"get_lib"}
tannus_chrome_SyncFileSystem.requestFileSystem = function(cb) {
	chrome.syncFileSystem.requestFileSystem(cb);
};
tannus_chrome_SyncFileSystem.get_lib = function() {
	return chrome.syncFileSystem;
};
var tannus_chrome__$Tab_Tab_$Impl_$ = {};
$hxClasses["tannus.chrome._Tab.Tab_Impl_"] = tannus_chrome__$Tab_Tab_$Impl_$;
tannus_chrome__$Tab_Tab_$Impl_$.__name__ = ["tannus","chrome","_Tab","Tab_Impl_"];
tannus_chrome__$Tab_Tab_$Impl_$.__properties__ = {get_value:"get_value"}
tannus_chrome__$Tab_Tab_$Impl_$._new = function(ct) {
	return ct;
};
tannus_chrome__$Tab_Tab_$Impl_$.update = function(this1,props,cb) {
	tannus_chrome_Tabs.update(this1.id,props,cb);
};
tannus_chrome__$Tab_Tab_$Impl_$.duplicate = function(this1,cb) {
	tannus_chrome_Tabs.duplicate(this1.id,cb);
};
tannus_chrome__$Tab_Tab_$Impl_$.move = function(this1,offset,window,cb) {
	tannus_chrome_Tabs.move(this1.id,offset,window,cb);
};
tannus_chrome__$Tab_Tab_$Impl_$.remove = function(this1,cb) {
	tannus_chrome_Tabs.remove(this1.id,cb);
};
tannus_chrome__$Tab_Tab_$Impl_$.reload = function(this1,bypassCache,cb) {
	var opts = { };
	if(bypassCache != null) {
		Reflect.setProperty(opts,"bypassCache",bypassCache);
		Reflect.getProperty(opts,"bypassCache");
	}
	tannus_chrome_Tabs.reload(this1.id,opts,function(t) {
		if(cb != null) cb();
	});
};
tannus_chrome__$Tab_Tab_$Impl_$.sendMessage = function(this1,data,onres) {
	chrome.tabs.sendMessage(this1.id,data,{ },onres);
};
tannus_chrome__$Tab_Tab_$Impl_$.executeScript = function(this1,path,code,cb) {
	tannus_chrome_Tabs.executeScript(this1.id,path,code,cb);
};
tannus_chrome__$Tab_Tab_$Impl_$.get_value = function(this1) {
	return this1;
};
var tannus_chrome_Tabs = function() { };
$hxClasses["tannus.chrome.Tabs"] = tannus_chrome_Tabs;
tannus_chrome_Tabs.__name__ = ["tannus","chrome","Tabs"];
tannus_chrome_Tabs.__properties__ = {get_lib:"get_lib"}
tannus_chrome_Tabs.getAll = function(callb) {
	tannus_chrome_Windows.getAll(function(wins) {
		var tablist = [];
		var _g = 0;
		while(_g < wins.length) {
			var win = wins[_g];
			++_g;
			var tabs = win.tabs;
			tablist = tablist.concat(tabs);
		}
		callb(tablist);
	});
};
tannus_chrome_Tabs.query = function(queryStr,cb) {
	tannus_chrome_Tabs.getAll(function(tabs) {
		var otabs = tabs;
		var results = otabs.filter(function(t) {
			var sel = new tannus_nore_CSelector(queryStr);
			return sel.test(t);
		});
		cb(results);
	});
};
tannus_chrome_Tabs.getCurrent = function(cb) {
	chrome.tabs.getCurrent(cb);
};
tannus_chrome_Tabs.get = function(id,cb) {
	chrome.tabs.get(id,cb);
};
tannus_chrome_Tabs.create = function(options,cb) {
	chrome.tabs.create(options,cb);
};
tannus_chrome_Tabs.update = function(id,props,cb) {
	chrome.tabs.update(id,props,function(tab) {
		if(cb != null) cb(tab);
	});
};
tannus_chrome_Tabs.reload = function(id,opts,cb) {
	chrome.tabs.reload(id,opts,function(tab) {
		if(cb != null) cb(tab);
	});
};
tannus_chrome_Tabs.duplicate = function(id,cb) {
	chrome.tabs.duplicate(id,function(clone) {
		if(cb != null) cb(clone);
	});
};
tannus_chrome_Tabs.move = function(id,index,windowId,cb) {
	chrome.tabs.move(id,{ 'windowId' : windowId, 'index' : index},function(tab) {
		cb();
	});
};
tannus_chrome_Tabs.remove = function(id,cb) {
	chrome.tabs.remove(id,function() {
		if(cb != null) cb();
	});
};
tannus_chrome_Tabs.executeScript = function(id,path,code,cb) {
	var opts = { };
	if(path != null) {
		Reflect.setProperty(opts,"file",path);
		Reflect.getProperty(opts,"file");
	}
	if(code != null) {
		Reflect.setProperty(opts,"code",code);
		Reflect.getProperty(opts,"code");
	}
	chrome.tabs.executeScript(id,opts,function(res) {
		if(cb != null) cb();
	});
};
tannus_chrome_Tabs.focusOrCreateTab = function(url,cb) {
	var t = null;
	tannus_chrome_Tabs.getAll(function(tabs) {
		var _g = 0;
		while(_g < tabs.length) {
			var tab = tabs[_g];
			++_g;
			if(tab.url.s == url) t = tab;
		}
		if(t != null) tannus_chrome_Tabs.update(t.id,{ 'active' : true},function(tab1) {
			if(cb != null) cb(tab1);
		}); else {
			var opts = { 'url' : url, 'active' : true};
			tannus_chrome_Tabs.create(opts,function(tab2) {
				if(cb != null) cb(tab2);
			});
		}
	});
};
tannus_chrome_Tabs.get_lib = function() {
	return chrome.tabs;
};
var tannus_chrome__$Window_Window_$Impl_$ = {};
$hxClasses["tannus.chrome._Window.Window_Impl_"] = tannus_chrome__$Window_Window_$Impl_$;
tannus_chrome__$Window_Window_$Impl_$.__name__ = ["tannus","chrome","_Window","Window_Impl_"];
tannus_chrome__$Window_Window_$Impl_$._new = function(tw) {
	return tw;
};
tannus_chrome__$Window_Window_$Impl_$.update = function(this1,changes,done) {
	tannus_chrome_Windows.update(this1.id,changes).then(function(win) {
		this1 = win;
		done();
	});
};
tannus_chrome__$Window_Window_$Impl_$.state = function(this1,nstate,cb) {
	var done = cb;
	tannus_chrome_Windows.update(this1.id,{ 'state' : nstate}).then(function(win) {
		this1 = win;
		done();
	});
};
tannus_chrome__$Window_Window_$Impl_$.focus = function(this1,nfoc,cb) {
	if(nfoc == null) nfoc = true;
	var done = cb;
	tannus_chrome_Windows.update(this1.id,{ 'focused' : nfoc}).then(function(win) {
		this1 = win;
		done();
	});
};
tannus_chrome__$Window_Window_$Impl_$.minimize = function(this1,cb) {
	var done = cb;
	tannus_chrome_Windows.update(this1.id,{ 'state' : "minimized"}).then(function(win) {
		this1 = win;
		done();
	});
};
tannus_chrome__$Window_Window_$Impl_$.maximize = function(this1,cb) {
	var done = cb;
	tannus_chrome_Windows.update(this1.id,{ 'state' : "maximized"}).then(function(win) {
		this1 = win;
		done();
	});
};
tannus_chrome__$Window_Window_$Impl_$.normalize = function(this1,cb) {
	var done = cb;
	tannus_chrome_Windows.update(this1.id,{ 'state' : "normal"}).then(function(win) {
		this1 = win;
		done();
	});
};
tannus_chrome__$Window_Window_$Impl_$.fullscreen = function(this1,cb) {
	var done = cb;
	tannus_chrome_Windows.update(this1.id,{ 'state' : "fullscreen"}).then(function(win) {
		this1 = win;
		done();
	});
};
tannus_chrome__$Window_Window_$Impl_$.close = function(this1,cb) {
	chrome.windows.remove(this1.id,cb);
};
var tannus_chrome__$WindowData_WindowData_$Impl_$ = {};
$hxClasses["tannus.chrome._WindowData.WindowData_Impl_"] = tannus_chrome__$WindowData_WindowData_$Impl_$;
tannus_chrome__$WindowData_WindowData_$Impl_$.__name__ = ["tannus","chrome","_WindowData","WindowData_Impl_"];
tannus_chrome__$WindowData_WindowData_$Impl_$._new = function(o) {
	return new tannus_chrome_CWindowData(o);
};
tannus_chrome__$WindowData_WindowData_$Impl_$.fromDynamic = function(d) {
	var o = d;
	return new tannus_chrome_CWindowData(o);
};
tannus_chrome__$WindowData_WindowData_$Impl_$.fromObject = function(o) {
	return new tannus_chrome_CWindowData(o);
};
var tannus_chrome_CWindowData = function(o) {
	this.url = [];
	var _url = Reflect.getProperty(o,"url");
	if(_url != null?_url:_url) {
		if((_url instanceof Array) && _url.__enum__ == null) this.url = this.url.concat((js_Boot.__cast(_url , Array)).map((function(f) {
			return function(s) {
				return f(s);
			};
		})(Std.string))); else if(typeof(_url) == "string") this.url.push(Std.string(_url) + "");
	}
	this.focused = (function($this) {
		var $r;
		var this1 = Reflect.getProperty(o,"focused");
		var alt = Reflect.getProperty(o,"active");
		$r = this1 != null?this1:alt;
		return $r;
	}(this)) || true;
	var this2 = Reflect.getProperty(o,"incognito");
	if(this2 != null) this.incognito = this2; else this.incognito = false;
	var this3 = Reflect.getProperty(o,"type");
	if(this3 != null) this.type = this3; else this.type = "normal";
	var this4 = Reflect.getProperty(o,"left");
	if(this4 != null) this.left = this4; else this.left = 0;
	var this5 = Reflect.getProperty(o,"top");
	if(this5 != null) this.top = this5; else this.top = 0;
	if((function($this) {
		var $r;
		var this6 = Reflect.getProperty(o,"width");
		$r = this6 != null;
		return $r;
	}(this))) {
		var this7 = Reflect.getProperty(o,"width");
		if(this7 != null) this.width = this7; else this.width = this7;
	}
	if((function($this) {
		var $r;
		var this8 = Reflect.getProperty(o,"height");
		$r = this8 != null;
		return $r;
	}(this))) {
		var this9 = Reflect.getProperty(o,"height");
		if(this9 != null) this.height = this9; else this.height = this9;
	}
};
$hxClasses["tannus.chrome.CWindowData"] = tannus_chrome_CWindowData;
tannus_chrome_CWindowData.__name__ = ["tannus","chrome","CWindowData"];
tannus_chrome_CWindowData.prototype = {
	__class__: tannus_chrome_CWindowData
};
var tannus_chrome_Windows = function() { };
$hxClasses["tannus.chrome.Windows"] = tannus_chrome_Windows;
tannus_chrome_Windows.__name__ = ["tannus","chrome","Windows"];
tannus_chrome_Windows.__properties__ = {get_lib:"get_lib"}
tannus_chrome_Windows.getAll = function(callb) {
	chrome.windows.getAll({ 'populate' : true},function(wins) {
		callb(wins);
	});
};
tannus_chrome_Windows.all = function() {
	return new tannus_ds_Promise(function(accept,reject) {
		try {
			tannus_chrome_Windows.getAll(function(wins) {
				accept(wins);
			});
		} catch( err ) {
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			reject(err);
		}
	},null).array();
};
tannus_chrome_Windows.get = function(id) {
	return new tannus_ds_Promise(function(accept,reject) {
		chrome.windows.get(id,{ 'populate' : true},function(win) {
			if(win != null) accept(win); else reject("Window not found");
		});
	},null);
};
tannus_chrome_Windows.create = function(data) {
	return new tannus_ds_Promise(function(accept,reject) {
		var wd;
		{
			var o = data;
			wd = new tannus_chrome_CWindowData(o);
		}
		chrome.windows.create(wd,function(win) {
			accept(win);
		});
	},null);
};
tannus_chrome_Windows.update = function(id,changes) {
	return new tannus_ds_Promise(function(accept,reject) {
		chrome.windows.update(id,changes,function(win) {
			accept(win);
		});
	},null);
};
tannus_chrome_Windows.remove = function(id,cb) {
	chrome.windows.remove(id,cb);
};
tannus_chrome_Windows.get_lib = function() {
	return chrome.windows;
};
var tannus_css__$FontFace_FontFace_$Impl_$ = {};
$hxClasses["tannus.css._FontFace.FontFace_Impl_"] = tannus_css__$FontFace_FontFace_$Impl_$;
tannus_css__$FontFace_FontFace_$Impl_$.__name__ = ["tannus","css","_FontFace","FontFace_Impl_"];
tannus_css__$FontFace_FontFace_$Impl_$.__properties__ = {set_source:"set_source",get_source:"get_source",set_family:"set_family",get_family:"get_family"}
tannus_css__$FontFace_FontFace_$Impl_$._new = function(sheet,family,source) {
	var this1;
	this1 = new tannus_css_Rule(sheet,"@font-face");
	this1.set("font-family",family);
	this1.set("src","url(\"" + source + "\")");
	return this1;
};
tannus_css__$FontFace_FontFace_$Impl_$.get_family = function(this1) {
	return this1.get("font-family");
};
tannus_css__$FontFace_FontFace_$Impl_$.set_family = function(this1,v) {
	this1.set("font-family",v);
	return this1.get("font-family");
};
tannus_css__$FontFace_FontFace_$Impl_$.get_source = function(this1) {
	{
		var _g = this1.property("src").get_values()[0];
		switch(_g[1]) {
		case 5:
			switch(_g[2]) {
			case "url":
				switch(_g[3].length) {
				case 1:
					switch(_g[3][0][1]) {
					case 1:
						var src = _g[3][0][2];
						return src;
					default:
						throw new js__$Boot_HaxeError("Unabled to get the \"src\" of the FontFace");
						return "";
					}
					break;
				default:
					throw new js__$Boot_HaxeError("Unabled to get the \"src\" of the FontFace");
					return "";
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Unabled to get the \"src\" of the FontFace");
				return "";
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Unabled to get the \"src\" of the FontFace");
			return "";
		}
	}
};
tannus_css__$FontFace_FontFace_$Impl_$.set_source = function(this1,v) {
	this1.set("src","url(\"" + v + "\")");
	return v;
};
var tannus_css_Lexer = function() {
	null;
};
$hxClasses["tannus.css.Lexer"] = tannus_css_Lexer;
tannus_css_Lexer.__name__ = ["tannus","css","Lexer"];
tannus_css_Lexer.__interfaces__ = [tannus_ds_Stateful];
tannus_css_Lexer.quickLex = function(d) {
	return new tannus_css_Lexer().tokenize(d);
};
tannus_css_Lexer.prototype = {
	tokenize: function(data) {
		this.buffer = new tannus_io_ByteStack(data);
		this.tokens = [];
		while(!this.buffer.get_empty()) {
			var tk = this.token();
			if(tk != null) this.tokens.push(tk);
		}
		return this.tokens;
	}
	,token: function() {
		if(this.buffer.get_empty()) return null; else {
			var c = this.buffer.peek(0);
			if(Lambda.has([9,10,11,12,13,32],c)) {
				this.advance();
				return this.token();
			} else if(c == 64) {
				this.advance();
				var name = StringTools.trim((function($this) {
					var $r;
					var this2 = $this.buffer.readUntil((function($this) {
						var $r;
						var n = HxOverrides.cca(":",0);
						var this1;
						if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
						this1 = n;
						$r = this1;
						return $r;
					}($this)));
					$r = this2.toString();
					return $r;
				}(this)));
				this.advance();
				var valtext = StringTools.trim((function($this) {
					var $r;
					var this4 = $this.buffer.readUntil((function($this) {
						var $r;
						var n1 = HxOverrides.cca(";",0);
						var this3;
						if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n1)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n1 + ")!");
						this3 = n1;
						$r = this3;
						return $r;
					}($this)));
					$r = this4.toString();
					return $r;
				}(this)));
				this.advance();
				return tannus_css_Token.TVar(name,new tannus_css_vals_Lexer().parse(tannus_io_impl_BrowserBinary.ofString(valtext)));
			} else if(new EReg("[^{}():;,]","").match(String.fromCharCode(c))) {
				var str;
				{
					var this5 = this.advance();
					str = String.fromCharCode(this5);
				}
				var tok = null;
				while(!this.buffer.get_empty()) {
					c = this.buffer.peek(0);
					if(c == 123) {
						var sel = StringTools.trim(str);
						var props = this.block();
						tok = tannus_css_Token.TRule(sel,props);
					} else if(c == 59) {
						if(StringTools.startsWith(str,".")) {
							var name1 = tannus_ds_StringUtils.after(str,".");
							tok = tannus_css_Token.TMixin(name1);
						} else {
							var name2 = StringTools.trim(tannus_ds_StringUtils.before(str,":"));
							var valtext1 = StringTools.trim(tannus_ds_StringUtils.after(str,":"));
							tok = tannus_css_Token.TProp(name2,new tannus_css_vals_Lexer().parse(tannus_io_impl_BrowserBinary.ofString(valtext1)));
						}
					} else str += String.fromCharCode(c);
					this.advance();
					if(tok != null) break;
				}
				if(tok == null) throw new js__$Boot_HaxeError("Error: unexpected end of input");
				return tok;
			} else {
				var err = "Error: unexpected " + String.fromCharCode(c);
				console.log(err);
				throw new js__$Boot_HaxeError(err);
			}
		}
	}
	,block: function() {
		var c = this.buffer.peek(0);
		if(c == 123) {
			this.advance();
			var buf = "";
			var lvl = 1;
			while(!this.buffer.get_empty() && lvl > 0) {
				c = this.buffer.peek(0);
				if(c == 123) lvl++; else if(c == 125) lvl--;
				if(lvl > 0) buf += String.fromCharCode(c);
				this.advance();
			}
			return tannus_css_Lexer.quickLex(tannus_io_impl_BrowserBinary.ofString(buf));
		} else {
			throw new js__$Boot_HaxeError("Error: No block at current position");
			return [];
		}
	}
	,next: function(i) {
		if(i == null) i = 0;
		return this.buffer.peek(i);
	}
	,advance: function(i) {
		if(i == null) i = 0;
		var r = this.buffer.pop();
		while(i > 0) {
			this.buffer.pop();
			i--;
		}
		return r;
	}
	,getState: function() {
		return { buffer : this.buffer.copy(), tokens : this.tokens.slice()};
	}
	,setState: function(s) {
		this.buffer = s.buffer;
		this.tokens = s.tokens;
	}
	,isSel: function(c) {
		return new EReg("[^{}():;,]","").match(String.fromCharCode(c));
	}
	,get_done: function() {
		return this.buffer.get_empty();
	}
	,__class__: tannus_css_Lexer
	,__properties__: {get_done:"get_done"}
};
var tannus_css_Parser = function() {
	this.rule = null;
	this.macros = new haxe_ds_StringMap();
};
$hxClasses["tannus.css.Parser"] = tannus_css_Parser;
tannus_css_Parser.__name__ = ["tannus","css","Parser"];
tannus_css_Parser.quickParse = function(tokens) {
	return new tannus_css_Parser().parse(tokens);
};
tannus_css_Parser.prototype = {
	parse: function(tree) {
		this.tokens = tree;
		this.sheet = new tannus_css_StyleSheet();
		this.heap = new tannus_ds_Stack();
		this.heap.add(new haxe_ds_StringMap());
		this.rule = null;
		while(!Lambda.empty(this.tokens)) this.next();
		return this.sheet;
	}
	,next: function() {
		var tk = this.tokens.shift();
		switch(tk[1]) {
		case 3:
			var val = tk[3];
			var name = tk[2];
			var this1 = this.heap.peek();
			this1.set(name,val);
			break;
		case 1:
			var val1 = tk[3];
			var name1 = tk[2];
			val1 = this.rewrite(val1);
			this.rule.property(name1).setValues(val1);
			break;
		case 0:
			var body = tk[3];
			var selector = tk[2];
			var superRule = this.rule;
			if(this.rule != null) this.rule = this.rule.child(selector); else this.rule = this.sheet.rule(selector);
			this.subScope();
			this.subTree(body);
			this.superScope();
			this.rule = superRule;
			break;
		case 2:
			var name2 = tk[2];
			var mixinRule = this.sheet.getRule("." + name2);
			if(mixinRule != null) {
				var _g = 0;
				var _g1 = mixinRule.properties;
				while(_g < _g1.length) {
					var p = _g1[_g];
					++_g;
					console.log(Std.string(p.get_values()) + "");
					this.rule.set(p.name,p.value);
				}
			} else throw new js__$Boot_HaxeError("MixinError: mixin " + name2 + " is not defined");
			break;
		}
	}
	,rewrite: function(value) {
		var hunks = [];
		var _g = 0;
		while(_g < value.length) {
			var v = value[_g];
			++_g;
			switch(v[1]) {
			case 4:
				var name = v[2];
				if((function($this) {
					var $r;
					var this1 = $this.heap.peek();
					$r = this1.exists(name);
					return $r;
				}(this))) hunks.push(this.rewrite((function($this) {
					var $r;
					var this2 = $this.heap.peek();
					$r = this2.get(name);
					return $r;
				}(this)))); else {
					var err = "Error: " + name + " is not defined";
					console.log(err);
					throw new js__$Boot_HaxeError(err);
				}
				break;
			case 5:
				var args = v[3];
				var name1 = v[2];
				args = this.rewrite(args);
				if(this.macros.exists(name1)) hunks.push(this.callMacro(name1,args)); else hunks.push([tannus_css_Value.VCall(name1,args)]);
				break;
			default:
				hunks.push([v]);
			}
		}
		return tannus_ds_ArrayTools.flatten(hunks);
	}
	,subTree: function(stree) {
		var _tree = this.tokens;
		this.tokens = stree;
		while(!Lambda.empty(this.tokens)) this.next();
		this.tokens = _tree;
	}
	,subScope: function() {
		var sub = new haxe_ds_StringMap();
		var $it0 = (function($this) {
			var $r;
			var this1 = $this.heap.peek();
			$r = this1.keys();
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var n = $it0.next();
			var v;
			var this2 = this.heap.peek();
			v = this2.get(n);
			if(__map_reserved[n] != null) sub.setReserved(n,v); else sub.h[n] = v;
			v;
		}
		this.heap.add(sub);
	}
	,superScope: function() {
		this.heap.pop();
	}
	,token: function() {
		return this.tokens.shift();
	}
	,isMacro: function(name) {
		return this.macros.exists(name);
	}
	,callMacro: function(name,args) {
		var result = this.macros.get(name)(args);
		result = this.rewrite(result);
		return result;
	}
	,defMacro: function(name,mfunc) {
		{
			this.macros.set(name,mfunc);
			mfunc;
		}
	}
	,get_scope: function() {
		return this.heap.peek();
	}
	,__class__: tannus_css_Parser
	,__properties__: {get_scope:"get_scope"}
};
var tannus_css_Property = function(key,val) {
	this.name = key;
	this.value = val;
};
$hxClasses["tannus.css.Property"] = tannus_css_Property;
tannus_css_Property.__name__ = ["tannus","css","Property"];
tannus_css_Property.prototype = {
	setValues: function(val) {
		var hunks = val.map(function(item) {
			return tannus_css_vals_ValueTools.toString(item);
		});
		return this.value = hunks.join(" ");
	}
	,clone: function() {
		return new tannus_css_Property(this.name,this.value);
	}
	,get_values: function() {
		return new tannus_css_vals_Lexer().parse(tannus_io_impl_BrowserBinary.ofString(this.value));
	}
	,__class__: tannus_css_Property
	,__properties__: {get_values:"get_values"}
};
var tannus_css_Rule = function(par,sel,props) {
	this.parentRule = null;
	this.sheet = par;
	this.selector = sel;
	if(props != null) this.properties = props; else this.properties = [];
};
$hxClasses["tannus.css.Rule"] = tannus_css_Rule;
tannus_css_Rule.__name__ = ["tannus","css","Rule"];
tannus_css_Rule.prototype = {
	child: function(childSel,props) {
		var sel = [this.selector," ",childSel].join("");
		var kid = this.sheet.rule(sel,props);
		kid.parentRule = this;
		return kid;
	}
	,set: function(name,value) {
		if(this.exists(name)) {
			var p = this.getProp(name);
			p.value = Std.string(value);
		} else {
			var p1 = new tannus_css_Property(name,Std.string(value));
			this.properties.push(p1);
		}
		this.sheet._update.call();
	}
	,exists: function(name) {
		return this.getProp(name) != null;
	}
	,get: function(name) {
		if(this.exists(name)) return this.getProp(name).value; else return null;
	}
	,property: function(name) {
		var p = this.getProp(name);
		if(p == null) {
			p = new tannus_css_Property(name,"");
			this.properties.push(p);
		}
		return p;
	}
	,getProp: function(name) {
		var _g = 0;
		var _g1 = this.properties;
		while(_g < _g1.length) {
			var prop = _g1[_g];
			++_g;
			if(prop.name == name) return prop;
		}
		return null;
	}
	,clone: function(nsheet) {
		return new tannus_css_Rule(nsheet != null?nsheet:this.sheet,this.selector,this.properties.map(function(item) {
			return new tannus_css_Property(item.name,item.value);
		}));
	}
	,changed: function() {
		this.sheet._update.call();
	}
	,__class__: tannus_css_Rule
};
var tannus_css_StyleSheet = function() {
	this.rules = [];
	this._update = new tannus_io_VoidSignal();
};
$hxClasses["tannus.css.StyleSheet"] = tannus_css_StyleSheet;
tannus_css_StyleSheet.__name__ = ["tannus","css","StyleSheet"];
tannus_css_StyleSheet.fromCSS = function(code) {
	return tannus_css_Parser.quickParse(tannus_css_Lexer.quickLex(tannus_io_impl_BrowserBinary.ofString(code)));
};
tannus_css_StyleSheet.prototype = {
	rule: function(selector,props) {
		var r;
		if(this.hasRule(selector)) r = this.getRule(selector); else {
			r = new tannus_css_Rule(this,selector);
			this.rules.push(r);
			this._update.call();
		}
		if(props != null) {
			var _g = 0;
			var _g1;
			var this1 = props;
			_g1 = Reflect.fields(this1).map(function(k) {
				return { 'name' : k, 'value' : Reflect.getProperty(this1,k)};
			});
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				r.set(p.name,p.value);
			}
			this._update.call();
		}
		return r;
	}
	,hasRule: function(sel) {
		return this.getRule(sel) != null;
	}
	,getRule: function(sel) {
		var _g = 0;
		var _g1 = this.rules;
		while(_g < _g1.length) {
			var rule = _g1[_g];
			++_g;
			if(rule.selector == sel) return rule;
		}
		return null;
	}
	,fontFace: function(family,source) {
		var r = new tannus_css_Rule(this,"@font-face");
		r.set("font-family",family);
		r.set("src","url(\"" + source + "\")");
		this.rules.push(r);
		this._update.call();
		return r;
	}
	,getFontFace: function(family) {
		var _g = 0;
		var _g1 = this.getAllFontFaces();
		while(_g < _g1.length) {
			var font = _g1[_g];
			++_g;
			if(font.get("font-family") == family) return font;
		}
		return null;
	}
	,hasFontFace: function(name) {
		return this.getFontFace(name) != null;
	}
	,getAllFontFaces: function() {
		return this.rules.filter(function(item) {
			return item.selector == "@font-face";
		});
	}
	,clone: function() {
		var c = new tannus_css_StyleSheet();
		c.rules = this.rules.map(function(item) {
			return item.clone(c);
		});
		return c;
	}
	,concat: function(other) {
		var sum = new tannus_css_StyleSheet();
		var _g = 0;
		var _g1 = this.rules.concat(other.rules);
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			sum.rules.push(r.clone(sum));
		}
		return sum;
	}
	,toString: function() {
		var w = new tannus_css_Writer();
		{
			var this1 = w.generate(this);
			return this1.toString();
		}
	}
	,toByteArray: function() {
		var w = new tannus_css_Writer();
		return w.generate(this);
	}
	,changed: function() {
		this._update.call();
	}
	,onchange: function(cb) {
		this._update.on(cb);
	}
	,__class__: tannus_css_StyleSheet
};
var tannus_css_Token = $hxClasses["tannus.css.Token"] = { __ename__ : ["tannus","css","Token"], __constructs__ : ["TRule","TProp","TMixin","TVar"] };
tannus_css_Token.TRule = function(selector,props) { var $x = ["TRule",0,selector,props]; $x.__enum__ = tannus_css_Token; $x.toString = $estr; return $x; };
tannus_css_Token.TProp = function(name,value) { var $x = ["TProp",1,name,value]; $x.__enum__ = tannus_css_Token; $x.toString = $estr; return $x; };
tannus_css_Token.TMixin = function(name) { var $x = ["TMixin",2,name]; $x.__enum__ = tannus_css_Token; $x.toString = $estr; return $x; };
tannus_css_Token.TVar = function(name,value) { var $x = ["TVar",3,name,value]; $x.__enum__ = tannus_css_Token; $x.toString = $estr; return $x; };
var tannus_css_Value = $hxClasses["tannus.css.Value"] = { __ename__ : ["tannus","css","Value"], __constructs__ : ["VIdent","VString","VNumber","VColor","VRef","VCall","VTuple","VComma"] };
tannus_css_Value.VIdent = function(id) { var $x = ["VIdent",0,id]; $x.__enum__ = tannus_css_Value; $x.toString = $estr; return $x; };
tannus_css_Value.VString = function(str) { var $x = ["VString",1,str]; $x.__enum__ = tannus_css_Value; $x.toString = $estr; return $x; };
tannus_css_Value.VNumber = function(num,unit) { var $x = ["VNumber",2,num,unit]; $x.__enum__ = tannus_css_Value; $x.toString = $estr; return $x; };
tannus_css_Value.VColor = function(col) { var $x = ["VColor",3,col]; $x.__enum__ = tannus_css_Value; $x.toString = $estr; return $x; };
tannus_css_Value.VRef = function(name) { var $x = ["VRef",4,name]; $x.__enum__ = tannus_css_Value; $x.toString = $estr; return $x; };
tannus_css_Value.VCall = function(func,args) { var $x = ["VCall",5,func,args]; $x.__enum__ = tannus_css_Value; $x.toString = $estr; return $x; };
tannus_css_Value.VTuple = function(vals) { var $x = ["VTuple",6,vals]; $x.__enum__ = tannus_css_Value; $x.toString = $estr; return $x; };
tannus_css_Value.VComma = ["VComma",7];
tannus_css_Value.VComma.toString = $estr;
tannus_css_Value.VComma.__enum__ = tannus_css_Value;
var tannus_css_Writer = function() {
};
$hxClasses["tannus.css.Writer"] = tannus_css_Writer;
tannus_css_Writer.__name__ = ["tannus","css","Writer"];
tannus_css_Writer.prototype = {
	generate: function(sheet) {
		this.reset();
		var _g = 0;
		var _g1 = sheet.rules;
		while(_g < _g1.length) {
			var rule = _g1[_g];
			++_g;
			this.writeRule(rule);
		}
		return this.buffer;
	}
	,writeRule: function(rule) {
		var tab = "    ";
		this.writeln(tannus_io_impl_BrowserBinary.ofString(rule.selector + " {"));
		var _g = 0;
		var _g1 = rule.properties;
		while(_g < _g1.length) {
			var prop = _g1[_g];
			++_g;
			this.writeln(tannus_io_impl_BrowserBinary.ofString("" + tab + prop.name + ": " + prop.value + ";"));
		}
		this.writeln(tannus_io_impl_BrowserBinary.ofString("}"));
	}
	,reset: function() {
		var this1;
		this1 = tannus_io_impl_BrowserBinary.alloc(0);
		this.buffer = this1;
	}
	,write: function(what) {
		this.buffer.append(what);
	}
	,writeln: function(data) {
		data.push((function($this) {
			var $r;
			var n = HxOverrides.cca("\n",0);
			var this1;
			if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
			this1 = n;
			$r = this1;
			return $r;
		}(this)));
		this.buffer.append(data);
	}
	,__class__: tannus_css_Writer
};
var tannus_css_vals_Lexer = function() {
};
$hxClasses["tannus.css.vals.Lexer"] = tannus_css_vals_Lexer;
tannus_css_vals_Lexer.__name__ = ["tannus","css","vals","Lexer"];
tannus_css_vals_Lexer.eof = function() {
	throw new js__$Boot_HaxeError(tannus_css_vals__$Lexer_Err.Eof);
};
tannus_css_vals_Lexer.unex = function(c) {
	throw new js__$Boot_HaxeError(tannus_css_vals__$Lexer_Err.Unexpected(c));
};
tannus_css_vals_Lexer.isUnit = function(c) {
	return c >= 65 && c <= 90 || c >= 97 && c <= 122 || Lambda.has([37],c);
};
tannus_css_vals_Lexer.parseString = function(s) {
	return new tannus_css_vals_Lexer().parse(tannus_io_impl_BrowserBinary.ofString(s));
};
tannus_css_vals_Lexer.prototype = {
	parse: function(snip) {
		this.buffer = new tannus_io_ByteStack(snip);
		this.tree = [];
		while(!this.buffer.get_empty()) {
			var val = this.parseNext();
			if(val != null) this.tree.push(val);
		}
		return this.tree;
	}
	,parseNext: function() {
		var c = this.buffer.peek(0);
		if(this.buffer.get_empty()) return null; else if(Lambda.has([9,10,11,12,13,32],c)) {
			this.advance();
			return this.parseNext();
		} else if(c >= 65 && c <= 90 || c >= 97 && c <= 122 || c == 95 || (function($this) {
			var $r;
			var this1 = $this.buffer.peek();
			$r = this1 == 64;
			return $r;
		}(this))) {
			var ident;
			{
				var this2 = this.advance();
				ident = String.fromCharCode(this2);
			}
			c = this.buffer.peek(0);
			while(!this.buffer.get_empty() && (c >= 65 && c <= 90 || c >= 97 && c <= 122 || c >= 48 && c <= 57 || c == 95)) {
				var this3 = this.advance();
				ident += String.fromCharCode(this3);
				c = this.buffer.peek(0);
			}
			if(StringTools.startsWith(ident,"@")) {
				ident = tannus_ds_StringUtils.after(ident,"@");
				return tannus_css_Value.VRef(ident);
			} else if(c == 40) return tannus_css_Value.VCall(ident,this.tuple()); else return tannus_css_Value.VIdent(ident);
		} else if(c >= 48 && c <= 57) {
			var snum;
			{
				var this4 = this.advance();
				snum = String.fromCharCode(this4);
			}
			c = this.buffer.peek(0);
			while(!this.buffer.get_empty() && (c >= 48 && c <= 57 || c == 46)) {
				var this5 = this.advance();
				snum += String.fromCharCode(this5);
				c = this.buffer.peek(0);
			}
			var num = parseFloat(snum);
			var unit = null;
			if(tannus_css_vals_Lexer.isUnit(c)) {
				var su;
				{
					var this6 = this.advance();
					su = String.fromCharCode(this6);
				}
				c = this.buffer.peek(0);
				while(!this.buffer.get_empty() && tannus_css_vals_Lexer.isUnit(c)) {
					var this7 = this.advance();
					su += String.fromCharCode(this7);
					c = this.buffer.peek(0);
				}
				if(Lambda.has(["em","ex","ch","rem","vw","vh","%","cm","mm","in","px","pt","pc"],su)) unit = su; else {
					var e = "CSSUnitError: " + su + " is not a valid unit!";
					console.log(e);
					throw new js__$Boot_HaxeError(e);
				}
			}
			return tannus_css_Value.VNumber(num,unit);
		} else if(c == 35) {
			var scol;
			{
				var this8 = this.advance();
				scol = String.fromCharCode(this8);
			}
			c = this.buffer.peek(0);
			while(!this.buffer.get_empty() && new EReg("[0-9A-F]","i").match(String.fromCharCode(c))) {
				var this9 = this.advance();
				scol += String.fromCharCode(this9);
				c = this.buffer.peek(0);
			}
			var color = tannus_graphics__$Color_TColor.fromString(scol);
			return tannus_css_Value.VColor(color);
		} else if(c == 34 || c == 39) {
			var del = c;
			var str = "";
			this.advance();
			c = this.buffer.peek(0);
			while(!this.buffer.get_empty()) {
				if(c == del) {
					this.advance();
					break;
				} else {
					var this10 = this.buffer.peek();
					str += String.fromCharCode(this10);
					this.advance();
				}
				c = this.buffer.peek(0);
			}
			return tannus_css_Value.VString(str);
		} else if(c == 44) {
			this.advance();
			return tannus_css_Value.VComma;
		} else {
			tannus_css_vals_Lexer.unex(this.buffer.peek());
			return tannus_css_Value.VNumber(0);
		}
	}
	,tuple: function() {
		var c = this.buffer.peek(0);
		var str = "";
		var lvl = 1;
		this.advance();
		while(lvl > 0) {
			c = this.buffer.peek(0);
			if(c == 40) lvl++; else if(c == 41) lvl--;
			if(lvl > 0) str += String.fromCharCode(c);
			this.advance();
		}
		var sublexer = new tannus_css_vals_Lexer();
		var subvals = sublexer.parse(tannus_io_impl_BrowserBinary.ofString(str));
		var tupvals = [];
		var tmp = null;
		var _g = 0;
		while(_g < subvals.length) {
			var sv = subvals[_g];
			++_g;
			switch(sv[1]) {
			case 7:
				if(tmp != null) {
					tupvals.push(tmp);
					tmp = null;
				} else throw new js__$Boot_HaxeError("Error: unexpected ,");
				break;
			default:
				if(tmp == null) tmp = sv; else throw new js__$Boot_HaxeError("Error: missing ,");
			}
		}
		if(tmp != null) tupvals.push(tmp);
		return tupvals;
	}
	,saveState: function() {
		return { 'buffer' : this.buffer.copy(), 'tree' : this.tree.slice()};
	}
	,loadState: function(state) {
		this.buffer = state.buffer;
		this.tree = state.tree;
	}
	,advance: function(d) {
		if(d == null) d = 0;
		var r = this.buffer.pop();
		while(d > 0) {
			d--;
			this.buffer.pop();
		}
		return r;
	}
	,next: function(d) {
		if(d == null) d = 0;
		return this.buffer.peek(d);
	}
	,push: function(v) {
		this.tree.push(v);
	}
	,get_end: function() {
		return this.buffer.get_empty();
	}
	,get_cur: function() {
		return this.buffer.peek();
	}
	,__class__: tannus_css_vals_Lexer
	,__properties__: {get_cur:"get_cur",get_end:"get_end"}
};
var tannus_css_vals__$Lexer_Err = $hxClasses["tannus.css.vals._Lexer.Err"] = { __ename__ : ["tannus","css","vals","_Lexer","Err"], __constructs__ : ["Unexpected","Eof"] };
tannus_css_vals__$Lexer_Err.Unexpected = function(c) { var $x = ["Unexpected",0,c]; $x.__enum__ = tannus_css_vals__$Lexer_Err; $x.toString = $estr; return $x; };
tannus_css_vals__$Lexer_Err.Eof = ["Eof",1];
tannus_css_vals__$Lexer_Err.Eof.toString = $estr;
tannus_css_vals__$Lexer_Err.Eof.__enum__ = tannus_css_vals__$Lexer_Err;
var tannus_css_vals__$Unit_Unit_$Impl_$ = {};
$hxClasses["tannus.css.vals._Unit.Unit_Impl_"] = tannus_css_vals__$Unit_Unit_$Impl_$;
tannus_css_vals__$Unit_Unit_$Impl_$.__name__ = ["tannus","css","vals","_Unit","Unit_Impl_"];
tannus_css_vals__$Unit_Unit_$Impl_$.__properties__ = {get_all:"get_all"}
tannus_css_vals__$Unit_Unit_$Impl_$.get_all = function() {
	return ["em","ex","ch","rem","vw","vh","%","cm","mm","in","px","pt","pc"];
};
tannus_css_vals__$Unit_Unit_$Impl_$.isValidUnit = function(s) {
	return Lambda.has(["em","ex","ch","rem","vw","vh","%","cm","mm","in","px","pt","pc"],s);
};
var tannus_css_vals_ValueTools = function() { };
$hxClasses["tannus.css.vals.ValueTools"] = tannus_css_vals_ValueTools;
tannus_css_vals_ValueTools.__name__ = ["tannus","css","vals","ValueTools"];
tannus_css_vals_ValueTools.toString = function(v) {
	if(v == null) throw new js__$Boot_HaxeError("CSSError: Cannot convert a null-Value to String!"); else if(v != null) switch(v[1]) {
	case 0:
		var id = v[2];
		return id;
	case 1:
		var str = v[2];
		return JSON.stringify(str);
	case 2:
		var unit = v[3];
		var num = v[2];
		var su;
		if(unit != null) su = unit; else su = "";
		return "" + num + su;
	case 3:
		var color = v[2];
		return color.toString();
	case 4:
		var name = v[2];
		return "@" + name;
	case 5:
		var args = v[3];
		var name1 = v[2];
		var sargs = args.map(function(item) {
			return tannus_css_vals_ValueTools.toString(item);
		}).join(", ");
		return "" + name1 + "(" + sargs + ")";
	default:
		throw new js__$Boot_HaxeError("CSSError: Cannot convert " + Std.string(v) + " to String!");
	} else throw new js__$Boot_HaxeError("CSSError: Cannot convert " + Std.string(v) + " to String!");
};
tannus_css_vals_ValueTools.iter = function(value,predicate) {
	predicate(value);
	switch(value[1]) {
	case 5:
		var args = value[3];
		var _g = 0;
		while(_g < args.length) {
			var v = args[_g];
			++_g;
			tannus_css_vals_ValueTools.iter(v,predicate);
		}
		break;
	default:
		null;
	}
};
tannus_css_vals_ValueTools.map = function(value,mapper) {
	var val = value;
	switch(value[1]) {
	case 5:
		var args = value[3];
		var name = value[2];
		val = tannus_css_Value.VCall(name,args.map(function(item) {
			return tannus_css_vals_ValueTools.map(item,mapper);
		}));
		break;
	default:
		null;
	}
	val = mapper(val);
	return val;
};
var tannus_dom__$Attributes_Attributes_$Impl_$ = {};
$hxClasses["tannus.dom._Attributes.Attributes_Impl_"] = tannus_dom__$Attributes_Attributes_$Impl_$;
tannus_dom__$Attributes_Attributes_$Impl_$.__name__ = ["tannus","dom","_Attributes","Attributes_Impl_"];
tannus_dom__$Attributes_Attributes_$Impl_$._new = function(e) {
	return new tannus_dom_CAttributes(e);
};
tannus_dom__$Attributes_Attributes_$Impl_$.get = function(this1,k) {
	return this1.get(k);
};
tannus_dom__$Attributes_Attributes_$Impl_$.set = function(this1,k,v) {
	return this1.set(k,v);
};
var tannus_dom_CAttributes = function(e) {
	this.element = e;
};
$hxClasses["tannus.dom.CAttributes"] = tannus_dom_CAttributes;
tannus_dom_CAttributes.__name__ = ["tannus","dom","CAttributes"];
tannus_dom_CAttributes.prototype = {
	exists: function(name) {
		return this.element.els[0].hasAttribute(name);
	}
	,get: function(name) {
		return this.element.els[0].getAttribute(name);
	}
	,set: function(name,value) {
		var _g = 0;
		var _g1 = this.element.els;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			e.setAttribute(name,Std.string(value));
		}
		return Std.string(value);
	}
	,remove: function(name) {
		var _g = 0;
		var _g1 = this.element.els;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			e.removeAttribute(name);
		}
	}
	,__class__: tannus_dom_CAttributes
};
var tannus_dom__$Data_Data_$Impl_$ = {};
$hxClasses["tannus.dom._Data.Data_Impl_"] = tannus_dom__$Data_Data_$Impl_$;
tannus_dom__$Data_Data_$Impl_$.__name__ = ["tannus","dom","_Data","Data_Impl_"];
tannus_dom__$Data_Data_$Impl_$._new = function(e) {
	return new tannus_dom_CData(e);
};
tannus_dom__$Data_Data_$Impl_$.get = function(this1,k) {
	return this1.get(k);
};
tannus_dom__$Data_Data_$Impl_$.set = function(this1,k,v) {
	this1.set(k,v);
};
var tannus_dom_CData = function(e) {
	this.el = e;
};
$hxClasses["tannus.dom.CData"] = tannus_dom_CData;
tannus_dom_CData.__name__ = ["tannus","dom","CData"];
tannus_dom_CData.prototype = {
	get: function(name) {
		if(!(this.el.els.length <= 0)) {
			var this1 = Reflect.getProperty(this.el.els[0],"__tandata").pub;
			return Reflect.getProperty(this1.o,name);
		} else return null;
	}
	,set: function(name,value) {
		var _g = 0;
		var _g1 = this.el.els;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			var this1 = Reflect.getProperty(e,"__tandata").pub;
			this1.set(name,value);
		}
	}
	,exists: function(name) {
		if(!(this.el.els.length <= 0)) return Reflect.getProperty(this.el.els[0],"__tandata").pub.exists(name); else return false;
	}
	,keys: function() {
		if(!(this.el.els.length <= 0)) return Reflect.getProperty(this.el.els[0],"__tandata").pub.keys(); else return [];
	}
	,ref: function(name) {
		return Reflect.getProperty(this.el.els[0],"__tandata").pub.field(name);
	}
	,nd: function(e) {
		return Reflect.getProperty(e,"__tandata");
	}
	,__class__: tannus_dom_CData
};
var tannus_dom_ElIter = function(e) {
	this.owner = e;
	this.index = 0;
};
$hxClasses["tannus.dom.ElIter"] = tannus_dom_ElIter;
tannus_dom_ElIter.__name__ = ["tannus","dom","ElIter"];
tannus_dom_ElIter.prototype = {
	hasNext: function() {
		return this.index < this.owner.els.length;
	}
	,next: function() {
		return this.owner.at(this.index++);
	}
	,__class__: tannus_dom_ElIter
};
var tannus_dom__$Element_Element_$Impl_$ = {};
$hxClasses["tannus.dom._Element.Element_Impl_"] = tannus_dom__$Element_Element_$Impl_$;
tannus_dom__$Element_Element_$Impl_$.__name__ = ["tannus","dom","_Element","Element_Impl_"];
tannus_dom__$Element_Element_$Impl_$._new = function(ctx) {
	return new tannus_dom_CElement(ctx);
};
tannus_dom__$Element_Element_$Impl_$.getAttribute = function(this1,k) {
	return this1.getAttribute(k);
};
tannus_dom__$Element_Element_$Impl_$.setAttribute = function(this1,k,v) {
	return this1.setAttribute(k,v);
};
tannus_dom__$Element_Element_$Impl_$.fromAny = function(o) {
	return new tannus_dom_CElement(o);
};
var tannus_dom_CElement = function(ctx) {
	this.els = [];
	this._style = new tannus_dom_CStyles(this);
	this._attr = new tannus_dom_CAttributes(this);
	this._data = new tannus_dom_CData(this);
	this.determineContext(ctx);
	this.initializeData();
};
$hxClasses["tannus.dom.CElement"] = tannus_dom_CElement;
tannus_dom_CElement.__name__ = ["tannus","dom","CElement"];
tannus_dom_CElement.parseDocument = function(code) {
	var parser = new DOMParser();
	var doc = parser.parseFromString(code,"text/html");
	var nl = doc.querySelectorAll("body *, head *");
	var results = [];
	var _g1 = 0;
	var _g = nl.length;
	while(_g1 < _g) {
		var i = _g1++;
		var item = nl.item(i);
		if(js_Boot.__instanceof(item,HTMLElement)) results.push(item);
	}
	return tannus_ds_ArrayTools.unique(results);
};
tannus_dom_CElement.prototype = {
	remove: function() {
		var _g = 0;
		var _g1 = this.els;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			e.remove();
		}
	}
	,clone: function(deep) {
		if(deep == null) deep = false;
		var copy = new tannus_dom_CElement(null);
		copy.els = this.els.map(function(item) {
			return item.cloneNode(deep);
		});
		return copy;
	}
	,find: function(sel) {
		var res = new tannus_dom_CElement(null);
		var _g = 0;
		var _g1 = this.els;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			var nl = e.querySelectorAll(sel);
			var _g3 = 0;
			var _g2 = nl.length;
			while(_g3 < _g2) {
				var i = _g3++;
				var item = nl.item(i);
				if(js_Boot.__instanceof(item,HTMLElement)) res.els.push(item);
			}
		}
		return res;
	}
	,at: function(n) {
		return new tannus_dom_CElement(this.els[n]);
	}
	,contains: function(sel) {
		var sub = this.find(sel);
		return !(sub.els.length <= 0);
	}
	,'is': function(sel) {
		return this.els[0].matches(sel);
	}
	,children: function() {
		var rels = tannus_ds_ArrayTools.flatten(this.els.map(function(item) {
			var _g = [];
			var _g2 = 0;
			var _g1 = item.children.length;
			while(_g2 < _g1) {
				var i = _g2++;
				_g.push(item.children.item(i));
			}
			return _g;
		}));
		var res = new tannus_dom_CElement(null);
		res.els = rels;
		return res;
	}
	,isParentOf: function(mchild) {
		if(!(this.els.length <= 0) && !(mchild.els.length <= 0)) {
			var node = mchild.els[0].parentNode;
			while(node != null) {
				if(node == this.els[0]) return true;
				node = node.parentNode;
			}
			return false;
		} else return false;
	}
	,isDescendantOf: function(mparent) {
		return mparent.isParentOf(this);
	}
	,append: function(child) {
		if(!(this.els.length <= 0)) {
			var _g = 0;
			var _g1 = child.els;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.els[0].appendChild(e);
			}
		}
	}
	,appendTo: function(par) {
		par.append(this);
	}
	,prepend: function(child) {
		if(!(this.els.length <= 0)) {
			var _g = 0;
			var _g1 = child.els;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.els[0].insertBefore(e,this.els[0].firstElementChild);
			}
		}
	}
	,prependTo: function(par) {
		par.prepend(this);
	}
	,add: function(item) {
		this.els = this.els.concat(item.els);
	}
	,insertAfter: function(child,after) {
		this.els[0].insertBefore(child.els[0],after.els[0].nextSibling);
	}
	,after: function(content) {
		var _g = 0;
		var _g1 = this.els;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			var cont = content.clone(true);
			var _g2 = 0;
			var _g3 = cont.els;
			while(_g2 < _g3.length) {
				var c = _g3[_g2];
				++_g2;
				e.parentElement.insertBefore(c,e.nextSibling);
			}
		}
	}
	,before: function(content) {
		var _g = 0;
		var _g1 = this.els;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			var cont = content.clone(true);
			var _g2 = 0;
			var _g3 = cont.els;
			while(_g2 < _g3.length) {
				var c = _g3[_g2];
				++_g2;
				e.parentElement.insertBefore(c,e);
			}
		}
	}
	,replaceChild: function(child,repl) {
		if(!(this.els.length <= 0)) this.els[0].replaceChild(repl.els[0],child.els[0]);
	}
	,replaceWith: function(other) {
		this.get_parent().replaceChild(this,other);
	}
	,getAttribute: function(name) {
		return this._attr.get(name);
	}
	,setAttribute: function(name,value) {
		return this._attr.set(name,value);
	}
	,hasAttribute: function(name) {
		return this._attr.exists(name);
	}
	,removeAttribute: function(name) {
		this._attr.remove(name);
	}
	,hasClass: function(name) {
		if(!(this.els.length <= 0)) return this.els[0].classList.contains(name); else return false;
	}
	,addClass: function(name) {
		var _g = 0;
		var _g1 = this.els;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(!e.classList.contains(name)) e.classList.add(name);
		}
	}
	,removeClass: function(name) {
		var _g = 0;
		var _g1 = this.els;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			e.classList.remove(name);
		}
	}
	,toggleClass: function(name) {
		var _g = 0;
		var _g1 = this.els;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			e.classList.toggle(name);
		}
	}
	,field: function(name,value) {
		if(this.els.length <= 0) return null;
		if(value == null) return Reflect.getProperty(this.els[0],name); else {
			Reflect.setProperty(this.els[0],name,value);
			return Reflect.getProperty(this.els[0],name);
		}
	}
	,on: function(name,handler) {
		var _g = 0;
		var _g1 = this.els;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			var nd = this.nodeData(e);
			e.addEventListener(name,handler);
			if(!Object.prototype.hasOwnProperty.call(nd.pri.o,"events")) {
				var val = tannus_ds_CObj.create({ });
				nd.pri.set("events",val);
			}
			var events = Reflect.getProperty(nd.pri.o,"events");
			if(!Object.prototype.hasOwnProperty.call(events.o,name)) {
				var val1 = [];
				events.set(name,val1);
			}
			Reflect.getProperty(events.o,name).push(handler);
		}
	}
	,off: function(name,handler) {
		var _g = 0;
		var _g1 = this.els;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(handler != null) e.removeEventListener(name,handler); else {
				var nd = this.nodeData(e);
				if(!Object.prototype.hasOwnProperty.call(nd.pri.o,"events")) {
					var val = tannus_ds_CObj.create({ });
					nd.pri.set("events",val);
				}
				var events = Reflect.getProperty(nd.pri.o,"events");
				if(Object.prototype.hasOwnProperty.call(events.o,name)) {
					var handlers = Reflect.getProperty(events.o,name);
					var _g2 = 0;
					while(_g2 < handlers.length) {
						var f = handlers[_g2];
						++_g2;
						e.removeEventListener(name,f);
					}
				}
			}
		}
	}
	,value: function() {
		var _g = this.get_tagname();
		switch(_g) {
		case "input":
			return this.field("value");
		default:
			return null;
		}
	}
	,iterator: function() {
		return new tannus_dom_ElIter(this);
	}
	,rect: function() {
		if(!(this.els.length <= 0)) {
			var cr = this.els[0].getBoundingClientRect();
			return new tannus_geom_CRectangle(cr.x,cr.y,cr.width,cr.height);
		} else return new tannus_geom_CRectangle(0,0,0,0);
	}
	,determineContext: function(ctx) {
		if(ctx == null) return; else if(typeof(ctx) == "string") this.determineStringContext(Std.string(ctx)); else if(js_Boot.__instanceof(ctx,HTMLElement)) this.els.push(ctx); else if(js_Boot.__instanceof(ctx,tannus_dom_CElement)) {
			var el = ctx;
			this.els = el.els;
		} else throw new js__$Boot_HaxeError("DOMError: Invalid Element context");
	}
	,determineStringContext: function(s) {
		s = StringTools.trim(s);
		if(StringTools.startsWith(s,"<")) this.els = tannus_dom_CElement.parseDocument(s); else {
			var nl = window.document.querySelectorAll(s);
			var _g1 = 0;
			var _g = nl.length;
			while(_g1 < _g) {
				var i = _g1++;
				var item = nl.item(i);
				if(js_Boot.__instanceof(item,HTMLElement)) this.els.push(item);
			}
		}
	}
	,initializeData: function() {
		var _g = 0;
		var _g1 = this.els;
		while(_g < _g1.length) {
			var el = _g1[_g];
			++_g;
			var e = el;
			if(!Object.prototype.hasOwnProperty.call(e,"__tandata")) {
				var value = { 'pri' : tannus_ds_CObj.create({ }), 'pub' : tannus_ds_CObj.create({ })};
				Reflect.setProperty(e,"__tandata",value);
				Reflect.getProperty(e,"__tandata");
			}
		}
	}
	,nodeData: function(e) {
		return Reflect.getProperty(e,"__tandata");
	}
	,get_length: function() {
		return this.els.length;
	}
	,get_empty: function() {
		return this.els.length <= 0;
	}
	,get_exists: function() {
		return !(this.els.length <= 0);
	}
	,get_first: function() {
		return this.els[0];
	}
	,get_css: function() {
		return this._style;
	}
	,get_attributes: function() {
		return this._attr;
	}
	,get_data: function() {
		return this._data;
	}
	,get_elements: function() {
		return this.els.map(function(item) {
			return new tannus_dom_CElement(item);
		});
	}
	,get_html: function() {
		if(!(this.els.length <= 0)) return this.els[0].innerHTML; else return "";
	}
	,set_html: function(v) {
		var _g = 0;
		var _g1 = this.els;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			e.innerHTML = v;
		}
		return v;
	}
	,get_text: function() {
		if(!(this.els.length <= 0)) {
			var result = "";
			var _g = 0;
			var _g1 = this.els;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				result += e.textContent;
			}
			return result;
		} else return "";
	}
	,set_text: function(v) {
		var _g = 0;
		var _g1 = this.els;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			e.textContent = v;
		}
		return v;
	}
	,get_tagname: function() {
		if(this.els.length <= 0) return ""; else return this.els[0].tagName.toLowerCase();
	}
	,get_parent: function() {
		if(!(this.els.length <= 0) && this.els[0].parentElement != null) return new tannus_dom_CElement(this.els[0].parentElement); else return null;
	}
	,__class__: tannus_dom_CElement
	,__properties__: {get_parent:"get_parent",get_tagname:"get_tagname",set_text:"set_text",get_text:"get_text",set_html:"set_html",get_html:"get_html",get_elements:"get_elements",get_data:"get_data",get_attributes:"get_attributes",get_css:"get_css",get_first:"get_first",get_exists:"get_exists",get_empty:"get_empty",get_length:"get_length"}
};
var tannus_dom__$Styles_Styles_$Impl_$ = {};
$hxClasses["tannus.dom._Styles.Styles_Impl_"] = tannus_dom__$Styles_Styles_$Impl_$;
tannus_dom__$Styles_Styles_$Impl_$.__name__ = ["tannus","dom","_Styles","Styles_Impl_"];
tannus_dom__$Styles_Styles_$Impl_$._new = function(e) {
	return new tannus_dom_CStyles(e);
};
tannus_dom__$Styles_Styles_$Impl_$.get = function(this1,name) {
	return this1.get(name);
};
tannus_dom__$Styles_Styles_$Impl_$.set = function(this1,name,value) {
	return this1.set(name,value);
};
tannus_dom__$Styles_Styles_$Impl_$.ref = function(this1,name) {
	var g = (function(f,a1) {
		return function() {
			return f(a1);
		};
	})($bind(this1,this1.get),name);
	var s = (function(f1,a11) {
		return function(a2) {
			return f1(a11,a2);
		};
	})($bind(this1,this1.set),name);
	return new tannus_io__$Pointer_Ref(g,s);
};
tannus_dom__$Styles_Styles_$Impl_$.toObject = function(this1) {
	return this1.toObject();
};
tannus_dom__$Styles_Styles_$Impl_$.write = function(this1,o) {
	this1.write(o);
};
tannus_dom__$Styles_Styles_$Impl_$.pluck = function(this1,keys) {
	var props = { };
	var _g = 0;
	while(_g < keys.length) {
		var key = keys[_g];
		++_g;
		var value = this1.get(key);
		Reflect.setProperty(props,key,value);
		Reflect.getProperty(props,key);
	}
	return props;
};
var tannus_dom_CStyles = function(e) {
	this.element = e;
};
$hxClasses["tannus.dom.CStyles"] = tannus_dom_CStyles;
tannus_dom_CStyles.__name__ = ["tannus","dom","CStyles"];
tannus_dom_CStyles.prototype = {
	get: function(name) {
		if(this.element.els.length <= 0) return ""; else return this.first().getPropertyValue(name);
	}
	,set: function(name,value) {
		var _g = 0;
		var _g1 = this.all();
		while(_g < _g1.length) {
			var css = _g1[_g];
			++_g;
			css.setProperty(name,Std.string(value));
		}
		return Std.string(value);
	}
	,remove: function(name) {
		var _g = 0;
		var _g1 = this.all();
		while(_g < _g1.length) {
			var css = _g1[_g];
			++_g;
			css.removeProperty(name);
		}
	}
	,toObject: function() {
		var o = { };
		var css = this.first();
		if(css != null) {
			var _g1 = 0;
			var _g = css.length;
			while(_g1 < _g) {
				var i = _g1++;
				var name = css.item(i);
				var value = css.getPropertyValue(name);
				{
					Reflect.setProperty(o,name,value);
					Reflect.getProperty(o,name);
				}
			}
		}
		return o;
	}
	,write: function(o) {
		var _g = 0;
		var _g1 = this.all();
		while(_g < _g1.length) {
			var css = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = Reflect.fields(o);
			while(_g2 < _g3.length) {
				var name = _g3[_g2];
				++_g2;
				css.setProperty(name,Std.string(Reflect.getProperty(o,name)));
			}
		}
	}
	,first: function() {
		if(!(this.element.els.length <= 0)) return window.getComputedStyle(this.element.els[0]); else return null;
	}
	,all: function() {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.element.els;
		while(_g1 < _g2.length) {
			var e = _g2[_g1];
			++_g1;
			_g.push(e.style);
		}
		return _g;
	}
	,__class__: tannus_dom_CStyles
};
var tannus_ds__$ActionStack_ActionStack_$Impl_$ = {};
$hxClasses["tannus.ds._ActionStack.ActionStack_Impl_"] = tannus_ds__$ActionStack_ActionStack_$Impl_$;
tannus_ds__$ActionStack_ActionStack_$Impl_$.__name__ = ["tannus","ds","_ActionStack","ActionStack_Impl_"];
tannus_ds__$ActionStack_ActionStack_$Impl_$._new = function() {
	return [];
};
tannus_ds__$ActionStack_ActionStack_$Impl_$.call = function(this1) {
	var _g = 0;
	while(_g < this1.length) {
		var action = this1[_g];
		++_g;
		action();
	}
};
tannus_ds__$ActionStack_ActionStack_$Impl_$.clone = function(this1) {
	return this1.slice();
};
var tannus_ds__$ActionStack_ParametricStack_$Impl_$ = {};
$hxClasses["tannus.ds._ActionStack.ParametricStack_Impl_"] = tannus_ds__$ActionStack_ParametricStack_$Impl_$;
tannus_ds__$ActionStack_ParametricStack_$Impl_$.__name__ = ["tannus","ds","_ActionStack","ParametricStack_Impl_"];
tannus_ds__$ActionStack_ParametricStack_$Impl_$._new = function() {
	return [];
};
tannus_ds__$ActionStack_ParametricStack_$Impl_$.call = function(this1,context) {
	var _g = 0;
	while(_g < this1.length) {
		var a = this1[_g];
		++_g;
		a(context);
	}
};
var tannus_ds_ArrayTools = $hx_exports.ArrayTools = function() { };
$hxClasses["tannus.ds.ArrayTools"] = tannus_ds_ArrayTools;
tannus_ds_ArrayTools.__name__ = ["tannus","ds","ArrayTools"];
tannus_ds_ArrayTools.equal = function(a) {
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		var _g3 = i;
		var _g2 = a.length;
		while(_g3 < _g2) {
			var j = _g3++;
			if(a[i] != a[j]) return false;
		}
	}
	return true;
};
tannus_ds_ArrayTools.compare = function(left,right,predicate) {
	if(left.length != right.length) return false; else {
		if(predicate == null) predicate = function(x,y) {
			return x == y;
		};
		var _g1 = 0;
		var _g = left.length;
		while(_g1 < _g) {
			var i = _g1++;
			var l = left[i];
			var r = right[i];
			if(!predicate(l,r)) return false;
		}
		return true;
	}
};
tannus_ds_ArrayTools.pointerArray = function(a) {
	var res = [];
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = [_g1++];
		res.push(new tannus_io__$Pointer_Ref((function(i) {
			return function() {
				return a[i[0]];
			};
		})(i),(function(i) {
			return function(v) {
				return a[i[0]] = v;
			};
		})(i)));
	}
	return res;
};
tannus_ds_ArrayTools.without = function(list,blacklist) {
	var c = list.slice();
	var _g = 0;
	while(_g < blacklist.length) {
		var v = blacklist[_g];
		++_g;
		while(true) if(!HxOverrides.remove(c,v)) break;
	}
	return c;
};
tannus_ds_ArrayTools.firstMatch = function(list,test) {
	var _g = 0;
	while(_g < list.length) {
		var item = list[_g];
		++_g;
		if(test(item)) return item;
	}
	return null;
};
tannus_ds_ArrayTools.firstMatchIndex = function(list,test) {
	var _g1 = 0;
	var _g = list.length;
	while(_g1 < _g) {
		var index = _g1++;
		if(test(list[index])) return index;
	}
	return -1;
};
tannus_ds_ArrayTools.hasf = function(set,item,tester) {
	var $it0 = $iterator(set)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(tester(x,item)) return true;
	}
	return false;
};
tannus_ds_ArrayTools.unique = function(set,tester) {
	if(tester == null) tester = function(x,y) {
		return x == y;
	};
	var results = [];
	var _g = 0;
	while(_g < set.length) {
		var item = set[_g];
		++_g;
		if(!tannus_ds_ArrayTools.hasf(results,item,tester)) results.push(item);
	}
	return results;
};
tannus_ds_ArrayTools.union = function(one,other) {
	return one.filter(function(item) {
		return Lambda.has(other,item);
	});
};
tannus_ds_ArrayTools.intersection = function(one,two) {
	if(one.length < two.length) return one.filter(function(item) {
		return !Lambda.has(two,item);
	}); else return two.filter(function(item1) {
		return !Lambda.has(one,item1);
	});
};
tannus_ds_ArrayTools.flatten = function(set) {
	var res = [];
	var _g = 0;
	while(_g < set.length) {
		var sub = set[_g];
		++_g;
		res = res.concat(sub);
	}
	return res;
};
tannus_ds_ArrayTools.last = function(list,v) {
	if(v == null) return list[list.length - 1]; else return list[list.length - 1] = v;
};
tannus_ds_ArrayTools.before = function(list,val) {
	return list.slice(0,HxOverrides.indexOf(list,val,0) != -1?HxOverrides.indexOf(list,val,0):list.length);
};
tannus_ds_ArrayTools.after = function(list,val) {
	return list.slice(HxOverrides.indexOf(list,val,0) != -1?HxOverrides.indexOf(list,val,0) + 1:0);
};
tannus_ds_ArrayTools.times = function(list,n) {
	var res = list.slice();
	var _g1 = 0;
	var _g = n - 1;
	while(_g1 < _g) {
		var i = _g1++;
		res = res.concat(list.slice());
	}
	return res;
};
tannus_ds_ArrayTools.min = function(list,predicate) {
	var m = null;
	var $it0 = $iterator(list)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		var score = predicate(x);
		if(m == null || score < m[1]) m = [x,score];
	}
	if(m == null) return null;
	return m[0];
};
tannus_ds_ArrayTools.max = function(list,predicate) {
	var m = null;
	var $it0 = $iterator(list)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		var score = predicate(x);
		if(m == null || score > m[1]) m = [x,score];
	}
	if(m == null) return null;
	return m[0];
};
tannus_ds_ArrayTools.minmax = function(list,predicate) {
	var l = null;
	var h = null;
	var $it0 = $iterator(list)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		var score = predicate(x);
		if(l == null || score < l[1]) l = [x,score]; else if(h == null || score > h[1]) h = [x,score];
	}
	if(l == null || h == null) throw new js__$Boot_HaxeError("Error: Iterable must not be empty!");
	return { 'min' : l[0], 'max' : h[0]};
};
tannus_ds_ArrayTools.splitfilter = function(list,pred) {
	var res = { 'pass' : [], 'fail' : []};
	var _g = 0;
	while(_g < list.length) {
		var item = list[_g];
		++_g;
		(pred(item)?res.pass:res.fail).push(item);
	}
	return res;
};
tannus_ds_ArrayTools.partition = function(list,pred) {
	var results = [[],[]];
	var _g = 0;
	while(_g < list.length) {
		var x = list[_g];
		++_g;
		results[pred(x)?0:1].push(x);
	}
	return results;
};
tannus_ds_ArrayTools.mapfilter = function(list,test,map) {
	var results = [];
	var _g = 0;
	while(_g < list.length) {
		var x = list[_g];
		++_g;
		if(test(x)) results.push(map(x));
	}
	return results;
};
tannus_ds_ArrayTools.zip = function(left,right) {
	var pairs = [];
	var _g1 = 0;
	var _g = left.length;
	while(_g1 < _g) {
		var i = _g1++;
		pairs.push(new tannus_ds_CPair(left[i],right[i]));
	}
	return pairs;
};
tannus_ds_ArrayTools.zipmap = function(left,right,predicate) {
	var pairs = tannus_ds_ArrayTools.zip(left,right);
	var _g = [];
	var _g1 = 0;
	while(_g1 < pairs.length) {
		var p = pairs[_g1];
		++_g1;
		_g.push(predicate(p.left,p.right));
	}
	return _g;
};
tannus_ds_ArrayTools.gridify = function(arr) {
	return tannus_ds_Grid.fromArray2(arr);
};
tannus_ds_ArrayTools.lpad = function(list,len,value) {
	if(list.length >= len) return list; else {
		var res = list.slice();
		while(res.length < len) res.unshift(value);
		return res;
	}
};
tannus_ds_ArrayTools.rpad = function(list,len,value) {
	if(list.length >= len) return list; else {
		var res = list.slice();
		while(res.length < len) res.push(value);
		return res;
	}
};
var tannus_ds__$Async_Async_$Impl_$ = {};
$hxClasses["tannus.ds._Async.Async_Impl_"] = tannus_ds__$Async_Async_$Impl_$;
tannus_ds__$Async_Async_$Impl_$.__name__ = ["tannus","ds","_Async","Async_Impl_"];
tannus_ds__$Async_Async_$Impl_$._new = function(f) {
	return f;
};
tannus_ds__$Async_Async_$Impl_$.fromTask = function(t) {
	var f = t.toAsync();
	return f;
};
tannus_ds__$Async_Async_$Impl_$.toTask = function(this1) {
	return new tannus_ds__$Async_AsyncTask(this1);
};
var tannus_ds__$Async_Async1_$Impl_$ = {};
$hxClasses["tannus.ds._Async.Async1_Impl_"] = tannus_ds__$Async_Async1_$Impl_$;
tannus_ds__$Async_Async1_$Impl_$.__name__ = ["tannus","ds","_Async","Async1_Impl_"];
tannus_ds__$Async_Async1_$Impl_$._new = function(f) {
	return f;
};
var tannus_ds__$Async_AsyncTask = function(a) {
	tannus_ds_Task.call(this);
	this.f = a;
};
$hxClasses["tannus.ds._Async.AsyncTask"] = tannus_ds__$Async_AsyncTask;
tannus_ds__$Async_AsyncTask.__name__ = ["tannus","ds","_Async","AsyncTask"];
tannus_ds__$Async_AsyncTask.__super__ = tannus_ds_Task;
tannus_ds__$Async_AsyncTask.prototype = $extend(tannus_ds_Task.prototype,{
	action: function(done) {
		this.f(done);
	}
	,__class__: tannus_ds__$Async_AsyncTask
});
var tannus_ds_AsyncPool = function() {
	this.tasks = [];
	this.results = [];
	this._done = new tannus_io_Signal();
};
$hxClasses["tannus.ds.AsyncPool"] = tannus_ds_AsyncPool;
tannus_ds_AsyncPool.__name__ = ["tannus","ds","AsyncPool"];
tannus_ds_AsyncPool.prototype = {
	push: function(task) {
		var t = { index : 0, task : task};
		t.index = this.tasks.push(t);
	}
	,taskDone: function(task,error,result) {
		this.results.push({ task : task, error : error, value : result});
		if(this.results.length == this.tasks.length) this.complete();
	}
	,complete: function() {
		var reslist = [];
		haxe_ds_ArraySort.sort(this.results,function(left,right) {
			return left.task.index - right.task.index;
		});
		reslist = this.results.map(function(item) {
			return { error : item.error, value : item.value};
		});
		this._done.broadcast(reslist);
	}
	,run: function(callback) {
		this._done.listen(callback,true);
		var _g = 0;
		var _g1 = this.tasks;
		while(_g < _g1.length) {
			var task = _g1[_g];
			++_g;
			task.task(task.index,(function(f,a1) {
				return function(a2,a3) {
					f(a1,a2,a3);
				};
			})($bind(this,this.taskDone),task));
		}
	}
	,__class__: tannus_ds_AsyncPool
};
var tannus_ds_Stack = function(dat) {
	if(dat != null) this.data = dat; else this.data = [];
};
$hxClasses["tannus.ds.Stack"] = tannus_ds_Stack;
tannus_ds_Stack.__name__ = ["tannus","ds","Stack"];
tannus_ds_Stack.prototype = {
	peek: function(d) {
		if(d == null) d = 0;
		return this.data[d];
	}
	,pop: function() {
		return this.data.shift();
	}
	,add: function(item) {
		this.data.unshift(item);
	}
	,under: function(item) {
		this.data.push(item);
	}
	,bottom: function() {
		return this.data.pop();
	}
	,remove: function(v) {
		return HxOverrides.remove(this.data,v);
	}
	,next: function(item) {
		if(item != null) this.add(item); else item = this.pop();
		return item;
	}
	,last: function(item) {
		if(item != null) this.under(item); else item = this.bottom();
		return item;
	}
	,copy: function() {
		return new tannus_ds_Stack(this.data.slice());
	}
	,iterator: function() {
		return new tannus_ds__$Stack_StackIterator(this);
	}
	,getData: function() {
		return this.data;
	}
	,get_empty: function() {
		return this.data.length == 0;
	}
	,__class__: tannus_ds_Stack
	,__properties__: {get_empty:"get_empty"}
};
var tannus_ds_AsyncStack = function() {
	tannus_ds_Stack.call(this);
	this.completion = new tannus_io_VoidSignal();
};
$hxClasses["tannus.ds.AsyncStack"] = tannus_ds_AsyncStack;
tannus_ds_AsyncStack.__name__ = ["tannus","ds","AsyncStack"];
tannus_ds_AsyncStack.__super__ = tannus_ds_Stack;
tannus_ds_AsyncStack.prototype = $extend(tannus_ds_Stack.prototype,{
	callNext: function() {
		if(!this.get_empty()) {
			var action = this.pop();
			action($bind(this,this.callNext));
		} else this.completion.call();
	}
	,run: function(done) {
		if(this.get_empty()) done(); else {
			this.completion.once(done);
			this.callNext();
		}
	}
	,push: function(f) {
		this.under(f);
	}
	,__class__: tannus_ds_AsyncStack
});
var tannus_ds__$Delta_Delta_$Impl_$ = {};
$hxClasses["tannus.ds._Delta.Delta_Impl_"] = tannus_ds__$Delta_Delta_$Impl_$;
tannus_ds__$Delta_Delta_$Impl_$.__name__ = ["tannus","ds","_Delta","Delta_Impl_"];
tannus_ds__$Delta_Delta_$Impl_$.__properties__ = {get_previous:"get_previous",get_current:"get_current"}
tannus_ds__$Delta_Delta_$Impl_$._new = function(cur,prev) {
	return [cur,prev];
};
tannus_ds__$Delta_Delta_$Impl_$.toString = function(this1) {
	var res = "Delta(";
	if(this1[1] != null) res += "from " + Std.string(this1[1]) + " ";
	res += "to " + Std.string(this1[0]) + ")";
	return res;
};
tannus_ds__$Delta_Delta_$Impl_$.get_current = function(this1) {
	return this1[0];
};
tannus_ds__$Delta_Delta_$Impl_$.get_previous = function(this1) {
	return this1[1];
};
var tannus_ds__$Dict_Dict_$Impl_$ = {};
$hxClasses["tannus.ds._Dict.Dict_Impl_"] = tannus_ds__$Dict_Dict_$Impl_$;
tannus_ds__$Dict_Dict_$Impl_$.__name__ = ["tannus","ds","_Dict","Dict_Impl_"];
tannus_ds__$Dict_Dict_$Impl_$.get = function(this1,key) {
	return this1.get(key);
};
tannus_ds__$Dict_Dict_$Impl_$.set = function(this1,key,value) {
	return this1.set(key,value);
};
tannus_ds__$Dict_Dict_$Impl_$.toStringDict = function(v) {
	return new tannus_ds_dict_StringDict();
};
tannus_ds__$Dict_Dict_$Impl_$.toIntDict = function(v) {
	return new tannus_ds_dict_IntDict();
};
tannus_ds__$Dict_Dict_$Impl_$.toEnumValueDict = function(v) {
	return new tannus_ds_dict_EnumValueDict();
};
tannus_ds__$Dict_Dict_$Impl_$.toComparableDict = function(v) {
	return new tannus_ds_dict_ComparableDict();
};
var tannus_ds__$EitherType_EitherType_$Impl_$ = {};
$hxClasses["tannus.ds._EitherType.EitherType_Impl_"] = tannus_ds__$EitherType_EitherType_$Impl_$;
tannus_ds__$EitherType_EitherType_$Impl_$.__name__ = ["tannus","ds","_EitherType","EitherType_Impl_"];
tannus_ds__$EitherType_EitherType_$Impl_$.__properties__ = {get_type:"get_type"}
tannus_ds__$EitherType_EitherType_$Impl_$._new = function(e) {
	return e;
};
tannus_ds__$EitherType_EitherType_$Impl_$.get_type = function(this1) {
	return this1;
};
tannus_ds__$EitherType_EitherType_$Impl_$.toLeft = function(this1) {
	{
		var _g = this1;
		switch(_g[1]) {
		case 0:
			var lv = _g[2];
			return lv;
		case 1:
			var rv = _g[2];
			throw new js__$Boot_HaxeError("EitherTypeError: " + Std.string(rv) + " was not the expected value!");
			break;
		}
	}
};
tannus_ds__$EitherType_EitherType_$Impl_$.toRight = function(this1) {
	{
		var _g = this1;
		switch(_g[1]) {
		case 1:
			var rv = _g[2];
			return rv;
		case 0:
			var lv = _g[2];
			throw new js__$Boot_HaxeError("EitherTypeError: " + Std.string(lv) + " was not the expected value!");
			break;
		}
	}
};
tannus_ds__$EitherType_EitherType_$Impl_$.fromL = function(v) {
	var e = tannus_ds_Either.Left(v);
	return e;
};
tannus_ds__$EitherType_EitherType_$Impl_$.fromR = function(v) {
	var e = tannus_ds_Either.Right(v);
	return e;
};
var tannus_ds_Either = $hxClasses["tannus.ds.Either"] = { __ename__ : ["tannus","ds","Either"], __constructs__ : ["Left","Right"] };
tannus_ds_Either.Left = function(value) { var $x = ["Left",0,value]; $x.__enum__ = tannus_ds_Either; $x.toString = $estr; return $x; };
tannus_ds_Either.Right = function(value) { var $x = ["Right",1,value]; $x.__enum__ = tannus_ds_Either; $x.toString = $estr; return $x; };
var tannus_ds_Range = function(mi,ma) {
	this.min = mi;
	this.max = ma;
};
$hxClasses["tannus.ds.Range"] = tannus_ds_Range;
tannus_ds_Range.__name__ = ["tannus","ds","Range"];
tannus_ds_Range.prototype = {
	contains: function(v) {
		return v > this.min && v < this.max;
	}
	,clamp: function(v) {
		if(v < this.min) return this.min; else if(v > this.max) return this.max; else return v;
	}
	,toString: function() {
		return "Range(" + Std.string(this.min) + " => " + Std.string(this.max) + ")";
	}
	,get_size: function() {
		return this.max - this.min;
	}
	,__class__: tannus_ds_Range
	,__properties__: {get_size:"get_size"}
};
var tannus_ds_FloatRange = function(mi,ma) {
	tannus_ds_Range.call(this,mi,ma);
};
$hxClasses["tannus.ds.FloatRange"] = tannus_ds_FloatRange;
tannus_ds_FloatRange.__name__ = ["tannus","ds","FloatRange"];
tannus_ds_FloatRange.__super__ = tannus_ds_Range;
tannus_ds_FloatRange.prototype = $extend(tannus_ds_Range.prototype,{
	__class__: tannus_ds_FloatRange
});
var tannus_ds_Grid = function(w,h) {
	this.w = w;
	this.h = h;
	var this1;
	this1 = new Array(w * h);
	this.data = this1;
};
$hxClasses["tannus.ds.Grid"] = tannus_ds_Grid;
tannus_ds_Grid.__name__ = ["tannus","ds","Grid"];
tannus_ds_Grid.fromArray = function(dat,w,h) {
	var grid = new tannus_ds_Grid(w,h);
	var vec;
	var this1;
	this1 = new Array(dat.length);
	vec = this1;
	var _g1 = 0;
	var _g = dat.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = dat[i];
	}
	grid.data = vec;
	return grid;
};
tannus_ds_Grid.fromArray2 = function(dat) {
	var h = dat.length;
	if(h > 0) {
		var w = dat[0].length;
		if(w <= 0) throw new js__$Boot_HaxeError("GridError: Grid width must be >= 0");
		return tannus_ds_Grid.fromArray(tannus_ds_ArrayTools.flatten(dat),w,h);
	} else throw new js__$Boot_HaxeError("GridError: Grid height must be >= 0");
};
tannus_ds_Grid.prototype = {
	set: function(x,y,value) {
		if(!(x >= this.w || x < 0 || (y >= this.h || y < 0))) return this.data[x + y * this.w] = value; else return value;
	}
	,get: function(x,y) {
		if(x >= this.w || x < 0 || (y >= this.h || y < 0)) return null;
		return this.data[x + y * this.w];
	}
	,at: function(pos) {
		var _g = this;
		var ref;
		var g = (function(f,x,y) {
			return function() {
				return f(x,y);
			};
		})($bind(this,this.get),pos._x,pos._y);
		var s = (function(f1,x1,y1) {
			return function(a1) {
				return f1(x1,y1,a1);
			};
		})($bind(this,this.set),pos._x,pos._y);
		ref = new tannus_io__$Pointer_Ref(g,s);
		ref.deleter = function() {
			_g.remove(pos._x,pos._y);
		};
		return ref;
	}
	,pos: function(x,y) {
		return new tannus_ds_GridPos(x,y);
	}
	,posOf: function(value) {
		var _g1 = 0;
		var _g = this.data.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.data[i] == value) return this.pos(i % this.w,i / this.w | 0);
		}
		return null;
	}
	,valueAt: function(pos) {
		return this.get(pos._x,pos._y);
	}
	,remove: function(x,y) {
		var v = this.get(x,y);
		this.data[x + y * this.w] = null;
		return v != null;
	}
	,iterator: function() {
		return new tannus_ds__$Grid_GridValueIterator(this);
	}
	,positions: function() {
		return new tannus_ds__$Grid_GridPosIterator(this);
	}
	,index: function(x,y) {
		return x + y * this.w;
	}
	,position: function(index) {
		return new tannus_ds_GridPos(index % this.w,index / this.w | 0);
	}
	,get_length: function() {
		return this.data.length;
	}
	,__class__: tannus_ds_Grid
	,__properties__: {get_length:"get_length"}
};
var tannus_ds__$Grid_GridValueIterator = function(g) {
	this.grid = g;
	this.it = this.grid.positions();
};
$hxClasses["tannus.ds._Grid.GridValueIterator"] = tannus_ds__$Grid_GridValueIterator;
tannus_ds__$Grid_GridValueIterator.__name__ = ["tannus","ds","_Grid","GridValueIterator"];
tannus_ds__$Grid_GridValueIterator.prototype = {
	hasNext: function() {
		return this.it.hasNext();
	}
	,next: function() {
		var p = this.it.next();
		return this.grid.get(p._x,p._y);
	}
	,__class__: tannus_ds__$Grid_GridValueIterator
};
var tannus_ds__$Grid_GridPosIterator = function(g) {
	this.grid = g;
	this.it = new IntIterator(0,g.data.length);
};
$hxClasses["tannus.ds._Grid.GridPosIterator"] = tannus_ds__$Grid_GridPosIterator;
tannus_ds__$Grid_GridPosIterator.__name__ = ["tannus","ds","_Grid","GridPosIterator"];
tannus_ds__$Grid_GridPosIterator.prototype = {
	hasNext: function() {
		return this.it.hasNext();
	}
	,next: function() {
		return this.grid.position(this.it.min++);
	}
	,__class__: tannus_ds__$Grid_GridPosIterator
};
var tannus_ds_GridPos = function(x,y) {
	this._x = x;
	this._y = y;
};
$hxClasses["tannus.ds.GridPos"] = tannus_ds_GridPos;
tannus_ds_GridPos.__name__ = ["tannus","ds","GridPos"];
tannus_ds_GridPos.prototype = {
	left: function() {
		return new tannus_ds_GridPos(this._x - 1,this._y);
	}
	,right: function() {
		return new tannus_ds_GridPos(this._x + 1,this._y);
	}
	,top: function() {
		return new tannus_ds_GridPos(this._x,this._y - 1);
	}
	,bottom: function() {
		return new tannus_ds_GridPos(this._x,this._y + 1);
	}
	,toString: function() {
		return "(" + this._x + ", " + this._y + ")";
	}
	,get_x: function() {
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,__class__: tannus_ds_GridPos
	,__properties__: {get_y:"get_y",get_x:"get_x"}
};
var tannus_ds_MapTools = function() { };
$hxClasses["tannus.ds.MapTools"] = tannus_ds_MapTools;
tannus_ds_MapTools.__name__ = ["tannus","ds","MapTools"];
tannus_ds_MapTools.keyArray = function(self) {
	var _g = [];
	var $it0 = self.keys();
	while( $it0.hasNext() ) {
		var k = $it0.next();
		_g.push(k);
	}
	return _g;
};
tannus_ds_MapTools.pull = function(o,source) {
	var $it0 = source.keys();
	while( $it0.hasNext() ) {
		var key = $it0.next();
		var v = source.get(key);
		o.set(key,v);
		v;
	}
};
tannus_ds_MapTools.toObject = function(self) {
	var o = { };
	var $it0 = self.keys();
	while( $it0.hasNext() ) {
		var key = $it0.next();
		var value;
		value = __map_reserved[key] != null?self.getReserved(key):self.h[key];
		Reflect.setProperty(o,key,value);
		Reflect.getProperty(o,key);
	}
	return o;
};
var tannus_ds__$Maybe_Maybe_$Impl_$ = {};
$hxClasses["tannus.ds._Maybe.Maybe_Impl_"] = tannus_ds__$Maybe_Maybe_$Impl_$;
tannus_ds__$Maybe_Maybe_$Impl_$.__name__ = ["tannus","ds","_Maybe","Maybe_Impl_"];
tannus_ds__$Maybe_Maybe_$Impl_$.__properties__ = {get_value:"get_value",get_exists:"get_exists"}
tannus_ds__$Maybe_Maybe_$Impl_$._new = function(x) {
	return x;
};
tannus_ds__$Maybe_Maybe_$Impl_$.or = function(this1,alt) {
	if(this1 != null) return this1; else return alt;
};
tannus_ds__$Maybe_Maybe_$Impl_$.orGetter = function(this1,gettr) {
	if(this1 != null) return this1; else return gettr();
};
tannus_ds__$Maybe_Maybe_$Impl_$.runIf = function(this1,f) {
	if(this1 != null) return f(this1 != null?this1:this1); else return null;
};
tannus_ds__$Maybe_Maybe_$Impl_$.get_exists = function(this1) {
	return this1 != null;
};
tannus_ds__$Maybe_Maybe_$Impl_$.get_value = function(this1) {
	return this1 != null?this1:this1;
};
tannus_ds__$Maybe_Maybe_$Impl_$.orDie = function(this1,error) {
	if(!(this1 != null)) throw new js__$Boot_HaxeError(error);
	return this1 != null?this1:this1;
};
tannus_ds__$Maybe_Maybe_$Impl_$.toNonNullable = function(this1) {
	if(this1 != null) return this1; else return this1;
};
tannus_ds__$Maybe_Maybe_$Impl_$.toBoolean = function(this1) {
	return this1 != null;
};
var tannus_ds_Memory = function() { };
$hxClasses["tannus.ds.Memory"] = tannus_ds_Memory;
tannus_ds_Memory.__name__ = ["tannus","ds","Memory"];
tannus_ds_Memory.uniqueIdInt = function() {
	var id = tannus_ds_Memory.state;
	tannus_ds_Memory.state++;
	return id;
};
tannus_ds_Memory.uniqueIdString = function(prefix) {
	if(prefix == null) prefix = "";
	return prefix + tannus_ds_Memory.uniqueIdInt();
};
tannus_ds_Memory.allocRandomId = function(digits) {
	var id = "";
	var r = new tannus_math_Random();
	var _g = 0;
	while(_g < digits) {
		var i = _g++;
		var range = [0,0];
		var letter = r.randbool();
		if(letter) {
			var upper = r.randbool();
			if(upper) range = [65,90]; else range = [97,122];
		} else range = [48,57];
		var c;
		var n = r.randint(range[0],range[1]);
		var this1;
		if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
		this1 = n;
		c = this1;
		id += String.fromCharCode(c);
	}
	if(Lambda.has(tannus_ds_Memory.used,id)) return tannus_ds_Memory.allocRandomId(digits); else {
		tannus_ds_Memory.used.push(id);
		return id;
	}
};
tannus_ds_Memory.freeRandomId = function(id) {
	return HxOverrides.remove(tannus_ds_Memory.used,id);
};
var tannus_ds__$Method_Method_$Impl_$ = {};
$hxClasses["tannus.ds._Method.Method_Impl_"] = tannus_ds__$Method_Method_$Impl_$;
tannus_ds__$Method_Method_$Impl_$.__name__ = ["tannus","ds","_Method","Method_Impl_"];
tannus_ds__$Method_Method_$Impl_$.__properties__ = {get_call:"get_call"}
tannus_ds__$Method_Method_$Impl_$._new = function(func,ctx) {
	var this1;
	this1 = (function(f,o,a1) {
		return function(a2) {
			return f(o,a1,a2);
		};
	})(Reflect.callMethod,ctx,func);
	return this1;
};
tannus_ds__$Method_Method_$Impl_$.get_call = function(this1) {
	return Reflect.makeVarArgs(this1);
};
tannus_ds__$Method_Method_$Impl_$.fromFunction = function(f) {
	var this1;
	this1 = (function(f1,o,a1) {
		return function(a2) {
			return f1(o,a1,a2);
		};
	})(Reflect.callMethod,null,f);
	return this1;
};
var tannus_ds__$Obj_Obj_$Impl_$ = {};
$hxClasses["tannus.ds._Obj.Obj_Impl_"] = tannus_ds__$Obj_Obj_$Impl_$;
tannus_ds__$Obj_Obj_$Impl_$.__name__ = ["tannus","ds","_Obj","Obj_Impl_"];
tannus_ds__$Obj_Obj_$Impl_$._new = function(o) {
	var this1;
	this1 = tannus_ds_CObj.create(o);
	return this1;
};
tannus_ds__$Obj_Obj_$Impl_$.toDyn = function(this1) {
	return this1.o;
};
tannus_ds__$Obj_Obj_$Impl_$.get = function(this1,key) {
	return Reflect.getProperty(this1.o,key);
};
tannus_ds__$Obj_Obj_$Impl_$.set = function(this1,key,val) {
	return this1.set(key,val);
};
tannus_ds__$Obj_Obj_$Impl_$.fromDynamic = function(d) {
	return tannus_ds_CObj.create(d);
};
var tannus_ds_CObj = $hx_exports.tannus.ds.Obj = function(obj) {
	this.o = obj;
	this.refCache = new haxe_ds_StringMap();
};
$hxClasses["tannus.ds.CObj"] = tannus_ds_CObj;
tannus_ds_CObj.__name__ = ["tannus","ds","CObj"];
tannus_ds_CObj.create = function(o) {
	if(js_Boot.__instanceof(o,tannus_ds_CObj)) return o; else return new tannus_ds_CObj(o);
};
tannus_ds_CObj.prototype = {
	keys: function() {
		return Reflect.fields(this.o);
	}
	,exists: function(key) {
		return Object.prototype.hasOwnProperty.call(this.o,key);
	}
	,get: function(key) {
		return Reflect.getProperty(this.o,key);
	}
	,set: function(key,val) {
		Reflect.setProperty(this.o,key,val);
		return Reflect.getProperty(this.o,key);
	}
	,method: function(name) {
		return Reflect.makeVarArgs((function(f,a1) {
			return function(a2) {
				return f(a1,a2);
			};
		})((function(_e) {
			return function(func,args) {
				return func.apply(_e,args);
			};
		})(this.o),Reflect.getProperty(this.o,name)));
	}
	,call: function(name,args) {
		return Reflect.callMethod(this.o,Reflect.getProperty(this.o,name),args);
	}
	,field: function(key) {
		var _g = this;
		if(this.refCache.exists(key)) return this.refCache.get(key); else {
			var ref;
			var g = (function(f,a1) {
				return function() {
					return f(a1);
				};
			})($bind(this,this.get),key);
			var s = (function(f1,a11) {
				return function(a2) {
					return f1(a11,a2);
				};
			})($bind(this,this.set),key);
			ref = new tannus_io__$Pointer_Ref(g,s);
			this.refCache.set(key,ref);
			return ref;
		}
	}
	,remove: function(key) {
		return Reflect.deleteField(this.o,key);
	}
	,pluck: function(keys) {
		var o = { };
		var copy = tannus_ds_CObj.create(o);
		var _g = 0;
		var _g1 = this.keys();
		while(_g < _g1.length) {
			var k = _g1[_g];
			++_g;
			if(Lambda.has(keys,k)) {
				var val = Reflect.getProperty(this.o,k);
				copy.set(k,val);
			}
		}
		return copy;
	}
	,rawclone: function() {
		var o = { };
		var copy = tannus_ds_CObj.create(o);
		var _g = 0;
		var _g1 = this.keys();
		while(_g < _g1.length) {
			var k = _g1[_g];
			++_g;
			var val = Reflect.getProperty(this.o,k);
			copy.set(k,val);
		}
		return copy;
	}
	,clone: function() {
		var klass = Type.getClass(this.o);
		if(klass != null) {
			var copi = Type.createEmptyInstance(klass);
			var ocopy = tannus_ds_CObj.create(copi);
			var _g = 0;
			var _g1 = this.keys();
			while(_g < _g1.length) {
				var k = _g1[_g];
				++_g;
				var val = Reflect.getProperty(this.o,k);
				ocopy.set(k,val);
			}
			return ocopy;
		} else return Reflect.copy(this.o);
	}
	,defineGetter: function(key,getter) {
		Reflect.callMethod(this.o,Reflect.getProperty(this.o,"__defineGetter__"),[key,getter]);
	}
	,defineSetter: function(key,setter) {
		Reflect.callMethod(this.o,Reflect.getProperty(this.o,"__defineSetter__"),[key,setter]);
	}
	,defineProperty: function(name,pointer) {
		Reflect.callMethod(this.o,Reflect.getProperty(this.o,"__defineGetter__"),[name,pointer.getter]);
		Reflect.callMethod(this.o,Reflect.getProperty(this.o,"__defineSetter__"),[name,pointer.setter]);
	}
	,__class__: tannus_ds_CObj
};
var tannus_ds__$Object_Object_$Impl_$ = {};
$hxClasses["tannus.ds._Object.Object_Impl_"] = tannus_ds__$Object_Object_$Impl_$;
tannus_ds__$Object_Object_$Impl_$.__name__ = ["tannus","ds","_Object","Object_Impl_"];
tannus_ds__$Object_Object_$Impl_$.__properties__ = {get_keys:"get_keys"}
tannus_ds__$Object_Object_$Impl_$._new = function(o) {
	return o;
};
tannus_ds__$Object_Object_$Impl_$.get_keys = function(this1) {
	return Reflect.fields(this1);
};
tannus_ds__$Object_Object_$Impl_$.get = function(this1,key) {
	return Reflect.getProperty(this1,key);
};
tannus_ds__$Object_Object_$Impl_$.rawget = function(this1,key) {
	return Reflect.getProperty(this1,key);
};
tannus_ds__$Object_Object_$Impl_$.set = function(this1,key,value) {
	Reflect.setProperty(this1,key,value);
	return Reflect.getProperty(this1,key);
};
tannus_ds__$Object_Object_$Impl_$.exists = function(this1,key) {
	return Object.prototype.hasOwnProperty.call(this1,key);
};
tannus_ds__$Object_Object_$Impl_$.remove = function(this1,key) {
	Reflect.deleteField(this1,key);
};
tannus_ds__$Object_Object_$Impl_$.clone = function(this1) {
	var c = { };
	var _g = 0;
	var _g1 = Reflect.fields(this1);
	while(_g < _g1.length) {
		var k = _g1[_g];
		++_g;
		var value = Reflect.getProperty(this1,k);
		Reflect.setProperty(c,k,value);
		Reflect.getProperty(c,k);
	}
	return c;
};
tannus_ds__$Object_Object_$Impl_$.pairs = function(this1) {
	return Reflect.fields(this1).map(function(k) {
		return { 'name' : k, 'value' : Reflect.getProperty(this1,k)};
	});
};
tannus_ds__$Object_Object_$Impl_$.iterator = function(this1) {
	var _this;
	var this2 = this1;
	_this = Reflect.fields(this2).map(function(k) {
		return { 'name' : k, 'value' : Reflect.getProperty(this2,k)};
	});
	return HxOverrides.iter(_this);
};
tannus_ds__$Object_Object_$Impl_$.increment = function(this1,other) {
	var _g = 0;
	var _g1 = Reflect.fields(other);
	while(_g < _g1.length) {
		var key = _g1[_g];
		++_g;
		if(!Object.prototype.hasOwnProperty.call(this1,key)) {
			var value = Reflect.getProperty(other,key);
			Reflect.setProperty(this1,key,value);
			Reflect.getProperty(this1,key);
		}
	}
	return this1;
};
tannus_ds__$Object_Object_$Impl_$.plus = function(this1,other) {
	var res = tannus_ds__$Object_Object_$Impl_$.clone(this1);
	var _g = 0;
	var _g1 = Reflect.fields(other);
	while(_g < _g1.length) {
		var k = _g1[_g];
		++_g;
		if(!Object.prototype.hasOwnProperty.call(res,k)) {
			var value = Reflect.getProperty(other,k);
			Reflect.setProperty(res,k,value);
			Reflect.getProperty(res,k);
		}
	}
	return res;
};
tannus_ds__$Object_Object_$Impl_$.write = function(this1,o) {
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var k = _g1[_g];
		++_g;
		var value = Reflect.getProperty(o,k);
		Reflect.setProperty(this1,k,value);
		Reflect.getProperty(this1,k);
	}
};
tannus_ds__$Object_Object_$Impl_$.method = function(this1,mname) {
	var func;
	{
		var this3 = Reflect.getProperty(this1,mname);
		if(this3 != null) func = this3; else func = this3;
	}
	var this2;
	this2 = (function(f,o,a1) {
		return function(a2) {
			return f(o,a1,a2);
		};
	})(Reflect.callMethod,this1,func);
	return this2;
};
tannus_ds__$Object_Object_$Impl_$.plucka = function(this1,keys) {
	return tannus_ds__$Object_Object_$Impl_$._plk(this1,keys);
};
tannus_ds__$Object_Object_$Impl_$._plk = function(this1,keys,mtarget) {
	var target;
	target = mtarget != null?mtarget:{ };
	var _g = 0;
	while(_g < keys.length) {
		var k = keys[_g];
		++_g;
		var value = Reflect.getProperty(this1,k);
		Reflect.setProperty(target,k,value);
		Reflect.getProperty(target,k);
	}
	return target;
};
tannus_ds__$Object_Object_$Impl_$["is"] = function(this1,oreg) {
	var sel = new tannus_nore_CSelector(oreg);
	return sel.test(this1);
};
tannus_ds__$Object_Object_$Impl_$.toMap = function(this1) {
	var m = new haxe_ds_StringMap();
	var $it0 = (function($this) {
		var $r;
		var _this;
		{
			var this2 = this1;
			_this = Reflect.fields(this2).map(function(k) {
				return { 'name' : k, 'value' : Reflect.getProperty(this2,k)};
			});
		}
		$r = HxOverrides.iter(_this);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var p = $it0.next();
		var value = p.value;
		m.set(p.name,value);
	}
	return m;
};
tannus_ds__$Object_Object_$Impl_$.fromMap = function(map) {
	var o = { };
	var $it0 = map.keys();
	while( $it0.hasNext() ) {
		var key = $it0.next();
		var value;
		value = __map_reserved[key] != null?map.getReserved(key):map.h[key];
		Reflect.setProperty(o,key,value);
		Reflect.getProperty(o,key);
	}
	return o;
};
var tannus_ds__$Pair_Pair_$Impl_$ = {};
$hxClasses["tannus.ds._Pair.Pair_Impl_"] = tannus_ds__$Pair_Pair_$Impl_$;
tannus_ds__$Pair_Pair_$Impl_$.__name__ = ["tannus","ds","_Pair","Pair_Impl_"];
tannus_ds__$Pair_Pair_$Impl_$._new = function(l,r) {
	return new tannus_ds_CPair(l,r);
};
tannus_ds__$Pair_Pair_$Impl_$.toString = function(this1) {
	return this1.toString();
};
tannus_ds__$Pair_Pair_$Impl_$.swap = function(this1) {
	return new tannus_ds_CPair(this1.right,this1.left);
};
tannus_ds__$Pair_Pair_$Impl_$.eq = function(this1,other) {
	return this1.left == other.left && this1.right == other.right;
};
var tannus_ds_CPair = function(l,r) {
	this.left = l;
	this.right = r;
};
$hxClasses["tannus.ds.CPair"] = tannus_ds_CPair;
tannus_ds_CPair.__name__ = ["tannus","ds","CPair"];
tannus_ds_CPair.prototype = {
	equals: function(other) {
		return this.left == other.left && this.right == other.right;
	}
	,toString: function() {
		return "Pair(" + Std.string(this.left) + ", " + Std.string(this.right) + ")";
	}
	,swap: function() {
		return new tannus_ds_CPair(this.right,this.left);
	}
	,__class__: tannus_ds_CPair
};
var tannus_ds_Promise = function(exec,nocall) {
	if(nocall == null) nocall = false;
	this.back = null;
	this.in_progress = false;
	this.executor = exec;
	this.fulfillment = new tannus_io_Signal();
	this.rejection = new tannus_io_Signal();
	this.derived = [];
	if(!nocall) this.make();
};
$hxClasses["tannus.ds.Promise"] = tannus_ds_Promise;
tannus_ds_Promise.__name__ = ["tannus","ds","Promise"];
tannus_ds_Promise.prototype = {
	fulfill: function(v) {
		this.in_progress = false;
		this.fulfillment.broadcast(v);
	}
	,reject: function(err) {
		this.in_progress = false;
		this.rejection.call(err);
	}
	,derive: function(der) {
		this.derived.push(der);
	}
	,then: function(callback) {
		this.fulfillment.listen(callback,false);
		return this;
	}
	,unless: function(callback) {
		this.rejection.listen(callback,false);
		return this;
	}
	,always: function(cb) {
		var called = false;
		this.then(function(x) {
			if(!called) {
				cb();
				called = true;
			}
		});
		this.unless(function(e) {
			if(!called) {
				cb();
				called = true;
			}
		});
	}
	,transform: function(change) {
		var _g = this;
		var res1 = new tannus_ds_Promise(function(res,err) {
			_g.then(function(val) {
				res(change(val));
			});
			_g.unless(function(error) {
				err(error);
			});
		});
		this.attach(res1);
		return res1;
	}
	,parent: function() {
		if(this.back != null) return this.back; else throw new js__$Boot_HaxeError("PromiseError: Cannot read field 'back' from the given Promise, as it has not yet been assigned");
	}
	,attach: function(child) {
		this.derive(child);
		child.back = this;
		return this;
	}
	,make: function(cb) {
		var _g = this;
		if(cb == null) cb = function() {
			null;
		};
		if(!this.in_progress) {
			this.in_progress = true;
			var stack = new tannus_ds_AsyncStack();
			var _g1 = 0;
			var _g11 = this.derived;
			while(_g1 < _g11.length) {
				var child = [_g11[_g1]];
				++_g1;
				stack.under((function(child) {
					return function(nxt) {
						child[0].make(nxt);
					};
				})(child));
			}
			stack.run(function() {
				var ff = function(x) {
					_g.fulfill(x);
					cb();
				};
				var rj = function(e) {
					_g.reject(e);
					cb();
				};
				_g.executor(ff,rj);
			});
		} else {
			var remake = (function(max_calls) {
				var run = 0;
				var rm = function() {
					if(run < max_calls) {
						_g.make();
						run++;
					}
				};
				return rm;
			})(1);
			this.fulfillment.listen(function(x1) {
				remake();
			},true);
			this.rejection.listen(function(x2) {
				remake();
			},true);
		}
	}
	,print: function() {
		this.then(function(x) {
			console.log(x);
		});
		return this;
	}
	,typeError: function(msg) {
		return "TypeError: " + msg;
	}
	,bool: function() {
		var _g = this;
		var res = new tannus_ds_promises_BoolPromise(function(yep,nope) {
			_g.then(function(data) {
				if(typeof(data) == "boolean") yep(data); else nope("TypeError: " + ("Cannot cast " + Std.string(data) + " to Boolean!"));
			});
			_g.unless(nope);
		});
		this.attach(res);
		return res;
	}
	,string: function() {
		var _g = this;
		var res = new tannus_ds_promises_StringPromise(function(accept,reject) {
			_g.then(function(data) {
				if(typeof(data) == "string") accept(Std.string(data) + ""); else reject("TypeError: " + ("Cannot cast " + Std.string(data) + " to String"));
			});
		});
		this.attach(res);
		return res;
	}
	,array: function() {
		var _g = this;
		var res = new tannus_ds_promises_ArrayPromise(function(yep,nope) {
			_g.then(function(data) {
				try {
					data = Array.prototype.slice.call(data,0);
					yep(data);
				} catch( error ) {
					if (error instanceof js__$Boot_HaxeError) error = error.val;
					nope(error);
				}
			});
			_g.unless(nope);
		});
		this.attach(res);
		return res;
	}
	,object: function() {
		var _g = this;
		var res = new tannus_ds_promises_ObjectPromise(function(reply,reject) {
			_g.then(function(data) {
				var stype = tannus_internal_TypeTools.typename(data);
				if(!(typeof(data) == "boolean") && !(typeof(data) == "number") && !((data instanceof Array) && data.__enum__ == null) && !(typeof(data) == "string")) {
					var _g1 = Type["typeof"](data);
					switch(_g1[1]) {
					case 4:case 6:
						reply(data);
						break;
					default:
						reject("TypeError: " + ("Cannot cast " + stype + " to Object"));
					}
				} else reject("TypeError: " + ("Cannot cast " + stype + " to Object"));
			});
		});
		this.attach(res);
		return res;
	}
	,eq: function(other) {
		var _g = this;
		return new tannus_ds_promises_BoolPromise(function(done,fail) {
			_g.then(function(data) {
				{
					var _g1 = other;
					switch(_g1[1]) {
					case 0:
						var val = _g1[2];
						done(val == data);
						break;
					case 1:
						var prom = _g1[2];
						prom.then(function(val1) {
							done(val1 == data);
						});
						prom.unless(fail);
						break;
					}
				}
			});
			_g.unless(fail);
		});
	}
	,__class__: tannus_ds_Promise
};
var tannus_ds_QueryString = function() { };
$hxClasses["tannus.ds.QueryString"] = tannus_ds_QueryString;
tannus_ds_QueryString.__name__ = ["tannus","ds","QueryString"];
tannus_ds_QueryString.stringify = function(data) {
	var pairs = [];
	var _g = 0;
	var _g1 = Reflect.fields(data);
	while(_g < _g1.length) {
		var key = _g1[_g];
		++_g;
		var val;
		var this1 = Reflect.getProperty(data,key);
		val = this1 != null?this1:this1;
		var t = tannus_internal_TypeTools.typename(val);
		switch(t) {
		case "Number":case "String":case "Boolean":
			pairs.push(key + "=" + tannus_ds_QueryString.enc(val));
			break;
		case "Array":
			var arr = val;
			var _g2 = 0;
			while(_g2 < arr.length) {
				var item = arr[_g2];
				++_g2;
				if(Lambda.has(["Number","String","Boolean"],tannus_internal_TypeTools.typename(item))) null; else throw new js__$Boot_HaxeError("TypeError: Cannot urlify non-primitive values!");
			}
			var _g21 = 0;
			while(_g21 < arr.length) {
				var x = arr[_g21];
				++_g21;
				pairs.push("" + key + "[]=" + tannus_ds_QueryString.enc(x));
			}
			break;
		default:
			var o = val;
			var _g22 = 0;
			var _g3 = Reflect.fields(o);
			while(_g22 < _g3.length) {
				var ok = _g3[_g22];
				++_g22;
				pairs.push("" + key + "[" + ok + "]=" + tannus_ds_QueryString.enc(Reflect.getProperty(o,ok)));
			}
		}
	}
	var qs = pairs.join("&");
	return qs;
};
tannus_ds_QueryString.enc = function(value) {
	var s = encodeURIComponent(Std.string(value));
	s = StringTools.replace(s,"%2B","+");
	s = StringTools.replace(s,"%0D","");
	return s;
};
tannus_ds_QueryString.parse = function(qs) {
	var ekey = new EReg("([A-Z]+[A-Z0-9_\\-]*)\\[([A-Z]+[A-Z0-9]*)\\]","i");
	var earr = new EReg("([A-Z]+[A-Z0-9_\\-]*)\\[([0-9]*)\\]","i");
	var res = { };
	var pairs = qs.split("&").map(function(s) {
		return s.split("=");
	});
	var _g = 0;
	while(_g < pairs.length) {
		var p = pairs[_g];
		++_g;
		switch(p.length) {
		case 2:
			var __ex1 = p[1];
			var __ex0 = p[0];
			{
				var _g1 = decodeURIComponent(__ex1.split("+").join(" "));
				var _g2 = decodeURIComponent(__ex0.split("+").join(" "));
				var key = _g2;
				var val = _g1;
				if(ekey.match(key)) {
					var md = tannus_io__$RegEx_RegEx_$Impl_$.matches(ekey,key)[0].slice(1);
					key = md[0];
					var okey = md[1];
					if(!Object.prototype.hasOwnProperty.call(res,key)) {
						Reflect.setProperty(res,key,{ });
						Reflect.getProperty(res,key);
					}
					var this1;
					var o = Reflect.getProperty(res,key);
					this1 = o;
					Reflect.setProperty(this1,okey,val);
					Reflect.getProperty(this1,okey);
				} else switch(p.length) {
				case 2:
					var __ex11 = p[1];
					var __ex01 = p[0];
					{
						var _g3 = decodeURIComponent(__ex11.split("+").join(" "));
						var _g4 = decodeURIComponent(__ex01.split("+").join(" "));
						var key1 = _g4;
						var val1 = _g3;
						if(earr.match(key1)) {
							var md1 = tannus_io__$RegEx_RegEx_$Impl_$.matches(earr,key1)[0].slice(1);
							key1 = md1[0];
							var index = Std.parseInt(md1[1]);
							if(!Object.prototype.hasOwnProperty.call(res,key1)) {
								var value = [];
								Reflect.setProperty(res,key1,value);
								Reflect.getProperty(res,key1);
							}
							var list;
							list = js_Boot.__cast((function($this) {
								var $r;
								var this2 = Reflect.getProperty(res,key1);
								$r = this2 != null?this2:this2;
								return $r;
							}(this)) , Array);
							if(index != null) list[index] = val1; else list.push(val1);
						} else switch(p.length) {
						case 2:
							var __ex12 = p[1];
							var __ex02 = p[0];
							{
								var _g5 = decodeURIComponent(__ex12.split("+").join(" "));
								var _g6 = decodeURIComponent(__ex02.split("+").join(" "));
								var key2 = _g6;
								var val2 = _g5;
								{
									Reflect.setProperty(res,key2,val2);
									Reflect.getProperty(res,key2);
								}
							}
							break;
						}
					}
					break;
				}
			}
			break;
		}
	}
	return res;
};
var tannus_ds__$Ref_Ref_$Impl_$ = {};
$hxClasses["tannus.ds._Ref.Ref_Impl_"] = tannus_ds__$Ref_Ref_$Impl_$;
tannus_ds__$Ref_Ref_$Impl_$.__name__ = ["tannus","ds","_Ref","Ref_Impl_"];
tannus_ds__$Ref_Ref_$Impl_$._new = function(r) {
	return new tannus_ds_CRef(r);
};
tannus_ds__$Ref_Ref_$Impl_$.get = function(this1) {
	return this1.get();
};
tannus_ds__$Ref_Ref_$Impl_$.toString = function(this1) {
	return Std.string(this1.get());
};
var tannus_ds_CRef = function(g) {
	this.getter = g;
	this._value = null;
};
$hxClasses["tannus.ds.CRef"] = tannus_ds_CRef;
tannus_ds_CRef.__name__ = ["tannus","ds","CRef"];
tannus_ds_CRef.prototype = {
	get: function() {
		if(this._value == null) return this._value = this.getter(); else return this._value;
	}
	,reset: function() {
		this._value = null;
	}
	,__class__: tannus_ds_CRef
};
var tannus_ds_Selection = function(list) {
	if(list != null) this.data = list; else this.data = [];
};
$hxClasses["tannus.ds.Selection"] = tannus_ds_Selection;
tannus_ds_Selection.__name__ = ["tannus","ds","Selection"];
tannus_ds_Selection.prototype = {
	addItem: function(i) {
		if(!Lambda.has(this.data,i)) this.data.push(i);
	}
	,removeItem: function(i) {
		return HxOverrides.remove(this.data,i);
	}
	,selected: function() {
		return this.data.filter(function(item) {
			return item.getSelected();
		});
	}
	,select: function(item) {
		item.setSelected(true);
	}
	,deselect: function(item) {
		item.setSelected(false);
	}
	,toggle: function(item) {
		item.setSelected(!item.getSelected());
	}
	,iterator: function() {
		var _this = this.selected();
		return HxOverrides.iter(_this);
	}
	,__class__: tannus_ds_Selection
};
var tannus_ds__$Stack_StackIterator = function(s) {
	this.stack = s;
};
$hxClasses["tannus.ds._Stack.StackIterator"] = tannus_ds__$Stack_StackIterator;
tannus_ds__$Stack_StackIterator.__name__ = ["tannus","ds","_Stack","StackIterator"];
tannus_ds__$Stack_StackIterator.prototype = {
	hasNext: function() {
		return !this.stack.get_empty();
	}
	,next: function() {
		return this.stack.pop();
	}
	,__class__: tannus_ds__$Stack_StackIterator
};
var tannus_ds_StringUtils = $hx_exports.StringTools = function() { };
$hxClasses["tannus.ds.StringUtils"] = tannus_ds_StringUtils;
tannus_ds_StringUtils.__name__ = ["tannus","ds","StringUtils"];
tannus_ds_StringUtils.byteAt = function(s,i) {
	if(i <= s.length - 1) {
		var n = HxOverrides.cca(s,i);
		var this1;
		if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
		this1 = n;
		return this1;
	} else throw new js__$Boot_HaxeError("IndexOutOfBoundError: " + i + " is not within range(0, " + (s.length - 1) + ")");
};
tannus_ds_StringUtils.byteMap = function(s,f) {
	var res = "";
	var _g1 = 0;
	var _g = s.length;
	while(_g1 < _g) {
		var i = _g1++;
		var this1 = f(tannus_ds_StringUtils.byteAt(s,i));
		res += String.fromCharCode(this1);
	}
	return res;
};
tannus_ds_StringUtils.count = function(str,pattern) {
	{
		var _g = pattern;
		switch(_g[1]) {
		case 0:
			var sub = _g[2];
			var pos = 0;
			var n = 0;
			var step = sub.length;
			while(true) {
				pos = str.indexOf(sub,pos);
				if(pos >= 0) {
					++n;
					pos += step;
				} else break;
			}
			return n;
		case 1:
			var pat = _g[2];
			var e = pat;
			return tannus_io__$RegEx_RegEx_$Impl_$.matches(e,str).length;
		}
	}
};
tannus_ds_StringUtils.strip = function(str,pat) {
	{
		var _g = pat;
		switch(_g[1]) {
		case 0:
			var repl = _g[2];
			return StringTools.replace(str,repl,"");
		case 1:
			var patt = _g[2];
			var res = str;
			var reg = patt;
			var bits = tannus_io__$RegEx_RegEx_$Impl_$.matches(reg,res);
			var _g1 = 0;
			while(_g1 < bits.length) {
				var bit = bits[_g1];
				++_g1;
				res = StringTools.replace(res,bit[0],"");
			}
			return res;
		}
	}
};
tannus_ds_StringUtils.remove = function(str,sub) {
	var i = str.indexOf(sub);
	if(i == -1) return str; else if(i == 0) return str.substring(i + sub.length); else return str.substring(0,i) + str.substring(i + 1);
};
tannus_ds_StringUtils.wrap = function(str,wrapper,end) {
	if(end == null) end = wrapper;
	return wrapper + str + end;
};
tannus_ds_StringUtils.capitalize = function(s,fancy) {
	if(fancy == null) fancy = false;
	if(!fancy) return s.substring(0,1).toUpperCase() + s.substring(1).toLowerCase(); else {
		var res = "";
		var lwan = false;
		var _g1 = 0;
		var _g = s.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = tannus_ds_StringUtils.byteAt(s,i);
			if(c >= 48 && c <= 57 || (c >= 65 && c <= 90 || c >= 97 && c <= 122)) {
				if(c >= 65 && c <= 90 || c >= 97 && c <= 122) {
					var l = String.fromCharCode(c);
					if(lwan) res += l.toLowerCase(); else res += l.toUpperCase();
				} else res += String.fromCharCode(c);
				lwan = true;
			} else {
				res += String.fromCharCode(c);
				lwan = false;
			}
		}
		return res;
	}
};
tannus_ds_StringUtils.has = function(str,sub) {
	var i;
	try {
		i = str.indexOf(sub);
	} catch( err ) {
		if (err instanceof js__$Boot_HaxeError) err = err.val;
		i = -1;
	}
	return i != -1;
};
tannus_ds_StringUtils.slice = function(str,pos,len) {
	if(len != null) return HxOverrides.substr(str,pos,len); else return str.substring(pos);
};
tannus_ds_StringUtils.before = function(s,del) {
	if(del != "" && tannus_ds_StringUtils.has(s,del)) return s.substring(0,s.indexOf(del)); else return s;
};
tannus_ds_StringUtils.beforeLast = function(s,del) {
	if(del != "" && tannus_ds_StringUtils.has(s,del)) return s.substring(0,s.lastIndexOf(del)); else return s;
};
tannus_ds_StringUtils.after = function(s,del) {
	if(del != "" && tannus_ds_StringUtils.has(s,del)) return s.substring(s.indexOf(del) + del.length); else return s;
};
tannus_ds_StringUtils.afterLast = function(s,del) {
	if(del != "" && tannus_ds_StringUtils.has(s,del)) return s.substring(s.lastIndexOf(del) + del.length); else return "";
};
tannus_ds_StringUtils.separate = function(s,sep,last) {
	if(last == null) last = false;
	var a = (last?tannus_ds_StringUtils.beforeLast:tannus_ds_StringUtils.before)(s,sep);
	var b = (last?tannus_ds_StringUtils.afterLast:tannus_ds_StringUtils.after)(s,sep);
	return [a,b];
};
tannus_ds_StringUtils.lastByte = function(s) {
	var n = HxOverrides.cca(s,s.length - 1);
	var this1;
	if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
	this1 = n;
	return this1;
};
tannus_ds_StringUtils.empty = function(s) {
	return s.length == 0;
};
tannus_ds_StringUtils.times = function(s,count) {
	if(count == 0) return ""; else {
		var res = s;
		var _g1 = 0;
		var _g = --count;
		while(_g1 < _g) {
			var i = _g1++;
			res += s;
		}
		return res;
	}
};
tannus_ds_StringUtils.isNumeric = function(s) {
	var _g1 = 0;
	var _g = s.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(!(function($this) {
			var $r;
			var this1 = tannus_ds_StringUtils.byteAt(s,i);
			$r = this1 >= 48 && this1 <= 57;
			return $r;
		}(this))) return false;
	}
	return true;
};
var tannus_ds__$StringUtils_Sep_$Impl_$ = {};
$hxClasses["tannus.ds._StringUtils.Sep_Impl_"] = tannus_ds__$StringUtils_Sep_$Impl_$;
tannus_ds__$StringUtils_Sep_$Impl_$.__name__ = ["tannus","ds","_StringUtils","Sep_Impl_"];
tannus_ds__$StringUtils_Sep_$Impl_$.__properties__ = {get_after:"get_after",get_before:"get_before"}
tannus_ds__$StringUtils_Sep_$Impl_$._new = function(a,b) {
	return [a,b];
};
tannus_ds__$StringUtils_Sep_$Impl_$.get_before = function(this1) {
	return this1[0];
};
tannus_ds__$StringUtils_Sep_$Impl_$.get_after = function(this1) {
	return this1[1];
};
var tannus_ds__$ThreeTuple_ThreeTuple_$Impl_$ = {};
$hxClasses["tannus.ds._ThreeTuple.ThreeTuple_Impl_"] = tannus_ds__$ThreeTuple_ThreeTuple_$Impl_$;
tannus_ds__$ThreeTuple_ThreeTuple_$Impl_$.__name__ = ["tannus","ds","_ThreeTuple","ThreeTuple_Impl_"];
tannus_ds__$ThreeTuple_ThreeTuple_$Impl_$.__properties__ = {set_three:"set_three",get_three:"get_three",set_two:"set_two",get_two:"get_two",set_one:"set_one",get_one:"get_one"}
tannus_ds__$ThreeTuple_ThreeTuple_$Impl_$._new = function(a,b,c) {
	return [a,b,c];
};
tannus_ds__$ThreeTuple_ThreeTuple_$Impl_$.get_one = function(this1) {
	return this1[0];
};
tannus_ds__$ThreeTuple_ThreeTuple_$Impl_$.set_one = function(this1,v) {
	return this1[0] = v;
};
tannus_ds__$ThreeTuple_ThreeTuple_$Impl_$.get_two = function(this1) {
	return this1[1];
};
tannus_ds__$ThreeTuple_ThreeTuple_$Impl_$.set_two = function(this1,v) {
	return this1[1] = v;
};
tannus_ds__$ThreeTuple_ThreeTuple_$Impl_$.get_three = function(this1) {
	return this1[2];
};
tannus_ds__$ThreeTuple_ThreeTuple_$Impl_$.set_three = function(this1,v) {
	return this1[2] = v;
};
tannus_ds__$ThreeTuple_ThreeTuple_$Impl_$.toString = function(this1) {
	return "(" + Std.string(this1[0]) + ", " + Std.string(this1[1]) + ", " + Std.string(this1[2]) + ")";
};
tannus_ds__$ThreeTuple_ThreeTuple_$Impl_$.toArray = function(this1) {
	return this1;
};
var tannus_ds__$TwoTuple_TwoTuple_$Impl_$ = {};
$hxClasses["tannus.ds._TwoTuple.TwoTuple_Impl_"] = tannus_ds__$TwoTuple_TwoTuple_$Impl_$;
tannus_ds__$TwoTuple_TwoTuple_$Impl_$.__name__ = ["tannus","ds","_TwoTuple","TwoTuple_Impl_"];
tannus_ds__$TwoTuple_TwoTuple_$Impl_$.__properties__ = {set_two:"set_two",get_two:"get_two",set_one:"set_one",get_one:"get_one"}
tannus_ds__$TwoTuple_TwoTuple_$Impl_$._new = function(a,b) {
	return [a,b];
};
tannus_ds__$TwoTuple_TwoTuple_$Impl_$.get_one = function(this1) {
	return this1[0];
};
tannus_ds__$TwoTuple_TwoTuple_$Impl_$.set_one = function(this1,v) {
	return this1[0] = v;
};
tannus_ds__$TwoTuple_TwoTuple_$Impl_$.get_two = function(this1) {
	return this1[1];
};
tannus_ds__$TwoTuple_TwoTuple_$Impl_$.set_two = function(this1,v) {
	return this1[1] = v;
};
tannus_ds__$TwoTuple_TwoTuple_$Impl_$.toString = function(this1) {
	return "(" + Std.string(this1[0]) + ", " + Std.string(this1[1]) + ")";
};
tannus_ds__$TwoTuple_TwoTuple_$Impl_$.toArray = function(this1) {
	return this1;
};
var tannus_ds_dict_IDict = function() { };
$hxClasses["tannus.ds.dict.IDict"] = tannus_ds_dict_IDict;
tannus_ds_dict_IDict.__name__ = ["tannus","ds","dict","IDict"];
tannus_ds_dict_IDict.prototype = {
	__class__: tannus_ds_dict_IDict
};
var tannus_ds_dict_ComparableDict = function() {
	this._pairs = new List();
};
$hxClasses["tannus.ds.dict.ComparableDict"] = tannus_ds_dict_ComparableDict;
tannus_ds_dict_ComparableDict.__name__ = ["tannus","ds","dict","ComparableDict"];
tannus_ds_dict_ComparableDict.__interfaces__ = [tannus_ds_dict_IDict];
tannus_ds_dict_ComparableDict.prototype = {
	pair: function(key,value) {
		var _g_head = this._pairs.h;
		var _g_val = null;
		while(_g_head != null) {
			var p;
			p = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(p[0].equals(key)) return p;
		}
		if(value != null) {
			var pair = [key,value];
			this._pairs.add(pair);
			return pair;
		} else return null;
	}
	,get: function(key) {
		var p = this.pair(key);
		if(p != null) return p[1]; else return null;
	}
	,set: function(key,value) {
		var p = this.pair(key,value);
		return p[1] = value;
	}
	,reference: function(key) {
		var g = (function(f,a1) {
			return function() {
				return f(a1);
			};
		})($bind(this,this.get),key);
		var s = (function(f1,a11) {
			return function(a2) {
				return f1(a11,a2);
			};
		})($bind(this,this.set),key);
		return new tannus_io__$Pointer_Ref(g,s);
	}
	,exists: function(key) {
		return this.pair(key) != null;
	}
	,remove: function(key) {
		var p = this.pair(key);
		if(p != null) return this._pairs.remove(p); else return false;
	}
	,iterator: function() {
		return new tannus_ds_dict_ComparableDictIterator(this);
	}
	,keys: function() {
		return new tannus_ds_dict_ComparableDictKeyIterator(this);
	}
	,pairs: function() {
		return new _$List_ListIterator(this._pairs.h);
	}
	,hxSerialize: function(s) {
		var w = (function(f) {
			return function(v) {
				f(v);
			};
		})($bind(s,s.serialize));
		var pl;
		var _g = [];
		var $it0 = this.pairs();
		while( $it0.hasNext() ) {
			var pair = $it0.next();
			_g.push(pair);
		}
		pl = _g;
		w(pl.length);
		var _g1 = 0;
		while(_g1 < pl.length) {
			var p = pl[_g1];
			++_g1;
			w(p[0]);
			w(p[1]);
		}
	}
	,hxUnserialize: function(u) {
		this._pairs = new List();
		var count = u.unserialize();
		var _g = 0;
		while(_g < count) {
			var i = _g++;
			this.set(u.unserialize(),u.unserialize());
		}
	}
	,__class__: tannus_ds_dict_ComparableDict
};
var tannus_ds_dict_ComparableDictIterator = function(cd) {
	this.it = new _$List_ListIterator(cd._pairs.h);
};
$hxClasses["tannus.ds.dict.ComparableDictIterator"] = tannus_ds_dict_ComparableDictIterator;
tannus_ds_dict_ComparableDictIterator.__name__ = ["tannus","ds","dict","ComparableDictIterator"];
tannus_ds_dict_ComparableDictIterator.prototype = {
	hasNext: function() {
		return this.it.hasNext();
	}
	,next: function() {
		var this1 = this.it.next();
		return this1[1];
	}
	,__class__: tannus_ds_dict_ComparableDictIterator
};
var tannus_ds_dict_ComparableDictKeyIterator = function(cd) {
	this.it = new _$List_ListIterator(cd._pairs.h);
};
$hxClasses["tannus.ds.dict.ComparableDictKeyIterator"] = tannus_ds_dict_ComparableDictKeyIterator;
tannus_ds_dict_ComparableDictKeyIterator.__name__ = ["tannus","ds","dict","ComparableDictKeyIterator"];
tannus_ds_dict_ComparableDictKeyIterator.prototype = {
	hasNext: function() {
		return this.it.hasNext();
	}
	,next: function() {
		var this1 = this.it.next();
		return this1[0];
	}
	,__class__: tannus_ds_dict_ComparableDictKeyIterator
};
var tannus_ds_dict_EnumValueDict = function() {
	this.m = new haxe_ds_EnumValueMap();
};
$hxClasses["tannus.ds.dict.EnumValueDict"] = tannus_ds_dict_EnumValueDict;
tannus_ds_dict_EnumValueDict.__name__ = ["tannus","ds","dict","EnumValueDict"];
tannus_ds_dict_EnumValueDict.__interfaces__ = [tannus_ds_dict_IDict];
tannus_ds_dict_EnumValueDict.prototype = {
	get: function(key) {
		return this.m.get(key);
	}
	,set: function(k,v) {
		this.m.set(k,v);
		return this.m.get(k);
	}
	,reference: function(key) {
		var g = (function(f,a1) {
			return function() {
				return f(a1);
			};
		})(($_=this.m,$bind($_,$_.get)),key);
		var s = (function(f1,k) {
			return function(v) {
				return f1(k,v);
			};
		})($bind(this,this.set),key);
		return new tannus_io__$Pointer_Ref(g,s);
	}
	,exists: function(k) {
		return this.m.exists(k);
	}
	,remove: function(k) {
		return this.m.remove(k);
	}
	,iterator: function() {
		return this.m.iterator();
	}
	,keys: function() {
		return this.m.keys();
	}
	,pairs: function() {
		return new tannus_ds_dict_EVDPairIterator(this);
	}
	,hxSerialize: function(s) {
		var w = (function(f) {
			return function(v) {
				f(v);
			};
		})($bind(s,s.serialize));
		var pl;
		var _g = [];
		var $it0 = new tannus_ds_dict_EVDPairIterator(this);
		while( $it0.hasNext() ) {
			var pair = $it0.next();
			_g.push(pair);
		}
		pl = _g;
		w(pl.length);
		var _g1 = 0;
		while(_g1 < pl.length) {
			var p = pl[_g1];
			++_g1;
			w(p[0]);
			w(p[1]);
		}
	}
	,hxUnserialize: function(u) {
		var count = u.unserialize();
		this.m = new haxe_ds_EnumValueMap();
		var _g = 0;
		while(_g < count) {
			var i = _g++;
			this.set(u.unserialize(),u.unserialize());
		}
	}
	,__class__: tannus_ds_dict_EnumValueDict
};
var tannus_ds_dict_EVDPairIterator = function(d) {
	this.dict = d;
	this.it = this.dict.m.keys();
};
$hxClasses["tannus.ds.dict.EVDPairIterator"] = tannus_ds_dict_EVDPairIterator;
tannus_ds_dict_EVDPairIterator.__name__ = ["tannus","ds","dict","EVDPairIterator"];
tannus_ds_dict_EVDPairIterator.prototype = {
	hasNext: function() {
		return this.it.hasNext();
	}
	,next: function() {
		var k = this.it.next();
		var value = this.dict.m.get(k);
		return [k,value];
	}
	,__class__: tannus_ds_dict_EVDPairIterator
};
var tannus_ds_dict_IntDict = function() {
	this.m = new haxe_ds_IntMap();
};
$hxClasses["tannus.ds.dict.IntDict"] = tannus_ds_dict_IntDict;
tannus_ds_dict_IntDict.__name__ = ["tannus","ds","dict","IntDict"];
tannus_ds_dict_IntDict.__interfaces__ = [tannus_ds_dict_IDict];
tannus_ds_dict_IntDict.prototype = {
	get: function(key) {
		return this.m.h[key];
	}
	,set: function(k,v) {
		this.m.h[k] = v;
		return this.m.h[k];
	}
	,reference: function(key) {
		var g = (function(f,a1) {
			return function() {
				return f(a1);
			};
		})(($_=this.m,$bind($_,$_.get)),key);
		var s = (function(f1,k) {
			return function(v) {
				return f1(k,v);
			};
		})($bind(this,this.set),key);
		return new tannus_io__$Pointer_Ref(g,s);
	}
	,exists: function(k) {
		return this.m.h.hasOwnProperty(k);
	}
	,remove: function(k) {
		return this.m.remove(k);
	}
	,iterator: function() {
		return this.m.iterator();
	}
	,keys: function() {
		return this.m.keys();
	}
	,pairs: function() {
		return new tannus_ds_dict_IntDictPairIterator(this);
	}
	,hxSerialize: function(s) {
		var w = (function(f) {
			return function(v) {
				f(v);
			};
		})($bind(s,s.serialize));
		var pl;
		var _g = [];
		var $it0 = new tannus_ds_dict_IntDictPairIterator(this);
		while( $it0.hasNext() ) {
			var pair = $it0.next();
			_g.push(pair);
		}
		pl = _g;
		w(pl.length);
		var _g1 = 0;
		while(_g1 < pl.length) {
			var p = pl[_g1];
			++_g1;
			w(p[0]);
			w(p[1]);
		}
	}
	,hxUnserialize: function(u) {
		var count = u.unserialize();
		this.m = new haxe_ds_IntMap();
		var _g = 0;
		while(_g < count) {
			var i = _g++;
			this.set(u.unserialize(),u.unserialize());
		}
	}
	,__class__: tannus_ds_dict_IntDict
};
var tannus_ds_dict_IntDictPairIterator = function(d) {
	this.dict = d;
	this.it = this.dict.m.keys();
};
$hxClasses["tannus.ds.dict.IntDictPairIterator"] = tannus_ds_dict_IntDictPairIterator;
tannus_ds_dict_IntDictPairIterator.__name__ = ["tannus","ds","dict","IntDictPairIterator"];
tannus_ds_dict_IntDictPairIterator.prototype = {
	hasNext: function() {
		return this.it.hasNext();
	}
	,next: function() {
		var k = this.it.next();
		return [k,this.dict.m.h[k]];
	}
	,__class__: tannus_ds_dict_IntDictPairIterator
};
var tannus_ds_dict__$Pair_Pair_$Impl_$ = {};
$hxClasses["tannus.ds.dict._Pair.Pair_Impl_"] = tannus_ds_dict__$Pair_Pair_$Impl_$;
tannus_ds_dict__$Pair_Pair_$Impl_$.__name__ = ["tannus","ds","dict","_Pair","Pair_Impl_"];
tannus_ds_dict__$Pair_Pair_$Impl_$.__properties__ = {set_value:"set_value",get_value:"get_value",get_key:"get_key"}
tannus_ds_dict__$Pair_Pair_$Impl_$._new = function(key,value) {
	return [key,value];
};
tannus_ds_dict__$Pair_Pair_$Impl_$.get_key = function(this1) {
	return this1[0];
};
tannus_ds_dict__$Pair_Pair_$Impl_$.get_value = function(this1) {
	return this1[1];
};
tannus_ds_dict__$Pair_Pair_$Impl_$.set_value = function(this1,v) {
	return this1[1] = v;
};
var tannus_ds_dict_StringDict = function() {
	this.m = new haxe_ds_StringMap();
};
$hxClasses["tannus.ds.dict.StringDict"] = tannus_ds_dict_StringDict;
tannus_ds_dict_StringDict.__name__ = ["tannus","ds","dict","StringDict"];
tannus_ds_dict_StringDict.__interfaces__ = [tannus_ds_dict_IDict];
tannus_ds_dict_StringDict.prototype = {
	get: function(key) {
		return this.m.get(key);
	}
	,set: function(k,v) {
		this.m.set(k,v);
		return this.m.get(k);
	}
	,reference: function(key) {
		var g = (function(f,a1) {
			return function() {
				return f(a1);
			};
		})(($_=this.m,$bind($_,$_.get)),key);
		var s = (function(f1,k) {
			return function(v) {
				return f1(k,v);
			};
		})($bind(this,this.set),key);
		return new tannus_io__$Pointer_Ref(g,s);
	}
	,exists: function(k) {
		return this.m.exists(k);
	}
	,remove: function(k) {
		return this.m.remove(k);
	}
	,iterator: function() {
		return this.m.iterator();
	}
	,keys: function() {
		return this.m.keys();
	}
	,pairs: function() {
		return new tannus_ds_dict_StringDictPairIterator(this);
	}
	,hxSerialize: function(s) {
		var w = (function(f) {
			return function(v) {
				f(v);
			};
		})($bind(s,s.serialize));
		var pl;
		var _g = [];
		var $it0 = new tannus_ds_dict_StringDictPairIterator(this);
		while( $it0.hasNext() ) {
			var pair = $it0.next();
			_g.push(pair);
		}
		pl = _g;
		w(pl.length);
		var _g1 = 0;
		while(_g1 < pl.length) {
			var p = pl[_g1];
			++_g1;
			w(p[0]);
			w(p[1]);
		}
	}
	,hxUnserialize: function(u) {
		var count = u.unserialize();
		this.m = new haxe_ds_StringMap();
		var _g = 0;
		while(_g < count) {
			var i = _g++;
			this.set(u.unserialize(),u.unserialize());
		}
	}
	,__class__: tannus_ds_dict_StringDict
};
var tannus_ds_dict_StringDictPairIterator = function(d) {
	this.dict = d;
	this.it = this.dict.m.keys();
};
$hxClasses["tannus.ds.dict.StringDictPairIterator"] = tannus_ds_dict_StringDictPairIterator;
tannus_ds_dict_StringDictPairIterator.__name__ = ["tannus","ds","dict","StringDictPairIterator"];
tannus_ds_dict_StringDictPairIterator.prototype = {
	hasNext: function() {
		return this.it.hasNext();
	}
	,next: function() {
		var k = this.it.next();
		var value = this.dict.m.get(k);
		return [k,value];
	}
	,__class__: tannus_ds_dict_StringDictPairIterator
};
var tannus_ds_promises_ArrayPromise = function(f) {
	tannus_ds_Promise.call(this,f);
};
$hxClasses["tannus.ds.promises.ArrayPromise"] = tannus_ds_promises_ArrayPromise;
tannus_ds_promises_ArrayPromise.__name__ = ["tannus","ds","promises","ArrayPromise"];
tannus_ds_promises_ArrayPromise.fromPrim = function(pa) {
	return new tannus_ds_promises_ArrayPromise(function(res,err) {
		pa.then(res);
		pa.unless(err);
	});
};
tannus_ds_promises_ArrayPromise.__super__ = tannus_ds_Promise;
tannus_ds_promises_ArrayPromise.prototype = $extend(tannus_ds_Promise.prototype,{
	get: function(index) {
		var _g = this;
		var res = new tannus_ds_Promise(function(accept,reject) {
			_g.then(function(items) {
				accept(items[index]);
			});
			_g.unless(function(error) {
				reject(error);
			});
		},null);
		this.attach(res);
		return res;
	}
	,slice: function(pos,end) {
		var _g = this;
		return new tannus_ds_promises_ArrayPromise(function(res,err) {
			_g.then(function(list) {
				res(list.slice(pos,end));
			});
			_g.unless(function(error) {
				err(error);
			});
		});
	}
	,concat: function(other) {
		var _g = this;
		var res1 = new tannus_ds_promises_ArrayPromise(function(res,err) {
			_g.then(function(list) {
				res(list.concat(other));
			});
			_g.unless(function(error) {
				err(error);
			});
		});
		this.attach(res1);
		return res1;
	}
	,map: function(f) {
		var res = tannus_ds_promises_ArrayPromise.fromPrim(this.transform(function(x) {
			return x.map(f);
		}));
		this.attach(res);
		return res;
	}
	,filter: function(test) {
		var res = tannus_ds_promises_ArrayPromise.fromPrim(this.transform(function(list) {
			return list.filter(test);
		}));
		this.attach(res);
		return res;
	}
	,has: function(item) {
		var _g = this;
		var result = new tannus_ds_promises_BoolPromise(function(res,err) {
			_g.then(function(list) {
				res(Lambda.has(list,item));
			});
			_g.unless(err);
		});
		this.attach(result);
		return result;
	}
	,join: function(sep) {
		var _g = this;
		var result = new tannus_ds_promises_StringPromise(function(accept,reject) {
			_g.then(function(list) {
				accept(list.join(sep));
			});
			_g.unless(reject);
		});
		this.attach(result);
		return result;
	}
	,each: function(f) {
		this.then(function(list) {
			var _g = 0;
			while(_g < list.length) {
				var item = list[_g];
				++_g;
				f(item);
			}
		});
		return this;
	}
	,__class__: tannus_ds_promises_ArrayPromise
});
var tannus_ds_promises_BoolPromise = function(exec,nocall) {
	tannus_ds_Promise.call(this,exec,nocall);
};
$hxClasses["tannus.ds.promises.BoolPromise"] = tannus_ds_promises_BoolPromise;
tannus_ds_promises_BoolPromise.__name__ = ["tannus","ds","promises","BoolPromise"];
tannus_ds_promises_BoolPromise.__super__ = tannus_ds_Promise;
tannus_ds_promises_BoolPromise.prototype = $extend(tannus_ds_Promise.prototype,{
	yep: function(onyes) {
		this.then(function(v) {
			if(v) onyes();
		});
		return this;
	}
	,nope: function(onno) {
		this.then(function(v) {
			if(!v) onno();
		});
		return this;
	}
	,__class__: tannus_ds_promises_BoolPromise
});
var tannus_ds_promises_ObjectPromise = function(exec,nocall) {
	tannus_ds_Promise.call(this,exec,nocall);
};
$hxClasses["tannus.ds.promises.ObjectPromise"] = tannus_ds_promises_ObjectPromise;
tannus_ds_promises_ObjectPromise.__name__ = ["tannus","ds","promises","ObjectPromise"];
tannus_ds_promises_ObjectPromise.__super__ = tannus_ds_Promise;
tannus_ds_promises_ObjectPromise.prototype = $extend(tannus_ds_Promise.prototype,{
	exists: function(key) {
		var _g = this;
		var r = new tannus_ds_promises_BoolPromise(function(res,err) {
			_g.then(function(o) {
				res(Object.prototype.hasOwnProperty.call(o,key));
			});
			_g.unless(err);
		});
		this.attach(r);
		return r;
	}
	,keys: function() {
		var _g = this;
		var r = new tannus_ds_promises_ArrayPromise(function(a,e) {
			_g.then(function(o) {
				a(Reflect.fields(o));
			});
			_g.unless(e);
		});
		this.attach(r);
		return r;
	}
	,get: function(key) {
		var _g = this;
		var r = new tannus_ds_promises_ObjectPromise(function(accept,reject) {
			_g.then(function(o) {
				console.log(o);
				accept((function($this) {
					var $r;
					var this1 = Reflect.getProperty(o,key);
					$r = this1 != null?this1:this1;
					return $r;
				}(this)));
			});
			_g.unless(reject);
		});
		this.attach(r);
		return r;
	}
	,__class__: tannus_ds_promises_ObjectPromise
});
var tannus_ds_promises_StringPromise = function(exec,nocall) {
	tannus_ds_Promise.call(this,exec,nocall);
};
$hxClasses["tannus.ds.promises.StringPromise"] = tannus_ds_promises_StringPromise;
tannus_ds_promises_StringPromise.__name__ = ["tannus","ds","promises","StringPromise"];
tannus_ds_promises_StringPromise.__super__ = tannus_ds_Promise;
tannus_ds_promises_StringPromise.prototype = $extend(tannus_ds_Promise.prototype,{
	charAt: function(i) {
		var _g = this;
		var res = new tannus_ds_promises_StringPromise(function(accept,reject) {
			_g.then(function(s) {
				accept(s.charAt(i));
			});
			_g.unless(reject);
		});
		this.attach(res);
		return res;
	}
	,charCodeAt: function(i) {
		var res = this.charAt(i).transform(function(c) {
			return HxOverrides.cca(c,0);
		});
		this.attach(res);
		return res;
	}
	,split: function(delimiter) {
		var _g = this;
		var res = new tannus_ds_Promise(function(accept,reject) {
			_g.then(function(s) {
				accept(s.split(delimiter));
			});
			_g.unless(function(err) {
				reject(err);
			});
		},null).array();
		this.attach(res);
		return res;
	}
	,substr: function(pos,len) {
		var _g = this;
		var res = new tannus_ds_promises_StringPromise(function(accept,reject) {
			_g.then(function(data) {
				var sub = HxOverrides.substr(data,pos,len);
				accept(sub);
			});
			_g.unless(reject);
		});
		this.attach(res);
		return res;
	}
	,substring: function(start,end) {
		var _g = this;
		var res = new tannus_ds_promises_StringPromise(function(accept,reject) {
			_g.then(function(data) {
				var sub = data.substring(start,end);
				accept(sub);
			});
			_g.unless(reject);
		});
		this.attach(res);
		return res;
	}
	,toUpperCase: function() {
		var _g = this;
		var res = new tannus_ds_promises_StringPromise(function(accept,reject) {
			_g.then(function(s) {
				accept(s.toUpperCase());
			});
			_g.unless(reject);
		});
		this.attach(res);
		return res;
	}
	,toLowerCase: function() {
		var _g = this;
		var res = new tannus_ds_promises_StringPromise(function(accept,reject) {
			_g.then(function(s) {
				accept(s.toLowerCase());
			});
			_g.unless(reject);
		});
		this.attach(res);
		return res;
	}
	,capitalize: function() {
		var _g = this;
		var res = new tannus_ds_Promise(function(accept,reject) {
			_g.then(function(s) {
				var chars = s.split("");
				var first = chars.shift().toUpperCase();
				var rest = chars.join("").toLowerCase();
				accept(first + rest);
			});
			_g.unless(function(err) {
				reject(err);
			});
		},null).string();
		this.attach(res);
		return res;
	}
	,startsWith: function(start) {
		var _g = this;
		var res = new tannus_ds_promises_BoolPromise(function(reply,reject) {
			_g.then(function(data) {
				{
					var _g1 = start;
					switch(_g1[1]) {
					case 0:
						var str = _g1[2];
						reply(StringTools.startsWith(data,str));
						break;
					case 1:
						var _pstr = _g1[2];
						var pstr = _pstr.string();
						pstr.then(function(str1) {
							reply(StringTools.startsWith(data,str1));
						});
						break;
					}
				}
			});
			_g.unless(reject);
		});
		this.attach(res);
		return res;
	}
	,endsWith: function(end) {
		var _g = this;
		var res = new tannus_ds_promises_BoolPromise(function(reply,reject) {
			_g.then(function(data) {
				{
					var _g1 = end;
					switch(_g1[1]) {
					case 0:
						var str = _g1[2];
						reply(StringTools.endsWith(data,str));
						break;
					case 1:
						var _pstr = _g1[2];
						var pstr = _pstr.string();
						pstr.then(function(str1) {
							reply(StringTools.endsWith(data,str1));
						});
						break;
					}
				}
			});
			_g.unless(reject);
		});
		this.attach(res);
		return res;
	}
	,ltrim: function() {
		var lt = this.transform(function(s) {
			return StringTools.ltrim(s);
		}).string();
		this.attach(lt);
		return lt;
	}
	,rtrim: function() {
		var rt = this.transform(function(s) {
			return StringTools.rtrim(s);
		}).string();
		this.attach(rt);
		return rt;
	}
	,trim: function() {
		var trimmed = this.transform(function(s) {
			return StringTools.trim(s);
		}).string();
		this.attach(trimmed);
		return trimmed;
	}
	,match: function(pattern) {
		var res = this.transform(function(s) {
			return pattern.match(s);
		}).bool();
		this.attach(res);
		return res;
	}
	,__class__: tannus_ds_promises_StringPromise
});
var tannus_ds_tuples__$Tup2_Tup2_$Impl_$ = {};
$hxClasses["tannus.ds.tuples._Tup2.Tup2_Impl_"] = tannus_ds_tuples__$Tup2_Tup2_$Impl_$;
tannus_ds_tuples__$Tup2_Tup2_$Impl_$.__name__ = ["tannus","ds","tuples","_Tup2","Tup2_Impl_"];
tannus_ds_tuples__$Tup2_Tup2_$Impl_$.__properties__ = {set__1:"set__1",get__1:"get__1",set__0:"set__0",get__0:"get__0"}
tannus_ds_tuples__$Tup2_Tup2_$Impl_$._new = function(a,b) {
	return [a,b];
};
tannus_ds_tuples__$Tup2_Tup2_$Impl_$.get__0 = function(this1) {
	return this1[0];
};
tannus_ds_tuples__$Tup2_Tup2_$Impl_$.set__0 = function(this1,v) {
	return this1[0] = v;
};
tannus_ds_tuples__$Tup2_Tup2_$Impl_$.get__1 = function(this1) {
	return this1[1];
};
tannus_ds_tuples__$Tup2_Tup2_$Impl_$.set__1 = function(this1,v) {
	return this1[1] = v;
};
var tannus_ds_tuples__$Tup4_Tup4_$Impl_$ = {};
$hxClasses["tannus.ds.tuples._Tup4.Tup4_Impl_"] = tannus_ds_tuples__$Tup4_Tup4_$Impl_$;
tannus_ds_tuples__$Tup4_Tup4_$Impl_$.__name__ = ["tannus","ds","tuples","_Tup4","Tup4_Impl_"];
tannus_ds_tuples__$Tup4_Tup4_$Impl_$.__properties__ = {set__3:"set__3",get__3:"get__3",set__2:"set__2",get__2:"get__2",set__1:"set__1",get__1:"get__1",set__0:"set__0",get__0:"get__0"}
tannus_ds_tuples__$Tup4_Tup4_$Impl_$._new = function(a,b,c,d) {
	return [a,b,c,d];
};
tannus_ds_tuples__$Tup4_Tup4_$Impl_$.get__0 = function(this1) {
	return this1[0];
};
tannus_ds_tuples__$Tup4_Tup4_$Impl_$.set__0 = function(this1,v) {
	return this1[0] = v;
};
tannus_ds_tuples__$Tup4_Tup4_$Impl_$.get__1 = function(this1) {
	return this1[1];
};
tannus_ds_tuples__$Tup4_Tup4_$Impl_$.set__1 = function(this1,v) {
	return this1[1] = v;
};
tannus_ds_tuples__$Tup4_Tup4_$Impl_$.get__2 = function(this1) {
	return this1[2];
};
tannus_ds_tuples__$Tup4_Tup4_$Impl_$.set__2 = function(this1,v) {
	return this1[2] = v;
};
tannus_ds_tuples__$Tup4_Tup4_$Impl_$.get__3 = function(this1) {
	return this1[3];
};
tannus_ds_tuples__$Tup4_Tup4_$Impl_$.set__3 = function(this1,v) {
	return this1[3] = v;
};
var tannus_events_Event = function(variety,bubbls) {
	if(bubbls == null) bubbls = false;
	this.type = variety;
	this.date = new Date().getTime();
	this._bubbles = bubbls;
	this._defaultPrevented = false;
	this._cancelled = false;
	this._propogationStopped = false;
	this.onCancelled = new tannus_io_VoidSignal();
	this.onDefaultPrevented = new tannus_io_VoidSignal();
	this.onPropogationStopped = new tannus_io_VoidSignal();
	this._onCopy = new tannus_io_Signal();
};
$hxClasses["tannus.events.Event"] = tannus_events_Event;
tannus_events_Event.__name__ = ["tannus","events","Event"];
tannus_events_Event.prototype = {
	clone: function(deep) {
		if(deep == null) deep = false;
		var c = Reflect.copy(this);
		if(deep) c.onCancelled = this.onCancelled.clone(); else c.onCancelled = new tannus_io_VoidSignal();
		if(deep) c.onDefaultPrevented = this.onDefaultPrevented.clone(); else c.onDefaultPrevented = new tannus_io_VoidSignal();
		if(deep) c.onPropogationStopped = this.onPropogationStopped.clone(); else c.onPropogationStopped = new tannus_io_VoidSignal();
		this._onCopy.broadcast(c);
		return c;
	}
	,cancel: function() {
		this._cancelled = true;
		this.onCancelled.call();
	}
	,preventDefault: function() {
		this._defaultPrevented = true;
		this.onDefaultPrevented.call();
	}
	,stopPropogation: function() {
		this._propogationStopped = true;
		this.onPropogationStopped.call();
	}
	,getModifiers: function() {
		return [];
	}
	,get_bubbles: function() {
		return this._bubbles;
	}
	,get_cancelled: function() {
		return this._cancelled;
	}
	,get_defaultPrevented: function() {
		return this._defaultPrevented;
	}
	,get_propogationStopped: function() {
		return this._propogationStopped;
	}
	,__class__: tannus_events_Event
	,__properties__: {get_propogationStopped:"get_propogationStopped",get_defaultPrevented:"get_defaultPrevented",get_cancelled:"get_cancelled",get_bubbles:"get_bubbles"}
};
var tannus_events__$Key_Key_$Impl_$ = {};
$hxClasses["tannus.events._Key.Key_Impl_"] = tannus_events__$Key_Key_$Impl_$;
tannus_events__$Key_Key_$Impl_$.__name__ = ["tannus","events","_Key","Key_Impl_"];
tannus_events__$Key_Key_$Impl_$.__properties__ = {get_name:"get_name"}
tannus_events__$Key_Key_$Impl_$.get_name = function(this1) {
	return tannus_events_KeyTools.getName(this1);
};
var tannus_events_KeyCombo = function(desc) {
	this.set_description(desc);
};
$hxClasses["tannus.events.KeyCombo"] = tannus_events_KeyCombo;
tannus_events_KeyCombo.__name__ = ["tannus","events","KeyCombo"];
tannus_events_KeyCombo.ofEvent = function(event) {
	var parts = [];
	if(event.ctrlKey) parts.push("Ctrl");
	if(event.metaKey) parts.push("Super");
	if(event.shiftKey) parts.push("Shift");
	if(event.altKey) parts.push("Alt");
	parts.push(tannus_events_KeyTools.getName(event.key));
	return new tannus_events_KeyCombo(parts.join("+"));
};
tannus_events_KeyCombo.prototype = {
	test: function(event) {
		var _g = 0;
		var _g1 = this.checks;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(!tannus_events_kc_KeyCheckTools.test(c,event)) return false;
		}
		return tannus_events_kc_KeyCheckTools.isAllModsTested(this.checks,event);
	}
	,getDescription: function() {
		var parts = [];
		var _g = 0;
		var _g1 = this.checks;
		while(_g < _g1.length) {
			var check = _g1[_g];
			++_g;
			switch(check[1]) {
			case 1:
				var mod = check[2];
				parts.push(tannus_ds_StringUtils.capitalize(mod + ""));
				break;
			case 0:
				var key = check[2];
				parts.push(tannus_ds_StringUtils.capitalize(tannus_events_KeyTools.getName(key),true));
				break;
			}
		}
		return parts.join("+");
	}
	,toString: function() {
		return "KeyCombo(" + this.getDescription() + ")";
	}
	,set_description: function(v) {
		this.checks = tannus_events_kc_KeyCheckTools.toKeyChecks(v);
		return this.description = v;
	}
	,__class__: tannus_events_KeyCombo
	,__properties__: {set_description:"set_description"}
};
var tannus_events_KeyTools = function() { };
$hxClasses["tannus.events.KeyTools"] = tannus_events_KeyTools;
tannus_events_KeyTools.__name__ = ["tannus","events","KeyTools"];
tannus_events_KeyTools.getName = function(key) {
	var this1 = tannus_events_KeyTools.keyNames();
	return this1.get(key);
};
tannus_events_KeyTools.getKey = function(name) {
	var this1 = tannus_events_KeyTools.nameKeys();
	var key = name.toLowerCase();
	return this1.get(key);
};
tannus_events_KeyTools.keyNames = function() {
	if(tannus_events_KeyTools._keyNames == null) {
		var _g = new haxe_ds_IntMap();
		_g.h[20] = "<CapsLock>";
		_g.h[110] = "<Numpad .>";
		_g.h[111] = "<Numpad />";
		_g.h[91] = "Super";
		_g.h[191] = "/";
		_g.h[13] = "Enter";
		_g.h[16] = "Shift";
		_g.h[32] = "Space";
		_g.h[33] = "<Page Up>";
		_g.h[8] = "Backspace";
		_g.h[9] = "Tab";
		_g.h[107] = "<Numpad +>";
		_g.h[190] = ".";
		_g.h[219] = "[";
		_g.h[36] = "Home";
		_g.h[37] = "Left";
		_g.h[187] = "=";
		_g.h[222] = "'";
		_g.h[39] = "Right";
		_g.h[221] = "]";
		_g.h[144] = "<Num Lock>";
		_g.h[220] = "\\";
		_g.h[34] = "<Page Down>";
		_g.h[35] = "End";
		_g.h[189] = "-";
		_g.h[186] = ";";
		_g.h[40] = "Down";
		_g.h[27] = "Esc";
		_g.h[188] = ",";
		_g.h[46] = "Delete";
		_g.h[106] = "<Numpad *>";
		_g.h[192] = "`";
		_g.h[17] = "Ctrl";
		_g.h[45] = "Insert";
		_g.h[145] = "<Scroll Lock>";
		_g.h[109] = "<Numpad ->";
		_g.h[38] = "Up";
		_g.h[18] = "Alt";
		_g.h[65] = "A";
		_g.h[66] = "B";
		_g.h[67] = "C";
		_g.h[68] = "D";
		_g.h[69] = "E";
		_g.h[70] = "F";
		_g.h[71] = "G";
		_g.h[72] = "H";
		_g.h[73] = "I";
		_g.h[74] = "J";
		_g.h[75] = "K";
		_g.h[76] = "L";
		_g.h[77] = "M";
		_g.h[78] = "N";
		_g.h[79] = "O";
		_g.h[80] = "P";
		_g.h[81] = "Q";
		_g.h[82] = "R";
		_g.h[83] = "S";
		_g.h[84] = "T";
		_g.h[85] = "U";
		_g.h[86] = "V";
		_g.h[87] = "W";
		_g.h[88] = "X";
		_g.h[89] = "Y";
		_g.h[90] = "Z";
		_g.h[48] = "0";
		_g.h[49] = "1";
		_g.h[50] = "2";
		_g.h[51] = "3";
		_g.h[52] = "4";
		_g.h[53] = "5";
		_g.h[54] = "6";
		_g.h[55] = "7";
		_g.h[56] = "8";
		_g.h[57] = "9";
		_g.h[112] = "<F1>";
		_g.h[113] = "<F2>";
		_g.h[114] = "<F3>";
		_g.h[115] = "<F4>";
		_g.h[116] = "<F5>";
		_g.h[117] = "<F6>";
		_g.h[118] = "<F7>";
		_g.h[119] = "<F8>";
		_g.h[120] = "<F9>";
		_g.h[121] = "<F10>";
		_g.h[122] = "<F11>";
		_g.h[123] = "<F12>";
		tannus_events_KeyTools._keyNames = _g;
	}
	return tannus_events_KeyTools._keyNames;
};
tannus_events_KeyTools.nameKeys = function() {
	if(tannus_events_KeyTools._nameKeys == null) {
		tannus_events_KeyTools._nameKeys = new haxe_ds_StringMap();
		var kn = tannus_events_KeyTools.keyNames();
		var $it0 = kn.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			var k = kn.h[key].toLowerCase();
			tannus_events_KeyTools._nameKeys.set(k,key);
			key;
		}
	}
	return tannus_events_KeyTools._nameKeys;
};
var tannus_events_KeyboardEvent = function(type,code,emods) {
	tannus_events_Event.call(this,type);
	this.keyCode = code;
	this.key = this.keyCode;
	if(emods != null) this.mods = emods; else this.mods = [];
	this.altKey = Lambda.has(this.mods,"alt");
	this.ctrlKey = Lambda.has(this.mods,"ctrl");
	this.shiftKey = Lambda.has(this.mods,"shift");
	this.metaKey = Lambda.has(this.mods,"super");
};
$hxClasses["tannus.events.KeyboardEvent"] = tannus_events_KeyboardEvent;
tannus_events_KeyboardEvent.__name__ = ["tannus","events","KeyboardEvent"];
tannus_events_KeyboardEvent.fromJqEvent = function(e) {
	var mods = [];
	if(e.altKey) mods.push("alt");
	if(e.ctrlKey) mods.push("ctrl");
	if(e.shiftKey) mods.push("shift");
	if(e.metaKey) mods.push("super");
	var res = new tannus_events_KeyboardEvent(e.type,e.keyCode,mods);
	res.onDefaultPrevented.once($bind(e,e.preventDefault));
	res.onPropogationStopped.once($bind(e,e.stopPropagation));
	return res;
};
tannus_events_KeyboardEvent.__super__ = tannus_events_Event;
tannus_events_KeyboardEvent.prototype = $extend(tannus_events_Event.prototype,{
	getModifiers: function() {
		return this.mods.slice();
	}
	,__class__: tannus_events_KeyboardEvent
});
var tannus_events_MouseEvent = function(type,pos,btn,mods) {
	if(btn == null) btn = -1;
	tannus_events_Event.call(this,type);
	this.position = pos;
	this.button = btn;
	this.emods = mods != null?mods:[];
};
$hxClasses["tannus.events.MouseEvent"] = tannus_events_MouseEvent;
tannus_events_MouseEvent.__name__ = ["tannus","events","MouseEvent"];
tannus_events_MouseEvent.fromJqEvent = function(event) {
	var mods = [];
	if(event.shiftKey) mods.push("shift");
	if(event.altKey) mods.push("alt");
	if(event.ctrlKey) mods.push("ctrl");
	if(event.metaKey) mods.push("super");
	var pos = new tannus_geom_TPoint(event.pageX,event.pageY,0);
	var result = new tannus_events_MouseEvent(event.type,pos,event.which,mods);
	result.onDefaultPrevented.once($bind(event,event.preventDefault));
	result.onPropogationStopped.once($bind(event,event.stopPropagation));
	return result;
};
tannus_events_MouseEvent.fromJsEvent = function(event) {
	var mods = [];
	if(event.shiftKey) mods.push("shift");
	if(event.altKey) mods.push("alt");
	if(event.ctrlKey) mods.push("ctrl");
	if(event.metaKey) mods.push("super");
	var pos = new tannus_geom_TPoint(event.pageX,event.pageY,0);
	var e = new tannus_events_MouseEvent(event.type,pos,event.which,mods);
	e.onCancelled.once($bind(event,event.preventDefault));
	e.onDefaultPrevented.once($bind(event,event.preventDefault));
	e.onPropogationStopped.once($bind(event,event.stopPropagation));
	var copyEvent;
	var copyEvent1 = null;
	copyEvent1 = function(copy) {
		copy.onCancelled.once($bind(event,event.preventDefault));
		copy.onDefaultPrevented.once($bind(event,event.preventDefault));
		copy.onPropogationStopped.once($bind(event,event.stopPropagation));
		copy._onCopy.listen(copyEvent1,false);
	};
	copyEvent = copyEvent1;
	e._onCopy.listen(copyEvent,false);
	return e;
};
tannus_events_MouseEvent.__super__ = tannus_events_Event;
tannus_events_MouseEvent.prototype = $extend(tannus_events_Event.prototype,{
	get_shiftKey: function() {
		return Lambda.has(this.emods,"shift");
	}
	,get_altKey: function() {
		return Lambda.has(this.emods,"alt");
	}
	,get_ctrlKey: function() {
		return Lambda.has(this.emods,"ctrl");
	}
	,get_metaKey: function() {
		return Lambda.has(this.emods,"super");
	}
	,__class__: tannus_events_MouseEvent
	,__properties__: $extend(tannus_events_Event.prototype.__properties__,{get_metaKey:"get_metaKey",get_ctrlKey:"get_ctrlKey",get_altKey:"get_altKey",get_shiftKey:"get_shiftKey"})
});
var tannus_events_ResizeEvent = function(old_area,new_area) {
	tannus_events_Event.call(this,"resize");
	this.delta = [new_area,old_area];
};
$hxClasses["tannus.events.ResizeEvent"] = tannus_events_ResizeEvent;
tannus_events_ResizeEvent.__name__ = ["tannus","events","ResizeEvent"];
tannus_events_ResizeEvent.__super__ = tannus_events_Event;
tannus_events_ResizeEvent.prototype = $extend(tannus_events_Event.prototype,{
	__class__: tannus_events_ResizeEvent
});
var tannus_events_ScrollEvent = function(delt) {
	tannus_events_Event.call(this,"scroll");
	this.delta = delt;
};
$hxClasses["tannus.events.ScrollEvent"] = tannus_events_ScrollEvent;
tannus_events_ScrollEvent.__name__ = ["tannus","events","ScrollEvent"];
tannus_events_ScrollEvent.__super__ = tannus_events_Event;
tannus_events_ScrollEvent.prototype = $extend(tannus_events_Event.prototype,{
	__class__: tannus_events_ScrollEvent
});
var tannus_events_kc_KeyCheck = $hxClasses["tannus.events.kc.KeyCheck"] = { __ename__ : ["tannus","events","kc","KeyCheck"], __constructs__ : ["KCKey","KCMod"] };
tannus_events_kc_KeyCheck.KCKey = function(key) { var $x = ["KCKey",0,key]; $x.__enum__ = tannus_events_kc_KeyCheck; $x.toString = $estr; return $x; };
tannus_events_kc_KeyCheck.KCMod = function(mod) { var $x = ["KCMod",1,mod]; $x.__enum__ = tannus_events_kc_KeyCheck; $x.toString = $estr; return $x; };
var tannus_events_kc_KeyCheckTools = function() { };
$hxClasses["tannus.events.kc.KeyCheckTools"] = tannus_events_kc_KeyCheckTools;
tannus_events_kc_KeyCheckTools.__name__ = ["tannus","events","kc","KeyCheckTools"];
tannus_events_kc_KeyCheckTools.test = function(check,event) {
	switch(check[1]) {
	case 0:
		var key = check[2];
		return event.key == key;
	case 1:
		var mod = check[2];
		var _g = 0;
		var _g1 = event.getModifiers();
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m == mod) return true;
		}
		return false;
	}
};
tannus_events_kc_KeyCheckTools.isAllModsTested = function(checks,event) {
	var checkedMods = [];
	var _g = 0;
	while(_g < checks.length) {
		var c = checks[_g];
		++_g;
		switch(c[1]) {
		case 0:
			null;
			break;
		case 1:
			var mod = c[2];
			checkedMods.push(mod);
			break;
		}
	}
	var presentMods = event.getModifiers();
	var unchecked = tannus_ds_ArrayTools.without(presentMods,checkedMods);
	return Lambda.empty(unchecked);
};
tannus_events_kc_KeyCheckTools.toKeyChecks = function(str) {
	var pieces = str.split("+").map(function(item) {
		return StringTools.trim(item);
	}).filter(function(item1) {
		return !(item1.length == 0);
	});
	var checks = [];
	var mods;
	var _g = new haxe_ds_StringMap();
	_g.set("alt","alt");
	_g.set("shift","shift");
	_g.set("ctrl","ctrl");
	_g.set("super","super");
	_g.set("meta","super");
	mods = _g;
	var _g1 = 0;
	while(_g1 < pieces.length) {
		var s = pieces[_g1];
		++_g1;
		if(Lambda.has(tannus_ds_MapTools.keyArray(mods),s.toLowerCase())) checks.push(tannus_events_kc_KeyCheck.KCMod((function($this) {
			var $r;
			var key = s.toLowerCase();
			$r = __map_reserved[key] != null?mods.getReserved(key):mods.h[key];
			return $r;
		}(this)))); else if(s.length == 1) checks.push(tannus_events_kc_KeyCheck.KCKey(HxOverrides.cca(s,0))); else checks.push(tannus_events_kc_KeyCheck.KCKey(tannus_events_KeyTools.getKey(s)));
	}
	return checks;
};
var tannus_geom__$Angle_Angle_$Impl_$ = {};
$hxClasses["tannus.geom._Angle.Angle_Impl_"] = tannus_geom__$Angle_Angle_$Impl_$;
tannus_geom__$Angle_Angle_$Impl_$.__name__ = ["tannus","geom","_Angle","Angle_Impl_"];
tannus_geom__$Angle_Angle_$Impl_$._new = function(v) {
	return new tannus_geom_CAngle(v);
};
tannus_geom__$Angle_Angle_$Impl_$.toString = function(this1) {
	return this1.toString();
};
tannus_geom__$Angle_Angle_$Impl_$.toFloat = function(this1) {
	return this1.toFloat();
};
tannus_geom__$Angle_Angle_$Impl_$.plusAngle = function(this1,o) {
	return new tannus_geom_CAngle(this1.v + o.v);
};
tannus_geom__$Angle_Angle_$Impl_$.plusFloat = function(this1,o) {
	return new tannus_geom_CAngle(this1.v + o);
};
tannus_geom__$Angle_Angle_$Impl_$.fromFloat = function(v) {
	return new tannus_geom_CAngle(v);
};
var tannus_geom_CAngle = function(_v) {
	this.v = _v;
};
$hxClasses["tannus.geom.CAngle"] = tannus_geom_CAngle;
tannus_geom_CAngle.__name__ = ["tannus","geom","CAngle"];
tannus_geom_CAngle.prototype = {
	compliment: function() {
		return new tannus_geom_CAngle(360 - this.v);
	}
	,invert: function() {
		return new tannus_geom_CAngle(-this.v);
	}
	,toString: function() {
		return this.v + "°";
	}
	,toFloat: function() {
		return this.v;
	}
	,get_degrees: function() {
		return this.v;
	}
	,set_degrees: function(_v) {
		return this.v = _v;
	}
	,get_radians: function() {
		return this.v * Math.PI / 180;
	}
	,set_radians: function(_v) {
		this.v = _v * (Math.PI / 180);
		return this.v * Math.PI / 180;
	}
	,get_x: function() {
		return Math.cos(this.v * Math.PI / 180);
	}
	,get_y: function() {
		return Math.sin(this.v * Math.PI / 180);
	}
	,__class__: tannus_geom_CAngle
	,__properties__: {get_y:"get_y",get_x:"get_x",set_radians:"set_radians",get_radians:"get_radians",set_degrees:"set_degrees",get_degrees:"get_degrees"}
};
var tannus_geom__$Area_Area_$Impl_$ = {};
$hxClasses["tannus.geom._Area.Area_Impl_"] = tannus_geom__$Area_Area_$Impl_$;
tannus_geom__$Area_Area_$Impl_$.__name__ = ["tannus","geom","_Area","Area_Impl_"];
tannus_geom__$Area_Area_$Impl_$.__properties__ = {set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width"}
tannus_geom__$Area_Area_$Impl_$._new = function(w,h) {
	if(h == null) h = 0;
	if(w == null) w = 0;
	return [w,h];
};
tannus_geom__$Area_Area_$Impl_$.get_width = function(this1) {
	return this1[0];
};
tannus_geom__$Area_Area_$Impl_$.set_width = function(this1,nw) {
	return this1[0] = nw;
};
tannus_geom__$Area_Area_$Impl_$.get_height = function(this1) {
	return this1[1];
};
tannus_geom__$Area_Area_$Impl_$.set_height = function(this1,nh) {
	return this1[1] = nh;
};
tannus_geom__$Area_Area_$Impl_$.clone = function(this1) {
	return [this1[0],this1[1]];
};
tannus_geom__$Area_Area_$Impl_$.resize = function(this1,nw,nh,mr) {
	if(mr == null) mr = false;
	if(mr) {
		var w = this1[0];
		var h = this1[1];
		if(nw != null) {
			var rat = h / w;
			w = nw;
			h = w * rat;
			return [w,h];
		} else if(nh != null) {
			var rat1 = w / h;
			h = nh;
			w = h * rat1;
			return [w,h];
		} else throw new js__$Boot_HaxeError("GeometryError: Cannot maintain ration if both [width] and [height] are assigned!");
	} else {
		var w1;
		if(nw != null) w1 = nw; else w1 = this1[0];
		var h1;
		if(nh != null) h1 = nh; else h1 = this1[1];
		return [w1,h1];
	}
};
tannus_geom__$Area_Area_$Impl_$.toFloatTuple = function(this1) {
	return this1;
};
tannus_geom__$Area_Area_$Impl_$.toIntTuple = function(this1) {
	var a = Math.round(this1[0]);
	var b = Math.round(this1[1]);
	return [a,b];
};
tannus_geom__$Area_Area_$Impl_$.fromTwoTuple = function(t) {
	return [t[0],t[1]];
};
tannus_geom__$Area_Area_$Impl_$.toRectangle = function(this1) {
	return new tannus_geom_CRectangle(0,0,this1[0],this1[1]);
};
tannus_geom__$Area_Area_$Impl_$.fromRectangle = function(r) {
	return [r.width,r.height];
};
tannus_geom__$Area_Area_$Impl_$.toString = function(this1) {
	return "Area<" + this1[0] + "x" + this1[1] + ">";
};
tannus_geom__$Area_Area_$Impl_$.fromString = function(s) {
	var w;
	var h;
	s = StringTools.replace(StringTools.replace(StringTools.replace(s,"Area",""),"<",""),">","");
	var a = s.split("x").map((function(f) {
		return function(x) {
			return f(x);
		};
	})(Std.parseFloat));
	return [a[0],a[1]];
};
tannus_geom__$Area_Area_$Impl_$.toFloatArray = function(this1) {
	return [this1[0],this1[1]];
};
tannus_geom__$Area_Area_$Impl_$.toIntArray = function(this1) {
	return [this1[0],this1[1]].map(Math.round);
};
tannus_geom__$Area_Area_$Impl_$.fromFloatArray = function(a) {
	return [a[0],a[1]];
};
tannus_geom__$Area_Area_$Impl_$.fromIntArray = function(a) {
	return [a[0],a[1]];
};
tannus_geom__$Area_Area_$Impl_$.i = function(f) {
	return Math.round(f);
};
var tannus_geom_OldArea = function(w,h) {
	if(h == null) h = 0;
	if(w == null) w = 0;
	this.width = w;
	this.height = h;
};
$hxClasses["tannus.geom.OldArea"] = tannus_geom_OldArea;
tannus_geom_OldArea.__name__ = ["tannus","geom","OldArea"];
tannus_geom_OldArea.prototype = {
	__class__: tannus_geom_OldArea
};
var tannus_geom_Bezier = function(start,ctrl1,ctrl2,end) {
	this.start = start;
	this.ctrl1 = ctrl1;
	this.ctrl2 = ctrl2;
	this.end = end;
};
$hxClasses["tannus.geom.Bezier"] = tannus_geom_Bezier;
tannus_geom_Bezier.__name__ = ["tannus","geom","Bezier"];
tannus_geom_Bezier.prototype = {
	clone: function() {
		return new tannus_geom_Bezier(this.start,this.ctrl1,this.ctrl2,this.end);
	}
	,equals: function(other) {
		return this.start.equals(other.start) && this.ctrl1.equals(other.ctrl1) && this.ctrl2.equals(other.ctrl2) && this.end.equals(other.end);
	}
	,flip: function() {
		var temp = this.start.get_x();
		var nx = this.end.get_x();
		this.start.set_x(nx);
		this.end.set_x(temp);
		temp = this.ctrl1.get_x();
		var nx1 = this.ctrl2.get_x();
		this.ctrl1.set_x(nx1);
		this.ctrl2.set_x(temp);
		temp = this.start.get_y();
		var ny = this.end.get_y();
		this.start.set_y(ny);
		this.end.set_y(temp);
		temp = this.ctrl1.get_y();
		var ny1 = this.ctrl2.get_y();
		this.ctrl1.set_y(ny1);
		this.ctrl2.set_y(temp);
	}
	,getPointX: function(t) {
		if(t == 0) return this.start.get_x(); else if(t == 1) return this.end.get_x();
		var lerp = (function(f) {
			return function(a,b,x) {
				return f(a,b,x);
			};
		})(tannus_math_TMath.lerp);
		var ix0 = lerp(this.start.get_x(),this.ctrl1.get_x(),t);
		var ix1 = lerp(this.ctrl1.get_x(),this.ctrl2.get_x(),t);
		var ix2 = lerp(this.ctrl2.get_x(),this.end.get_x(),t);
		ix0 = lerp(ix0,ix1,t);
		ix1 = lerp(ix1,ix2,t);
		return lerp(ix0,ix1,t);
	}
	,getPointY: function(t) {
		if(t == 0) return this.start.get_y(); else if(t == 1) return this.end.get_y();
		var lerp = (function(f) {
			return function(a,b,x) {
				return f(a,b,x);
			};
		})(tannus_math_TMath.lerp);
		var iy0 = lerp(this.start.get_y(),this.ctrl1.get_y(),t);
		var iy1 = lerp(this.ctrl1.get_y(),this.ctrl2.get_y(),t);
		var iy2 = lerp(this.ctrl2.get_y(),this.end.get_y(),t);
		iy0 = lerp(iy0,iy1,t);
		iy1 = lerp(iy1,iy2,t);
		return lerp(iy0,iy1,t);
	}
	,getPoint: function(t) {
		var x = this.getPointX(t);
		var y = this.getPointY(t);
		return new tannus_geom_TPoint(x,y,0);
	}
	,getPoints: function(prec) {
		var results = [];
		var precision;
		if(prec != null) precision = prec; else precision = tannus_geom_Bezier.PRECISION;
		var i = 0;
		while(i < precision) {
			var pt = this.getPoint(i / precision);
			results.push(pt);
			i++;
		}
		return results;
	}
	,__class__: tannus_geom_Bezier
};
var tannus_geom_Line = function(o,t) {
	this.one = o;
	this.two = t;
};
$hxClasses["tannus.geom.Line"] = tannus_geom_Line;
tannus_geom_Line.__name__ = ["tannus","geom","Line"];
tannus_geom_Line.prototype = {
	intersects: function(other) {
		var sl = new tannus_geom_Line(this.two.minusPoint(this.one),other.two.minusPoint(other.one));
		var s = (-sl.one.get_y() * (this.one.get_x() - other.one.get_x()) + sl.one.get_x() * (this.one.get_y() - other.one.get_y())) / (-sl.two.get_x() * sl.one.get_y() + sl.one.get_x() * sl.two.get_y());
		var t = (sl.two.get_x() * (this.one.get_y() - other.one.get_y()) - sl.two.get_y() * (this.one.get_x() - other.one.get_x())) / (-sl.two.get_x() * sl.one.get_y() + sl.one.get_x() * sl.two.get_y());
		return s >= 0 && s <= 1 && (t >= 0 && t <= 1);
	}
	,toString: function() {
		return "Line<(" + this.one.get_x() + ", " + this.one.get_y() + ") => (" + this.two.get_x() + ", " + this.two.get_y() + ")>";
	}
	,getPoint: function(d) {
		var dist = d;
		var vel;
		var angle = this.one.angleTo(this.two);
		vel = new tannus_geom_CVelocity(dist,angle);
		var res = vel.get_vector();
		res.moveByPoint(this.one);
		res.clamp();
		return res;
	}
	,along: function(d) {
		return this.one.lerp(this.two,d);
	}
	,getVertices: function() {
		var pts = [];
		this.one.clamp();
		this.two.clamp();
		var _g1 = 0;
		var _g = Math.round(this.one.distanceFrom(this.two));
		while(_g1 < _g) {
			var i = _g1++;
			pts.push(this.getPoint(i));
		}
		return new tannus_geom_VertexArray(pts);
	}
	,get_slope: function() {
		return (this.one.get_y() - this.two.get_y()) / (this.one.get_x() - this.two.get_x());
	}
	,get_slopeRatio: function() {
		var top = this.one.get_y() - this.two.get_y();
		var bottom = this.one.get_x() - this.two.get_x();
		return new tannus_math_CRatio(top,bottom);
	}
	,get_length: function() {
		return this.one.distanceFrom(this.two);
	}
	,get_start: function() {
		return this.one;
	}
	,set_start: function(ns) {
		return this.one = ns;
	}
	,get_end: function() {
		return this.two;
	}
	,set_end: function(ne) {
		return this.two = ne;
	}
	,get_mid: function() {
		return this.one.lerp(this.two,0.5);
	}
	,get_angle: function() {
		return this.one.angleTo(this.two);
	}
	,get_rectangle: function() {
		var min;
		if(this.one.distanceFrom(new tannus_geom_TPoint(0,0,0)) > this.two.distanceFrom(new tannus_geom_TPoint(0,0,0))) min = this.two; else min = this.one;
		var max;
		if(this.one.distanceFrom(new tannus_geom_TPoint(0,0,0)) > this.two.distanceFrom(new tannus_geom_TPoint(0,0,0))) max = this.one; else max = this.two;
		var _x = min.get_x();
		var _y = min.get_y();
		var _width = max.get_x() - min.get_x();
		var _height = max.get_y() - min.get_y();
		return new tannus_geom_CRectangle(_x,_y,_width,_height);
	}
	,get_sx: function() {
		return this.one.get_x();
	}
	,set_sx: function(v) {
		return this.one.set_x(v);
	}
	,get_sy: function() {
		return this.one.get_y();
	}
	,set_sy: function(v) {
		return this.one.set_y(v);
	}
	,get_ex: function() {
		return this.two.get_x();
	}
	,set_ex: function(v) {
		return this.two.set_x(v);
	}
	,get_ey: function() {
		return this.two.get_y();
	}
	,set_ey: function(v) {
		return this.two.set_y(v);
	}
	,__class__: tannus_geom_Line
	,__properties__: {set_ey:"set_ey",get_ey:"get_ey",set_ex:"set_ex",get_ex:"get_ex",set_sy:"set_sy",get_sy:"get_sy",set_sx:"set_sx",get_sx:"get_sx",get_rectangle:"get_rectangle",get_angle:"get_angle",get_mid:"get_mid",set_end:"set_end",get_end:"get_end",set_start:"set_start",get_start:"get_start",get_length:"get_length",get_slopeRatio:"get_slopeRatio",get_slope:"get_slope"}
};
var tannus_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["tannus.geom.Matrix"] = tannus_geom_Matrix;
tannus_geom_Matrix.__name__ = ["tannus","geom","Matrix"];
tannus_geom_Matrix.prototype = {
	clone: function() {
		return new tannus_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = scaleX;
		this.d = scaleY;
		this.b = rotation;
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(matrix) {
		return matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c && this.d == matrix.d;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new tannus_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
		result.concat(m);
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,toString: function() {
		return "Matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos,newpos) {
		if(newpos == null) newpos = new tannus_geom_TPoint(0,0,0);
		var x = pos.get_x();
		var y = pos.get_y();
		newpos.set_x(this.a * x + this.c * y + this.tx);
		newpos.set_y(this.b * x + this.d * y + this.ty);
		return newpos;
	}
	,translate: function(dx,dy) {
		var m = new tannus_geom_Matrix();
		m.tx = dx;
		m.ty = dy;
		this.concat(m);
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__class__: tannus_geom_Matrix
};
var tannus_geom__$Point_Point_$Impl_$ = {};
$hxClasses["tannus.geom._Point.Point_Impl_"] = tannus_geom__$Point_Point_$Impl_$;
tannus_geom__$Point_Point_$Impl_$.__name__ = ["tannus","geom","_Point","Point_Impl_"];
tannus_geom__$Point_Point_$Impl_$.__properties__ = {get_d:"get_d",set_iz:"set_iz",get_iz:"get_iz",set_iy:"set_iy",get_iy:"get_iy",set_ix:"set_ix",get_ix:"get_ix",set_z:"set_z",get_z:"get_z",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
tannus_geom__$Point_Point_$Impl_$._new = function(x,y,z) {
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	return new tannus_geom_TPoint(x,y,z);
};
tannus_geom__$Point_Point_$Impl_$.get_x = function(this1) {
	return this1.get_x();
};
tannus_geom__$Point_Point_$Impl_$.set_x = function(this1,nx) {
	return this1.set_x(nx);
};
tannus_geom__$Point_Point_$Impl_$.get_y = function(this1) {
	return this1.get_y();
};
tannus_geom__$Point_Point_$Impl_$.set_y = function(this1,ny) {
	return this1.set_y(ny);
};
tannus_geom__$Point_Point_$Impl_$.get_z = function(this1) {
	return this1.get_z();
};
tannus_geom__$Point_Point_$Impl_$.set_z = function(this1,nz) {
	return this1.set_z(nz);
};
tannus_geom__$Point_Point_$Impl_$.get_ix = function(this1) {
	return tannus_math_TMath.i(this1.get_x());
};
tannus_geom__$Point_Point_$Impl_$.set_ix = function(this1,nix) {
	return tannus_math_TMath.i(this1.set_x(nix));
};
tannus_geom__$Point_Point_$Impl_$.get_iy = function(this1) {
	return tannus_math_TMath.i(this1.get_y());
};
tannus_geom__$Point_Point_$Impl_$.set_iy = function(this1,niy) {
	return tannus_math_TMath.i(this1.set_y(niy));
};
tannus_geom__$Point_Point_$Impl_$.get_iz = function(this1) {
	return tannus_math_TMath.i(this1.get_z());
};
tannus_geom__$Point_Point_$Impl_$.set_iz = function(this1,niz) {
	return tannus_math_TMath.i(this1.set_z(niz));
};
tannus_geom__$Point_Point_$Impl_$.get_d = function(this1) {
	return this1.distanceFrom(new tannus_geom_TPoint(0,0,0));
};
tannus_geom__$Point_Point_$Impl_$.transform = function(this1,m) {
	return m.transformPoint(this1.clone());
};
tannus_geom__$Point_Point_$Impl_$.moveByPoint = function(this1,p) {
	return this1.moveByPoint(p);
};
tannus_geom__$Point_Point_$Impl_$.moveByFloat = function(this1,n) {
	return this1.moveByFloat(n);
};
tannus_geom__$Point_Point_$Impl_$.moveByInt = function(this1,n) {
	return this1.moveByFloat(n);
};
tannus_geom__$Point_Point_$Impl_$.plusPoint = function(this1,other) {
	return this1.plusPoint(other);
};
tannus_geom__$Point_Point_$Impl_$.plusFloat = function(this1,n) {
	return this1.plusFloat(n);
};
tannus_geom__$Point_Point_$Impl_$.plusInt = function(this1,n) {
	return this1.plusFloat(n);
};
tannus_geom__$Point_Point_$Impl_$.iminusPoint = function(this1,p) {
	return this1.iminusPoint(p);
};
tannus_geom__$Point_Point_$Impl_$.iminusFloat = function(this1,n) {
	return this1.iminusFloat(n);
};
tannus_geom__$Point_Point_$Impl_$.minusPoint = function(this1,p) {
	return this1.minusPoint(p);
};
tannus_geom__$Point_Point_$Impl_$.minusFloat = function(this1,n) {
	return this1.minusFloat(n);
};
tannus_geom__$Point_Point_$Impl_$.minusInt = function(this1,n) {
	return this1.minusFloat(n);
};
tannus_geom__$Point_Point_$Impl_$.dividePoint = function(this1,p) {
	return this1.dividePoint(p);
};
tannus_geom__$Point_Point_$Impl_$.divideFloat = function(this1,d) {
	return this1.divideFloat(d);
};
tannus_geom__$Point_Point_$Impl_$.multPoint = function(this1,p) {
	return this1.multPoint(p);
};
tannus_geom__$Point_Point_$Impl_$.multFloat = function(this1,n) {
	return this1.multFloat(n);
};
tannus_geom__$Point_Point_$Impl_$.negate = function(this1) {
	return this1.negate();
};
tannus_geom__$Point_Point_$Impl_$.greaterThan = function(this1,other) {
	return this1.distanceFrom(new tannus_geom_TPoint(0,0,0)) > other.distanceFrom(new tannus_geom_TPoint(0,0,0));
};
tannus_geom__$Point_Point_$Impl_$.lessThan = function(this1,other) {
	return !(this1.distanceFrom(new tannus_geom_TPoint(0,0,0)) > other.distanceFrom(new tannus_geom_TPoint(0,0,0)));
};
tannus_geom__$Point_Point_$Impl_$.equals = function(this1,p) {
	return this1.equals(p);
};
tannus_geom__$Point_Point_$Impl_$.nequals = function(this1,p) {
	return this1.nequals(p);
};
tannus_geom__$Point_Point_$Impl_$.vectorize = function(this1,r) {
	var x;
	var what = this1.get_x();
	x = tannus_math__$Percent_Percent_$Impl_$.percent(what,r.width);
	var y;
	var what1 = this1.get_y();
	y = tannus_math__$Percent_Percent_$Impl_$.percent(what1,r.height);
	return new tannus_geom_TPoint(x,y,0);
};
tannus_geom__$Point_Point_$Impl_$.devectorize = function(this1,r) {
	var px;
	var f = this1.get_x();
	px = f;
	var py;
	var f1 = this1.get_y();
	py = f1;
	return new tannus_geom_TPoint(r.width * (px / 100),r.height * (py / 100),0);
};
tannus_geom__$Point_Point_$Impl_$.toString = function(this1) {
	return this1.toString();
};
tannus_geom__$Point_Point_$Impl_$.toArray = function(this1) {
	return this1.toArray();
};
tannus_geom__$Point_Point_$Impl_$.fromFloatArray = function(a) {
	return tannus_geom_TPoint.fromFloatArray(a);
};
tannus_geom__$Point_Point_$Impl_$.fromIntArray = function(a) {
	return tannus_geom_TPoint.fromFloatArray(a);
};
tannus_geom__$Point_Point_$Impl_$.perc = function(what,of) {
	return tannus_math__$Percent_Percent_$Impl_$.percent(what,of);
};
tannus_geom__$Point_Point_$Impl_$.createLinked = function(x,y,z) {
	return new tannus_geom_LinkedPoint(x,y,z);
};
tannus_geom__$Point_Point_$Impl_$.createLinkedFromPointRef = function(p) {
	var x = new tannus_io__$Pointer_Ref(function() {
		var this1 = p();
		return this1.get_x();
	},function(v) {
		var this2 = p();
		return this2.set_x(v);
	});
	var y = new tannus_io__$Pointer_Ref(function() {
		var this3 = p();
		return this3.get_y();
	},function(v1) {
		var this4 = p();
		return this4.set_y(v1);
	});
	var z = new tannus_io__$Pointer_Ref(function() {
		var this5 = p();
		return this5.get_z();
	},function(v2) {
		var this6 = p();
		return this6.set_z(v2);
	});
	return new tannus_geom_LinkedPoint(x,y,z);
};
var tannus_geom_TPoint = function(x,y,z) {
	this._x = x;
	this._y = y;
	this._z = z;
};
$hxClasses["tannus.geom.TPoint"] = tannus_geom_TPoint;
tannus_geom_TPoint.__name__ = ["tannus","geom","TPoint"];
tannus_geom_TPoint.__interfaces__ = [tannus_ds_Comparable];
tannus_geom_TPoint.fromFloatArray = function(a) {
	var ma = a;
	return new tannus_geom_TPoint((function($this) {
		var $r;
		var this1 = ma[0];
		$r = this1 != null?this1:0;
		return $r;
	}(this)),(function($this) {
		var $r;
		var this2 = ma[1];
		$r = this2 != null?this2:0;
		return $r;
	}(this)),(function($this) {
		var $r;
		var this3 = ma[2];
		$r = this3 != null?this3:0;
		return $r;
	}(this)));
};
tannus_geom_TPoint.prototype = {
	angleTo: function(other) {
		var v = tannus_math_TMath.angleBetween(this.get_x(),this.get_y(),other.get_x(),other.get_y());
		return new tannus_geom_CAngle(v);
	}
	,distanceFrom: function(other) {
		return Math.sqrt(Math.pow(Math.abs(this.get_x() - other.get_x()),2) + Math.pow(Math.abs(this.get_y() - other.get_y()),2));
	}
	,copyFrom: function(p) {
		this.set_x(p.get_x());
		this.set_y(p.get_y());
		this.set_z(p.get_z());
	}
	,plusPoint: function(other) {
		var x = this.get_x() + other.get_x();
		var y = this.get_y() + other.get_y();
		var z = this.get_z() + other.get_z();
		return new tannus_geom_TPoint(x,y,z);
	}
	,plusFloat: function(n) {
		var x = this.get_x() + n;
		var y = this.get_y() + n;
		var z = this.get_z() + n;
		return new tannus_geom_TPoint(x,y,z);
	}
	,moveByPoint: function(other) {
		var _g = this;
		_g.set_x(_g.get_x() + other.get_x());
		var _g1 = this;
		_g1.set_y(_g1.get_y() + other.get_y());
		var _g2 = this;
		_g2.set_z(_g2.get_z() + other.get_z());
		return this;
	}
	,moveByFloat: function(n) {
		var _g = this;
		_g.set_x(_g.get_x() + n);
		var _g1 = this;
		_g1.set_y(_g1.get_y() + n);
		var _g2 = this;
		_g2.set_z(_g2.get_z() + n);
		return this;
	}
	,minusPoint: function(other) {
		var x = this.get_x() - other.get_x();
		var y = this.get_y() - other.get_y();
		var z = this.get_z() - other.get_z();
		return new tannus_geom_TPoint(x,y,z);
	}
	,minusFloat: function(n) {
		var x = this.get_x() - n;
		var y = this.get_y() - n;
		var z = this.get_z() - n;
		return new tannus_geom_TPoint(x,y,z);
	}
	,iminusPoint: function(other) {
		this.moveByPoint(other.negate());
		return this;
	}
	,iminusFloat: function(n) {
		this.moveByFloat(-n);
		return this;
	}
	,dividePoint: function(d) {
		var x = this.get_x() / d.get_x();
		var y = this.get_y() / d.get_y();
		var z;
		if(this.get_z() != 0) z = this.get_z() / d.get_z(); else z = 0;
		return new tannus_geom_TPoint(x,y,z);
	}
	,divideFloat: function(f) {
		var x = this.get_x() / f;
		var y = this.get_y() / f;
		var z;
		if(this.get_z() != 0) z = this.get_z() / f; else z = 0;
		return new tannus_geom_TPoint(x,y,z);
	}
	,multPoint: function(p) {
		var x = this.get_x() * p.get_x();
		var y = this.get_y() * p.get_y();
		var z = this.get_z() * p.get_z();
		return new tannus_geom_TPoint(x,y,z);
	}
	,multFloat: function(n) {
		var x = this.get_x() * n;
		var y = this.get_y() * n;
		var z = this.get_z() * n;
		return new tannus_geom_TPoint(x,y,z);
	}
	,negate: function() {
		return this.multFloat(-1);
	}
	,clone: function() {
		var x = this.get_x();
		var y = this.get_y();
		var z = this.get_z();
		return new tannus_geom_TPoint(x,y,z);
	}
	,clamp: function() {
		this.set_x(tannus_math_TMath.i(this.get_x()));
		this.set_y(tannus_math_TMath.i(this.get_y()));
		this.set_z(tannus_math_TMath.i(this.get_z()));
	}
	,clamped: function() {
		var x = tannus_math_TMath.i(this.get_x());
		var y = tannus_math_TMath.i(this.get_y());
		var z = tannus_math_TMath.i(this.get_z());
		return new tannus_geom_TPoint(x,y,z);
	}
	,lerp: function(other,weight) {
		var x = tannus_math_TMath.lerp(this.get_x(),other.get_x(),weight);
		var y = tannus_math_TMath.lerp(this.get_y(),other.get_y(),weight);
		var z = tannus_math_TMath.lerp(this.get_z(),other.get_z(),weight);
		return new tannus_geom_TPoint(x,y,z);
	}
	,mutate: function(f) {
		var x = f(this.get_x());
		var y = f(this.get_y());
		var z = f(this.get_z());
		return new tannus_geom_TPoint(x,y,z);
	}
	,imutate: function(f) {
		this.set_x(f(this.get_x()));
		this.set_y(f(this.get_y()));
		this.set_z(f(this.get_z()));
		return this;
	}
	,equals: function(other) {
		return this.get_x() == other.get_x() && this.get_y() == other.get_y() && this.get_z() == other.get_z();
	}
	,nequals: function(other) {
		return !this.equals(other);
	}
	,toString: function() {
		return "Point(" + this.get_x() + ", " + this.get_y() + ", " + this.get_z() + ")";
	}
	,toArray: function() {
		return [this.get_x(),this.get_y(),this.get_z()];
	}
	,get_x: function() {
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,get_z: function() {
		return this._z;
	}
	,set_x: function(v) {
		return this._x = v;
	}
	,set_y: function(v) {
		return this._y = v;
	}
	,set_z: function(v) {
		return this._z = v;
	}
	,__class__: tannus_geom_TPoint
	,__properties__: {set_z:"set_z",get_z:"get_z",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var tannus_geom_LinkedPoint = function(x,y,z) {
	var _g = this;
	tannus_geom_TPoint.call(this,0,0,0);
	this.rx = x;
	this.ry = y;
	if(z != null) this.rz = z; else this.rz = new tannus_io__$Pointer_Ref(function() {
		return _g._z;
	},function(v) {
		return _g._z = v;
	});
};
$hxClasses["tannus.geom.LinkedPoint"] = tannus_geom_LinkedPoint;
tannus_geom_LinkedPoint.__name__ = ["tannus","geom","LinkedPoint"];
tannus_geom_LinkedPoint.__super__ = tannus_geom_TPoint;
tannus_geom_LinkedPoint.prototype = $extend(tannus_geom_TPoint.prototype,{
	get_x: function() {
		return this.rx.get();
	}
	,get_y: function() {
		return this.ry.get();
	}
	,get_z: function() {
		return this.rz.get();
	}
	,set_x: function(v) {
		return this.rx.set(v);
	}
	,set_y: function(v) {
		return this.ry.set(v);
	}
	,set_z: function(v) {
		return this.rz.set(v);
	}
	,__class__: tannus_geom_LinkedPoint
});
var tannus_geom__$Rectangle_Rectangle_$Impl_$ = {};
$hxClasses["tannus.geom._Rectangle.Rectangle_Impl_"] = tannus_geom__$Rectangle_Rectangle_$Impl_$;
tannus_geom__$Rectangle_Rectangle_$Impl_$.__name__ = ["tannus","geom","_Rectangle","Rectangle_Impl_"];
tannus_geom__$Rectangle_Rectangle_$Impl_$._new = function(_x,_y,_width,_height) {
	if(_height == null) _height = 0;
	if(_width == null) _width = 0;
	if(_y == null) _y = 0;
	if(_x == null) _x = 0;
	return new tannus_geom_CRectangle(_x,_y,_width,_height);
};
tannus_geom__$Rectangle_Rectangle_$Impl_$.eq = function(this1,o) {
	return this1.equals(o);
};
tannus_geom__$Rectangle_Rectangle_$Impl_$.floatDiv = function(this1,o) {
	return this1.divide(tannus_ds__$EitherType_EitherType_$Impl_$.fromL(o));
};
tannus_geom__$Rectangle_Rectangle_$Impl_$.rectDiv = function(this1,r) {
	return this1.divide((function($this) {
		var $r;
		var e = tannus_ds_Either.Right(r);
		$r = e;
		return $r;
	}(this)));
};
tannus_geom__$Rectangle_Rectangle_$Impl_$.fromArray = function(a) {
	switch(a.length) {
	case 2:
		var h = a[1];
		var w = a[0];
		return new tannus_geom_CRectangle(0,0,w,h);
	case 4:
		var h1 = a[3];
		var w1 = a[2];
		var y = a[1];
		var x = a[0];
		return new tannus_geom_CRectangle(x,y,w1,h1);
	default:
		return new tannus_geom_CRectangle(a[0],a[1],a[2],a[3]);
	}
};
var tannus_geom_Shape = function() { };
$hxClasses["tannus.geom.Shape"] = tannus_geom_Shape;
tannus_geom_Shape.__name__ = ["tannus","geom","Shape"];
tannus_geom_Shape.prototype = {
	__class__: tannus_geom_Shape
};
var tannus_geom_CRectangle = function(_x,_y,_width,_height) {
	if(_height == null) _height = 0;
	if(_width == null) _width = 0;
	if(_y == null) _y = 0;
	if(_x == null) _x = 0;
	this.x = _x;
	this.y = _y;
	this.z = 0;
	this.width = _width;
	this.height = _height;
	this.depth = 0;
};
$hxClasses["tannus.geom.CRectangle"] = tannus_geom_CRectangle;
tannus_geom_CRectangle.__name__ = ["tannus","geom","CRectangle"];
tannus_geom_CRectangle.__interfaces__ = [tannus_geom_Shape];
tannus_geom_CRectangle.perc = function(what,of) {
	return tannus_math__$Percent_Percent_$Impl_$.percent(what,of);
};
tannus_geom_CRectangle.prototype = {
	clone: function() {
		var r = new tannus_geom_CRectangle(this.x,this.y,this.width,this.height);
		r.z = this.z;
		r.depth = this.depth;
		return r;
	}
	,cloneFrom: function(other) {
		this.x = other.x;
		this.y = other.y;
		this.z = other.z;
		this.width = other.width;
		this.height = other.height;
		this.depth = other.depth;
	}
	,equals: function(other) {
		return this.x == other.x && this.y == other.y && this.z == other.z && this.width == other.width && this.height == other.height && this.depth == other.depth;
	}
	,divide: function(div) {
		{
			var _g = div;
			switch(_g[1]) {
			case 0:
				var f = _g[2];
				return new tannus_geom_CRectangle(this.x,this.y,this.width / f,this.height / f);
			case 1:
				var r = _g[2];
				return new tannus_geom_CRectangle(this.x,this.y,this.width / r.width,this.height / r.height);
			}
		}
	}
	,contains: function(ox,oy) {
		return ox > this.x && ox < this.x + this.width && (oy > this.y && oy < this.y + this.height);
	}
	,containsPoint: function(point) {
		return this.contains(point.get_x(),point.get_y());
	}
	,containsRect: function(o) {
		if(this.containsPoint(new tannus_geom_TPoint(o.x + o.width / 2,o.y + o.height / 2,0))) return true; else {
			var _g = 0;
			var _g1 = o.get_corners();
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				if(this.contains(p.get_x(),p.get_y())) return true;
			}
			return false;
		}
	}
	,enlarge: function(dw,dh) {
		var _g = this;
		_g.width = _g.width + dw;
		var _g1 = this;
		_g1.height = _g1.height + dh;
		this.x -= dw / 2;
		this.y -= dh / 2;
	}
	,move: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,scale: function(sw,sh) {
		if(sw != null) {
			var ratio = sw / this.width;
			this.width = sw;
			this.height = ratio * this.height;
		} else if(sh != null) {
			var ratio1 = sh / this.height;
			this.width = ratio1 * this.width;
			this.height = sh;
		} else return;
	}
	,scaled: function(sw,sh) {
		var s = this.clone();
		s.scale(sw,sh);
		return s;
	}
	,percentScale: function(amount) {
		this.width = this.width * (amount / 100);
		this.height = this.height * (amount / 100);
	}
	,percentScaled: function(amount) {
		return new tannus_geom_CRectangle(this.x,this.y,this.width * (amount / 100),this.height * (amount / 100));
	}
	,rotated: function(angle) {
		var rads = angle.v * Math.PI / 180;
		var nw = Math.abs(this.width * Math.sin(rads) + Math.abs(this.height * Math.cos(rads)));
		var nh = Math.abs(this.width * Math.cos(rads) + Math.abs(this.height * Math.sin(rads)));
		return new tannus_geom_CRectangle(this.x,this.y,nw,nh);
	}
	,split: function(count,vertical) {
		if(vertical == null) vertical = true;
		var all = [];
		if(vertical) {
			var ph = this.height / count;
			var _g = 0;
			while(_g < count) {
				var i = _g++;
				all.push(new tannus_geom_CRectangle(this.x,this.y + i * ph,this.width,ph));
			}
		} else {
			var pw = this.width / count;
			var _g1 = 0;
			while(_g1 < count) {
				var i1 = _g1++;
				all.push(new tannus_geom_CRectangle(this.x + i1 * pw,this.y,pw,this.height));
			}
		}
		return all;
	}
	,split2: function(count) {
		return this.split(count,true).map(function(r) {
			return r.split(count,false);
		});
	}
	,bisect: function(mode) {
		if(mode == null) mode = true;
		var pair = [];
		if(mode) {
			pair.push(new tannus_geom_Triangle(new tannus_geom_TPoint(this.x,this.y,0),new tannus_geom_TPoint(this.x + this.width,this.y,0),new tannus_geom_TPoint(this.x + this.width,this.y + this.height,0)));
			pair.push(new tannus_geom_Triangle(new tannus_geom_TPoint(this.x,this.y,0),new tannus_geom_TPoint(this.x,this.y + this.height,0),new tannus_geom_TPoint(this.x + this.width,this.y + this.height,0)));
		} else {
			pair.push(new tannus_geom_Triangle(new tannus_geom_TPoint(this.x + this.width,this.y,0),new tannus_geom_TPoint(this.x + this.width,this.y + this.height,0),new tannus_geom_TPoint(this.x,this.y + this.height,0)));
			pair.push(new tannus_geom_Triangle(new tannus_geom_TPoint(this.x,this.y + this.height,0),new tannus_geom_TPoint(this.x,this.y,0),new tannus_geom_TPoint(this.x + this.width,this.y,0)));
		}
		return pair;
	}
	,bisect2: function() {
		return tannus_ds_ArrayTools.flatten(this.bisect().map(function(t) {
			return t.bisect();
		}));
	}
	,crop: function(cr) {
		var corners = cr.get_corners().map($bind(this,this.containsPoint));
		if(Lambda.has(corners,false)) return null;
		var left = new tannus_geom_CRectangle(this.x,this.y,cr.x - this.x,this.height);
		var top = new tannus_geom_CRectangle(cr.x,this.y,cr.width,cr.y - this.y);
		var bottom = new tannus_geom_CRectangle(cr.x,cr.y + cr.height,cr.width,this.y + this.height);
		bottom.height -= bottom.y;
		var right = new tannus_geom_CRectangle(cr.x + cr.width,this.y,0,this.height);
		right.width = this.x + this.width - right.x;
		return { 'top' : top, 'left' : left, 'bottom' : bottom, 'right' : right};
	}
	,vectorize: function(r) {
		var pos;
		var this1 = new tannus_geom_TPoint(this.x,this.y,0);
		var x;
		var what = this1.get_x();
		x = tannus_math__$Percent_Percent_$Impl_$.percent(what,r.width);
		var y;
		var what1 = this1.get_y();
		y = tannus_math__$Percent_Percent_$Impl_$.percent(what1,r.height);
		pos = new tannus_geom_TPoint(x,y,0);
		var dim;
		var w = tannus_math__$Percent_Percent_$Impl_$.percent(this.width,r.width);
		var h = tannus_math__$Percent_Percent_$Impl_$.percent(this.height,r.height);
		dim = [w,h];
		var _x = pos.get_x();
		var _y = pos.get_y();
		return new tannus_geom_CRectangle(_x,_y,dim[0],dim[1]);
	}
	,devectorize: function(r) {
		var px = this.x;
		var py = this.y;
		var pw = this.width;
		var ph = this.height;
		return new tannus_geom_CRectangle(r.width * (px / 100),r.height * (py / 100),r.width * (pw / 100),r.height * (ph / 100));
	}
	,getVertices: function(precision) {
		var self = this;
		var verts;
		var v = [new tannus_geom_TPoint(self.x,self.y,0),new tannus_geom_TPoint(self.x + self.width,self.y,0),new tannus_geom_TPoint(self.x + self.width,self.y + self.height,0),new tannus_geom_TPoint(self.x,self.y + self.height,0)];
		verts = new tannus_geom_VertexArray(v);
		return verts;
	}
	,getCornerPointers: function() {
		var _g = this;
		var result = [new tannus_io__$Pointer_Ref(function() {
			return new tannus_geom_TPoint(_g.x,_g.y,0);
		},function(v) {
			return _g.set_topLeft(v);
		}),new tannus_io__$Pointer_Ref(function() {
			return new tannus_geom_TPoint(_g.x + _g.width,_g.y,0);
		},function(v1) {
			return _g.set_topRight(v1);
		}),new tannus_io__$Pointer_Ref(function() {
			return new tannus_geom_TPoint(_g.x,_g.y + _g.height,0);
		},function(v2) {
			return _g.set_bottomLeft(v2);
		}),new tannus_io__$Pointer_Ref(function() {
			return new tannus_geom_TPoint(_g.x + _g.width,_g.y + _g.height,0);
		},function(v3) {
			return _g.set_bottomRight(v3);
		})];
		return result;
	}
	,layers: function() {
		var results = [];
		var _g1 = Math.round(this.z);
		var _g = Math.round(this.z + this.depth);
		while(_g1 < _g) {
			var i = _g1++;
			var layer = new tannus_geom_CRectangle(this.x,this.y,this.width,this.height);
			layer.z = i;
			results.push(layer);
		}
		return results;
	}
	,toString: function() {
		return "Rectangle(" + this.x + ", " + this.y + ", " + this.width + ", " + this.height + ")";
	}
	,get_position: function() {
		return new tannus_geom_TPoint(this.x,this.y,this.z);
	}
	,set_position: function(np) {
		this.x = np.get_x();
		this.y = np.get_y();
		this.z = np.get_z();
		return new tannus_geom_TPoint(this.x,this.y,this.z);
	}
	,get_corners: function() {
		return [new tannus_geom_TPoint(this.x,this.y,0),new tannus_geom_TPoint(this.x + this.width,this.y,0),new tannus_geom_TPoint(this.x,this.y + this.height,0),new tannus_geom_TPoint(this.x + this.width,this.y + this.height,0)];
	}
	,get_area: function() {
		return this.width * this.height;
	}
	,get_centerX: function() {
		return this.x + this.width / 2;
	}
	,set_centerX: function(v) {
		return this.x = v - this.width / 2;
	}
	,get_centerY: function() {
		return this.y + this.height / 2;
	}
	,set_centerY: function(v) {
		return this.y = v - this.height / 2;
	}
	,get_center: function() {
		return new tannus_geom_TPoint(this.x + this.width / 2,this.y + this.height / 2,0);
	}
	,set_center: function(nc) {
		this.set_centerX(nc.get_x());
		this.set_centerY(nc.get_y());
		return nc;
	}
	,get_topRight: function() {
		return new tannus_geom_TPoint(this.x + this.width,this.y,0);
	}
	,set_topRight: function(v) {
		this.x = v.get_x() - this.width;
		this.y = v.get_y();
		return new tannus_geom_TPoint(this.x + this.width,this.y,0);
	}
	,get_topLeft: function() {
		return new tannus_geom_TPoint(this.x,this.y,0);
	}
	,set_topLeft: function(v) {
		this.x = v.get_x();
		this.y = v.get_y();
		return new tannus_geom_TPoint(this.x,this.y,0);
	}
	,get_bottomLeft: function() {
		return new tannus_geom_TPoint(this.x,this.y + this.height,0);
	}
	,set_bottomLeft: function(v) {
		this.x = v.get_x();
		this.y = v.get_y() - this.height;
		return new tannus_geom_TPoint(this.x,this.y + this.height,0);
	}
	,get_bottomRight: function() {
		return new tannus_geom_TPoint(this.x + this.width,this.y + this.height,0);
	}
	,set_bottomRight: function(v) {
		this.x = v.get_x() - this.width;
		this.y = v.get_y() - this.height;
		return new tannus_geom_TPoint(this.x + this.width,this.y + this.height,0);
	}
	,get_w: function() {
		return this.width;
	}
	,set_w: function(nw) {
		return this.width = nw;
	}
	,get_h: function() {
		return this.height;
	}
	,set_h: function(nh) {
		return this.height = nh;
	}
	,get_d: function() {
		return this.depth;
	}
	,set_d: function(nd) {
		return this.depth = nd;
	}
	,__class__: tannus_geom_CRectangle
	,__properties__: {set_d:"set_d",get_d:"get_d",set_h:"set_h",get_h:"get_h",set_w:"set_w",get_w:"get_w",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottomLeft:"set_bottomLeft",get_bottomLeft:"get_bottomLeft",set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_topRight:"set_topRight",get_topRight:"get_topRight",set_center:"set_center",get_center:"get_center",set_centerY:"set_centerY",get_centerY:"get_centerY",set_centerX:"set_centerX",get_centerX:"get_centerX",get_area:"get_area",get_corners:"get_corners",set_position:"set_position",get_position:"get_position"}
};
var tannus_geom_Triangle = function(x,y,z) {
	if(x != null) this.one = x; else this.one = new tannus_geom_TPoint(0,0,0);
	if(y != null) this.two = y; else this.two = new tannus_geom_TPoint(0,0,0);
	if(z != null) this.three = z; else this.three = new tannus_geom_TPoint(0,0,0);
};
$hxClasses["tannus.geom.Triangle"] = tannus_geom_Triangle;
tannus_geom_Triangle.__name__ = ["tannus","geom","Triangle"];
tannus_geom_Triangle.__interfaces__ = [tannus_geom_Shape];
tannus_geom_Triangle.prototype = {
	clone: function() {
		return new tannus_geom_Triangle(this.one.clone(),this.two.clone(),this.three.clone());
	}
	,bisect: function() {
		var mp = new tannus_geom_Line(this.one,this.three).get_mid();
		var l = new tannus_geom_Triangle(this.one,this.two,mp);
		var r = new tannus_geom_Triangle(mp,this.two,this.three);
		return [l,r];
	}
	,containsPoint: function(p) {
		var a = this.three.minusPoint(this.one);
		var b = this.two.minusPoint(this.one);
		var c = p.minusPoint(this.one);
		var dot_aa = a.get_x() * a.get_x() + a.get_y() * a.get_y();
		var dot_ab = a.get_x() * b.get_x() + a.get_y() * b.get_y();
		var dot_ac = a.get_x() * c.get_x() + a.get_y() * c.get_y();
		var dot_bb = b.get_x() * b.get_x() + b.get_y() * b.get_y();
		var dot_bc = b.get_x() * c.get_x() + b.get_y() * c.get_y();
		var invDenom = 1 / (dot_aa * dot_bb - dot_ab * dot_ab);
		var u = (dot_bb * dot_ac - dot_ab * dot_bc) * invDenom;
		var v = (dot_aa * dot_bc - dot_ab * dot_ac) * invDenom;
		return u >= 0 && v >= 0 && u + v < 1;
	}
	,dot: function(x,y) {
		return x.get_x() * y.get_x() + x.get_y() * y.get_y();
	}
	,vectorize: function(r) {
		var c = new tannus_geom_Triangle(this.one.clone(),this.two.clone(),this.three.clone());
		var this1 = this.one;
		var x;
		var what = this1.get_x();
		x = tannus_math__$Percent_Percent_$Impl_$.percent(what,r.width);
		var y;
		var what1 = this1.get_y();
		y = tannus_math__$Percent_Percent_$Impl_$.percent(what1,r.height);
		c.one = new tannus_geom_TPoint(x,y,0);
		var this2 = this.two;
		var x1;
		var what2 = this2.get_x();
		x1 = tannus_math__$Percent_Percent_$Impl_$.percent(what2,r.width);
		var y1;
		var what3 = this2.get_y();
		y1 = tannus_math__$Percent_Percent_$Impl_$.percent(what3,r.height);
		c.two = new tannus_geom_TPoint(x1,y1,0);
		var this3 = this.three;
		var x2;
		var what4 = this3.get_x();
		x2 = tannus_math__$Percent_Percent_$Impl_$.percent(what4,r.width);
		var y2;
		var what5 = this3.get_y();
		y2 = tannus_math__$Percent_Percent_$Impl_$.percent(what5,r.height);
		c.three = new tannus_geom_TPoint(x2,y2,0);
		return c;
	}
	,devectorize: function(r) {
		var c = new tannus_geom_Triangle(this.one.clone(),this.two.clone(),this.three.clone());
		c.one = tannus_geom__$Point_Point_$Impl_$.devectorize(this.one,r);
		c.two = tannus_geom__$Point_Point_$Impl_$.devectorize(this.two,r);
		c.three = tannus_geom__$Point_Point_$Impl_$.devectorize(this.three,r);
		return c;
	}
	,getVertices: function(precision) {
		{
			var lines = this.get_lines();
			var v = tannus_ds_ArrayTools.flatten((function($this) {
				var $r;
				var _g = [];
				{
					var _g1 = 0;
					while(_g1 < lines.length) {
						var l = lines[_g1];
						++_g1;
						_g.push([l.one,l.two]);
					}
				}
				$r = _g;
				return $r;
			}(this)));
			return new tannus_geom_VertexArray(v);
		}
	}
	,get_center: function() {
		var cx = (this.one.get_x() + this.two.get_x() + this.three.get_x()) / 3;
		var cy = (this.one.get_y() + this.two.get_y() + this.three.get_y()) / 3;
		var cz = (this.one.get_z() + this.two.get_z() + this.three.get_z()) / 3;
		return new tannus_geom_TPoint(cx,cy,cz);
	}
	,get_lines: function() {
		var la = [];
		la.push(new tannus_geom_Line(this.one,this.two));
		la.push(new tannus_geom_Line(this.two,this.three));
		la.push(new tannus_geom_Line(this.three,this.one));
		return la;
	}
	,get_points: function() {
		return [this.one,this.two,this.three];
	}
	,set_points: function(v) {
		this.one = v[0];
		this.two = v[1];
		this.three = v[2];
		return [this.one,this.two,this.three];
	}
	,__class__: tannus_geom_Triangle
	,__properties__: {set_points:"set_points",get_points:"get_points",get_lines:"get_lines",get_center:"get_center"}
};
var tannus_geom__$Velocity_Velocity_$Impl_$ = {};
$hxClasses["tannus.geom._Velocity.Velocity_Impl_"] = tannus_geom__$Velocity_Velocity_$Impl_$;
tannus_geom__$Velocity_Velocity_$Impl_$.__name__ = ["tannus","geom","_Velocity","Velocity_Impl_"];
tannus_geom__$Velocity_Velocity_$Impl_$._new = function(speed,angle) {
	return new tannus_geom_CVelocity(speed,angle);
};
tannus_geom__$Velocity_Velocity_$Impl_$.invert = function(this1) {
	return this1.invert();
};
tannus_geom__$Velocity_Velocity_$Impl_$.plus = function(this1,other) {
	return this1.plus(other);
};
tannus_geom__$Velocity_Velocity_$Impl_$.minus = function(this1,other) {
	return this1.minus(other);
};
tannus_geom__$Velocity_Velocity_$Impl_$.toPoint = function(this1) {
	return this1.get_vector();
};
tannus_geom__$Velocity_Velocity_$Impl_$.fromPoint = function(p) {
	return tannus_geom_CVelocity.fromPoint(p);
};
var tannus_geom_CVelocity = function(speed,angle) {
	this.speed = speed;
	this.angle = angle;
};
$hxClasses["tannus.geom.CVelocity"] = tannus_geom_CVelocity;
tannus_geom_CVelocity.__name__ = ["tannus","geom","CVelocity"];
tannus_geom_CVelocity.fromVector = function(x,y) {
	return tannus_geom_CVelocity.fromPoint(new tannus_geom_TPoint(x,y,0));
};
tannus_geom_CVelocity.fromPoint = function(p) {
	var vel;
	var angle = new tannus_geom_CAngle(0);
	vel = new tannus_geom_CVelocity(0,angle);
	vel.set_vector(p);
	return vel;
};
tannus_geom_CVelocity.prototype = {
	setVector: function(vx,vy) {
		var e = new tannus_geom_TPoint(vx,vy,0);
		var l = new tannus_geom_Line(new tannus_geom_TPoint(0,0,0),e);
		this.speed = l.one.distanceFrom(l.two);
		var v = tannus_math_TMath.angleBetween(0.0,0.0,e.get_x(),e.get_y());
		this.angle = new tannus_geom_CAngle(v);
	}
	,clone: function() {
		return new tannus_geom_CVelocity(this.speed,this.angle);
	}
	,invert: function() {
		return tannus_geom_CVelocity.fromVector(-(Math.cos(this.angle.v * Math.PI / 180) * this.speed),-(Math.sin(this.angle.v * Math.PI / 180) * this.speed));
	}
	,plus: function(other) {
		return tannus_geom_CVelocity.fromPoint((function($this) {
			var $r;
			var this1 = $this.get_vector();
			var other1 = other.get_vector();
			$r = this1.plusPoint(other1);
			return $r;
		}(this)));
	}
	,minus: function(other) {
		return tannus_geom_CVelocity.fromPoint((function($this) {
			var $r;
			var this1 = $this.get_vector();
			var p = other.get_vector();
			$r = this1.minusPoint(p);
			return $r;
		}(this)));
	}
	,lerp: function(other,weight) {
		var vec = this.get_vector().lerp(other.get_vector(),weight);
		return tannus_geom_CVelocity.fromPoint(vec);
	}
	,get_x: function() {
		return Math.cos(this.angle.v * Math.PI / 180) * this.speed;
	}
	,set_x: function(nx) {
		this.setVector(nx,Math.sin(this.angle.v * Math.PI / 180) * this.speed);
		return nx;
	}
	,get_y: function() {
		return Math.sin(this.angle.v * Math.PI / 180) * this.speed;
	}
	,set_y: function(ny) {
		this.setVector(Math.cos(this.angle.v * Math.PI / 180) * this.speed,ny);
		return ny;
	}
	,get_vector: function() {
		var x = Math.cos(this.angle.v * Math.PI / 180) * this.speed;
		var y = Math.sin(this.angle.v * Math.PI / 180) * this.speed;
		return new tannus_geom_TPoint(x,y,0);
	}
	,set_vector: function(v) {
		this.setVector(v.get_x(),v.get_y());
		return this.get_vector();
	}
	,__class__: tannus_geom_CVelocity
	,__properties__: {set_vector:"set_vector",get_vector:"get_vector",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var tannus_geom_VertexArray = function(v) {
	this.set_data(v != null?v.slice():[]);
	this._lines = new tannus_ds_CPair(null,null);
	this._rect = null;
};
$hxClasses["tannus.geom.VertexArray"] = tannus_geom_VertexArray;
tannus_geom_VertexArray.__name__ = ["tannus","geom","VertexArray"];
tannus_geom_VertexArray.prototype = {
	resetCache: function() {
		this._lines = new tannus_ds_CPair(null,null);
		this._rect = null;
	}
	,get: function(i) {
		return this.data[i];
	}
	,set: function(i,p) {
		this.data[i] = p.clone();
		this.resetCache();
		return this.get(i);
	}
	,toImmutable: function(p) {
		if(!js_Boot.__instanceof(p,tannus_geom_ImmutablePoint)) {
			var np = new tannus_geom_ImmutablePoint(p.get_x(),p.get_y(),p.get_z());
			return np;
		} else return p.clone();
	}
	,toMutable: function(p) {
		if(js_Boot.__instanceof(p,tannus_geom_ImmutablePoint)) {
			var np = new tannus_geom_TPoint(0,0,0);
			np.copyFrom(p);
			return np;
		} else return p;
	}
	,iterator: function() {
		return new tannus_geom_VerticeIterator(this);
	}
	,push: function(p) {
		this.resetCache();
		return this.data.push(p.clone());
	}
	,pop: function() {
		this.resetCache();
		return this.data.pop();
	}
	,unshift: function(p) {
		this.resetCache();
		this.data.unshift(p.clone());
		return this.data.length;
	}
	,shift: function() {
		this.resetCache();
		return this.data.shift();
	}
	,concat: function(other) {
		var v = this.data.concat(other.data);
		return new tannus_geom_VertexArray(v);
	}
	,append: function(other) {
		this.resetCache();
		this.set_data(this.data.concat(other.data));
		return new tannus_geom_VertexArray(this.data);
	}
	,clone: function() {
		return new tannus_geom_VertexArray(this.data);
	}
	,calculateLines: function(close) {
		if(close == null) close = false;
		var cached;
		if(close) cached = this._lines.right; else cached = this._lines.left;
		if(cached != null) return cached; else {
			var lines = [];
			var i = 0;
			var last = null;
			while(i < this.data.length) {
				var start = this.data[i];
				if(last == null) last = start; else {
					lines.push(new tannus_geom_Line(last,start));
					last = start;
				}
				i++;
			}
			if(close) {
				lines.push(new tannus_geom_Line(tannus_ds_ArrayTools.last(this.data),this.data[0]));
				this._lines.right = lines;
			} else this._lines.left = lines;
			return lines;
		}
	}
	,lineStack: function(close) {
		if(close == null) close = false;
		return new tannus_ds_Stack(this.calculateLines(close));
	}
	,pointStack: function() {
		var rdat = this.data.slice();
		rdat.reverse();
		return new tannus_ds_Stack(rdat);
	}
	,simplify: function(threshold) {
		if(threshold == null) threshold = 2;
		var lines = this.calculateLines();
		var ndata = [];
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			if(Math.round(line.one.distanceFrom(line.two)) <= threshold) ndata.push(line.one.lerp(line.two,0.5)); else {
				ndata.push(line.one);
				ndata.push(line.two);
			}
		}
		this.set_data(ndata);
	}
	,each: function(f) {
		var points = this.pointStack();
		while(!points.get_empty()) {
			var p = points.pop();
			f(p);
		}
		this.resetCache();
	}
	,apply: function(m) {
		this.set_data(this.data.map(function(p) {
			return m.transformPoint(p);
		}));
	}
	,map: function(f) {
		return new tannus_geom_VertexArray(this.data.map(f));
	}
	,getContainingRect: function() {
		if(this._rect == null) {
			var xr = tannus_math_TMath.minmax(this.data,function(p) {
				return p.get_x();
			});
			var yr = tannus_math_TMath.minmax(this.data,function(p1) {
				return p1.get_y();
			});
			this._rect = new tannus_geom_CRectangle(xr.min,yr.min,xr.max - xr.min,yr.max - yr.min);
		}
		return this._rect;
	}
	,get_length: function() {
		return this.data.length;
	}
	,get_lines: function() {
		return this.calculateLines(true);
	}
	,get_rect: function() {
		return this.getContainingRect();
	}
	,get_first: function() {
		return this.get(0);
	}
	,get_last: function() {
		return this.get(this.data.length - 1);
	}
	,set_data: function(plist) {
		if(plist != this.data) this.resetCache();
		return this.data = plist;
	}
	,__class__: tannus_geom_VertexArray
	,__properties__: {set_data:"set_data",get_last:"get_last",get_first:"get_first",get_rect:"get_rect",get_lines:"get_lines",get_length:"get_length"}
};
var tannus_geom_VerticeIterator = function(va) {
	this.array = va;
	this.iter = new IntIterator(0,this.array.data.length);
};
$hxClasses["tannus.geom.VerticeIterator"] = tannus_geom_VerticeIterator;
tannus_geom_VerticeIterator.__name__ = ["tannus","geom","VerticeIterator"];
tannus_geom_VerticeIterator.prototype = {
	hasNext: function() {
		return this.iter.hasNext();
	}
	,next: function() {
		return this.array.get(this.iter.min++);
	}
	,__class__: tannus_geom_VerticeIterator
};
var tannus_geom_ImmutablePoint = function(x,y,z) {
	tannus_geom_TPoint.call(this,x,y,z);
};
$hxClasses["tannus.geom.ImmutablePoint"] = tannus_geom_ImmutablePoint;
tannus_geom_ImmutablePoint.__name__ = ["tannus","geom","ImmutablePoint"];
tannus_geom_ImmutablePoint.__super__ = tannus_geom_TPoint;
tannus_geom_ImmutablePoint.prototype = $extend(tannus_geom_TPoint.prototype,{
	set_x: function(v) {
		return v;
	}
	,set_y: function(v) {
		return v;
	}
	,set_z: function(v) {
		return v;
	}
	,write: function(p) {
		this._x = p.get_x();
		this._y = p.get_y();
		this._z = p.get_z();
	}
	,__class__: tannus_geom_ImmutablePoint
});
var tannus_geom__$Vertices_Vertices_$Impl_$ = {};
$hxClasses["tannus.geom._Vertices.Vertices_Impl_"] = tannus_geom__$Vertices_Vertices_$Impl_$;
tannus_geom__$Vertices_Vertices_$Impl_$.__name__ = ["tannus","geom","_Vertices","Vertices_Impl_"];
tannus_geom__$Vertices_Vertices_$Impl_$._new = function(v) {
	return new tannus_geom_VertexArray(v);
};
tannus_geom__$Vertices_Vertices_$Impl_$.clone = function(this1) {
	return this1.clone();
};
tannus_geom__$Vertices_Vertices_$Impl_$.map = function(this1,f) {
	return this1.map(f);
};
tannus_geom__$Vertices_Vertices_$Impl_$.get = function(this1,i) {
	return this1.get(i);
};
tannus_geom__$Vertices_Vertices_$Impl_$.set = function(this1,i,p) {
	return this1.set(i,p);
};
tannus_geom__$Vertices_Vertices_$Impl_$.isum = function(this1,other) {
	return this1.append(other);
};
tannus_geom__$Vertices_Vertices_$Impl_$.sum = function(this1,other) {
	return this1.concat(other);
};
tannus_geom__$Vertices_Vertices_$Impl_$.toPoints = function(this1) {
	var _g = [];
	var $it0 = this1.iterator();
	while( $it0.hasNext() ) {
		var p = $it0.next();
		_g.push(p.clone());
	}
	return _g;
};
tannus_geom__$Vertices_Vertices_$Impl_$.fromPoints = function(list) {
	return new tannus_geom_VertexArray(list);
};
tannus_geom__$Vertices_Vertices_$Impl_$.toLines = function(this1) {
	return this1.calculateLines(true);
};
tannus_geom__$Vertices_Vertices_$Impl_$.fromLines = function(lines) {
	var v = tannus_ds_ArrayTools.flatten((function($this) {
		var $r;
		var _g = [];
		{
			var _g1 = 0;
			while(_g1 < lines.length) {
				var l = lines[_g1];
				++_g1;
				_g.push([l.one,l.two]);
			}
		}
		$r = _g;
		return $r;
	}(this)));
	return new tannus_geom_VertexArray(v);
};
tannus_geom__$Vertices_Vertices_$Impl_$.fromShape = function(s) {
	return s.getVertices();
};
var tannus_graphics__$Color_Color_$Impl_$ = {};
$hxClasses["tannus.graphics._Color.Color_Impl_"] = tannus_graphics__$Color_Color_$Impl_$;
tannus_graphics__$Color_Color_$Impl_$.__name__ = ["tannus","graphics","_Color","Color_Impl_"];
tannus_graphics__$Color_Color_$Impl_$._new = function(r,g,b,a) {
	if(b == null) b = 0;
	if(g == null) g = 0;
	if(r == null) r = 0;
	return new tannus_graphics__$Color_TColor(r,g,b,a);
};
tannus_graphics__$Color_Color_$Impl_$.clone = function(this1) {
	return this1.clone();
};
tannus_graphics__$Color_Color_$Impl_$.equals = function(this1,other) {
	return this1.equals(other);
};
tannus_graphics__$Color_Color_$Impl_$.invert = function(this1) {
	return this1.invert();
};
tannus_graphics__$Color_Color_$Impl_$.mix = function(this1,other,ratio) {
	return this1.mix(other,ratio);
};
tannus_graphics__$Color_Color_$Impl_$.lighten = function(this1,amount) {
	return this1.lighten(amount);
};
tannus_graphics__$Color_Color_$Impl_$.darken = function(this1,amount) {
	return this1.darken(amount);
};
tannus_graphics__$Color_Color_$Impl_$.toString = function(this1) {
	return this1.toString();
};
tannus_graphics__$Color_Color_$Impl_$.toByteArray = function(this1) {
	{
		var s = this1.toString();
		return tannus_io_impl_BrowserBinary.ofString(s);
	}
};
tannus_graphics__$Color_Color_$Impl_$.toInt = function(this1) {
	return this1.toInt();
};
tannus_graphics__$Color_Color_$Impl_$.fromInt = function(color) {
	return new tannus_graphics__$Color_TColor(color >> 16 & 255,color >> 8 & 255,color & 255,null);
};
tannus_graphics__$Color_Color_$Impl_$.fromString = function(s) {
	return tannus_graphics__$Color_TColor.fromString(s);
};
tannus_graphics__$Color_Color_$Impl_$._linked = function(r,g,b,a) {
	return new tannus_graphics_LinkedColor(r,g,b,a);
};
var tannus_graphics__$Color_TColor = $hx_exports.Color = function(r,g,b,a,noset) {
	if(noset == null) noset = false;
	if(b == null) b = 0;
	if(g == null) g = 0;
	if(r == null) r = 0;
	if(!noset) {
		this.set_red(r);
		this.set_green(g);
		this.set_blue(b);
		this.set_alpha(a);
	}
};
$hxClasses["tannus.graphics._Color.TColor"] = tannus_graphics__$Color_TColor;
tannus_graphics__$Color_TColor.__name__ = ["tannus","graphics","_Color","TColor"];
tannus_graphics__$Color_TColor.__interfaces__ = [tannus_ds_Comparable];
tannus_graphics__$Color_TColor.fromString = function(_s) {
	if(StringTools.startsWith(_s,"#")) {
		var s = StringTools.replace(_s,"#","");
		var _g = s.length;
		switch(_g) {
		case 6:
			var parts = [];
			var chars = s.split("");
			parts.push(chars.shift() + chars.shift());
			parts.push(chars.shift() + chars.shift());
			parts.push(chars.shift() + chars.shift());
			var channels = [];
			var _g1 = 0;
			while(_g1 < parts.length) {
				var part = parts[_g1];
				++_g1;
				var channel = Std.parseInt("0x" + part);
				channels.push(channel);
			}
			return new tannus_graphics__$Color_TColor(channels[0],channels[1],channels[2]);
		case 3:
			var parts1 = [];
			var chars1 = s.split("");
			parts1.push(chars1.shift());
			parts1.push(chars1.shift());
			parts1.push(chars1.shift());
			parts1 = parts1.map(function(c) {
				return c + c;
			});
			var channels1 = [];
			var _g11 = 0;
			while(_g11 < parts1.length) {
				var part1 = parts1[_g11];
				++_g11;
				var channel1 = Std.parseInt("0x" + part1);
				channels1.push(channel1);
			}
			return new tannus_graphics__$Color_TColor(channels1[0],channels1[1],channels1[2]);
		default:
			throw new js__$Boot_HaxeError("ColorError: Cannot create Color from \"" + s + "\"!");
		}
	} else {
		var s1 = _s;
		var rgb = new EReg("rgb\\( ?([0-9]+), ?([0-9]+), ?([0-9]+) ?\\)","i");
		var rgba = new EReg("rgba\\( ?([0-9]+), ?([0-9]+), ?([0-9]+), ?([0-9]+) ?\\)","i");
		if(rgb.match(s1)) {
			var data = tannus_io__$RegEx_RegEx_$Impl_$.matches(rgb,s1)[0];
			console.log(data);
			var i = (function(f) {
				return function(x) {
					return f(x);
				};
			})(Std.parseInt);
			return new tannus_graphics__$Color_TColor(i(data[1]),i(data[2]),i(data[3]));
		} else if(rgba.match(s1)) {
			var data1 = tannus_io__$RegEx_RegEx_$Impl_$.matches(rgba,s1)[0];
			console.log(data1);
			var i1 = (function(f1) {
				return function(x1) {
					return f1(x1);
				};
			})(Std.parseInt);
			return new tannus_graphics__$Color_TColor(i1(data1[1]),i1(data1[2]),i1(data1[3]),i1(data1[4]));
		} else throw new js__$Boot_HaxeError("ColorError: Cannot create Color from \"" + s1 + "\"!");
	}
};
tannus_graphics__$Color_TColor.fromInt = function(color) {
	return new tannus_graphics__$Color_TColor(color >> 16 & 255,color >> 8 & 255,color & 255,null);
};
tannus_graphics__$Color_TColor.hex = function(val,digits) {
	return StringTools.hex(val,digits);
};
tannus_graphics__$Color_TColor.prototype = {
	clone: function() {
		return new tannus_graphics__$Color_TColor(this.get_red(),this.get_green(),this.get_blue(),this.get_alpha());
	}
	,copyFrom: function(other) {
		this.set_red(other.get_red());
		this.set_green(other.get_green());
		this.set_blue(other.get_blue());
		this.set_alpha(other.get_alpha());
	}
	,equals: function(other) {
		return this.get_red() == other.get_red() && this.get_green() == other.get_green() && this.get_blue() == other.get_blue() && (this.get_alpha() != null?this.get_alpha() == other.get_alpha():true);
	}
	,mix: function(t,weight) {
		var ratio = weight / 100;
		return new tannus_graphics__$Color_TColor(Std["int"](tannus_math_TMath.lerp(this.get_red(),t.get_red(),ratio)),Std["int"](tannus_math_TMath.lerp(this.get_green(),t.get_green(),ratio)),Std["int"](tannus_math_TMath.lerp(this.get_blue(),t.get_blue(),ratio)),this.get_alpha());
	}
	,toString: function() {
		if(this.get_alpha() == null) {
			var out = "#";
			out += tannus_graphics__$Color_TColor.hex(this.get_red(),2);
			out += tannus_graphics__$Color_TColor.hex(this.get_green(),2);
			out += tannus_graphics__$Color_TColor.hex(this.get_blue(),2);
			return out;
		} else {
			var out1 = "rgba(" + this.get_red() + ", " + this.get_green() + ", " + this.get_blue() + ", " + tannus_math_TMath.roundFloat((function($this) {
				var $r;
				var this1 = tannus_math__$Percent_Percent_$Impl_$.percent($this.get_alpha(),255);
				$r = this1;
				return $r;
			}(this)) / 100,2) + ")";
			return out1;
		}
	}
	,toInt: function() {
		if(this.get_alpha() == null) return Math.round(this.get_red()) << 16 | Math.round(this.get_green()) << 8 | Math.round(this.get_blue()); else return Math.round(this.get_red()) << 16 | Math.round(this.get_green()) << 8 | Math.round(this.get_blue()) | Math.round(this.get_alpha()) << 24;
	}
	,lighten: function(amount) {
		var col = this.clone();
		var red = Std["int"](col.get_red() * (100 + amount) / 100);
		var green = Std["int"](col.get_green() * (100 + amount) / 100);
		var blue = Std["int"](col.get_blue() * (100 + amount) / 100);
		col.set_red(red);
		col.set_green(green);
		col.set_blue(blue);
		return col;
	}
	,darken: function(amount) {
		return this.lighten(0 - amount);
	}
	,invert: function() {
		return new tannus_graphics__$Color_TColor(255 - this.get_red(),255 - this.get_green(),255 - this.get_blue(),this.get_alpha());
	}
	,luminance: function() {
		return 0.2126 * this.get_red() + 0.7152 * this.get_green() + 0.0722 * this.get_blue();
	}
	,brightness: function() {
		return Std["int"]((this.get_red() * 299 + this.get_green() * 587 + this.get_blue() * 114) / 1000);
	}
	,toHsl: function() {
		var chan = [this.get_red(),this.get_green(),this.get_blue()].map(function(item) {
			return item / 255.0;
		});
		var r = chan[0];
		var g = chan[1];
		var b = chan[2];
		var cmax = tannus_ds_ArrayTools.max(chan,function(n) {
			return n;
		});
		var cmin = tannus_ds_ArrayTools.min(chan,function(n1) {
			return n1;
		});
		var l = (cmax + cmin) / 2;
		var h;
		var s;
		if(cmax == cmin) h = s = 0; else {
			var d = cmax - cmin;
			if(d > 0.5) s = d / (2 - cmax - cmin); else s = d / (cmax + cmin);
			if(cmax == r) h = (g - b) / d + (g < b?6:0); else if(cmax == g) h = (b - r) / d + 2; else if(cmax == b) h = (r - g) / d + 4; else h = 0;
			h /= 6;
		}
		return { 'hue' : h, 'saturation' : s, 'lightness' : l};
	}
	,getXYZ: function() {
		var vals = [this.get_red(),this.get_green(),this.get_blue()].map(function(item) {
			return item / 255;
		});
		vals = vals.map(function(item1) {
			if(item1 > 0.04045) return Math.pow((item1 + 0.0555) / 1.055,2.4); else return item1 / 12.92;
		});
		vals = vals.map(function(item2) {
			return item2 * 100;
		});
		var r = vals[0];
		var g = vals[1];
		var b = vals[2];
		var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
		var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
		var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
		return new tannus_geom_TPoint(x,y,z);
	}
	,getLab: function() {
		var p = this.getXYZ();
		var vals = [p.get_x() / 95.047,p.get_y() / 100,p.get_z() / 108.883];
		vals = vals.map(function(item) {
			if(item > 0.008856) return Math.pow(item,0.333333333333333315); else return 7.787 * item + 0.137931034482758619;
		});
		var l = 116 * vals[1] - 16;
		var a = 500 * (vals[0] - vals[1]);
		var b = 200 * (vals[1] - vals[2]);
		return { 'l' : l, 'a' : a, 'b' : b};
	}
	,cie1994: function(other) {
		var x = this.getLab();
		var y = other.getLab();
		var k2 = 0.015;
		var k1 = 0.045;
		var kl = 1;
		var kh = 1;
		var kc = 1;
		var c1 = Math.sqrt(x.a * x.a + x.b * x.b);
		var c2 = Math.sqrt(y.a * y.a + y.b * y.b);
		var sh = 1 + k2 * c1;
		var sc = 1 + k1 * c1;
		var sl = 1;
		var da = x.a - y.a;
		var db = x.b - y.b;
		var dc = c1 - c2;
		var dl = x.l - y.l;
		var dh = Math.sqrt(Math.pow(da,2) + Math.pow(db,2) + Math.pow(dc,2));
		return Math.sqrt(Math.pow(dl / (kl * sl),2) + Math.pow(dc / (kc * sc),2) + Math.pow(dh / (kh * sh),2)) / 10;
	}
	,greyscale: function() {
		var gray = this.clone();
		var avg = Std["int"](tannus_math_TMath.average([gray.get_red(),gray.get_green(),gray.get_blue()]));
		gray.set_channels([avg,avg,avg]);
		return gray;
	}
	,bound: function(n,max) {
		if(Math.abs(n - max) < 0.000001) return 1;
		return n % max / (max + 0.0) | 0;
	}
	,get_red: function() {
		return this._red;
	}
	,set_red: function(v) {
		return v < 0?this._red = 0:v > 255?this._red = 255:this._red = v;
	}
	,get_green: function() {
		return this._green;
	}
	,set_green: function(v) {
		return v < 0?this._green = 0:v > 255?this._green = 255:this._green = v;
	}
	,get_blue: function() {
		return this._blue;
	}
	,set_blue: function(v) {
		return v < 0?this._blue = 0:v > 255?this._blue = 255:this._blue = v;
	}
	,get_alpha: function() {
		return this._alpha;
	}
	,set_alpha: function(v) {
		return v != null?v < 0?this._alpha = 0:v > 255?this._alpha = 255:this._alpha = v:this._alpha = null;
	}
	,get_channels: function() {
		return [this.get_red(),this.get_green(),this.get_blue()];
	}
	,set_channels: function(v) {
		this.set_red(v[0]);
		this.set_green(v[1]);
		this.set_blue(v[2]);
		return [this.get_red(),this.get_green(),this.get_blue()];
	}
	,__class__: tannus_graphics__$Color_TColor
	,__properties__: {set_channels:"set_channels",get_channels:"get_channels",set_alpha:"set_alpha",get_alpha:"get_alpha",set_blue:"set_blue",get_blue:"get_blue",set_green:"set_green",get_green:"get_green",set_red:"set_red",get_red:"get_red"}
};
var tannus_graphics_LinkedColor = function(r,g,b,a) {
	tannus_graphics__$Color_TColor.call(this,0,0,0,null,true);
	this._a = (function() {
		var _v = null;
		return new tannus_io__$Pointer_Ref(function() {
			return _v;
		},function(v) {
			return _v = v;
		});
	})();
	this._r = r;
	this._g = g;
	this._b = b;
	if(a != null) this._a = a;
};
$hxClasses["tannus.graphics.LinkedColor"] = tannus_graphics_LinkedColor;
tannus_graphics_LinkedColor.__name__ = ["tannus","graphics","LinkedColor"];
tannus_graphics_LinkedColor.__super__ = tannus_graphics__$Color_TColor;
tannus_graphics_LinkedColor.prototype = $extend(tannus_graphics__$Color_TColor.prototype,{
	get_red: function() {
		return this._r.get();
	}
	,set_red: function(v) {
		return this._r.set(v < 0?0:v > 255?255:v);
	}
	,get_green: function() {
		return this._g.get();
	}
	,set_green: function(v) {
		return this._g.set(v < 0?0:v > 255?255:v);
	}
	,get_blue: function() {
		return this._b.get();
	}
	,set_blue: function(v) {
		return this._b.set(v < 0?0:v > 255?255:v);
	}
	,get_alpha: function() {
		return this._a.get();
	}
	,set_alpha: function(v) {
		return this._a.set(v < 0?0:v > 255?255:v);
	}
	,__class__: tannus_graphics_LinkedColor
});
var tannus_html__$ElAttributes_ElAttributes_$Impl_$ = {};
$hxClasses["tannus.html._ElAttributes.ElAttributes_Impl_"] = tannus_html__$ElAttributes_ElAttributes_$Impl_$;
tannus_html__$ElAttributes_ElAttributes_$Impl_$.__name__ = ["tannus","html","_ElAttributes","ElAttributes_Impl_"];
tannus_html__$ElAttributes_ElAttributes_$Impl_$.__properties__ = {get_el:"get_el",get_elem:"get_elem"}
tannus_html__$ElAttributes_ElAttributes_$Impl_$._new = function(ref) {
	return ref;
};
tannus_html__$ElAttributes_ElAttributes_$Impl_$.reference = function(this1,name) {
	return tannus_html_ElAttr.fromAttr(((function($this) {
		var $r;
		var this2 = this1();
		$r = this2.get(0);
		return $r;
	}(this))).attributes.getNamedItem(name));
};
tannus_html__$ElAttributes_ElAttributes_$Impl_$.get = function(this1,name) {
	return this1().attr(name);
};
tannus_html__$ElAttributes_ElAttributes_$Impl_$.set = function(this1,name,value) {
	this1().attr(name,Std.string(value));
	return tannus_html__$ElAttributes_ElAttributes_$Impl_$.get(this1,name);
};
tannus_html__$ElAttributes_ElAttributes_$Impl_$.remove = function(this1,name) {
	var had = ((function($this) {
		var $r;
		var this2 = this1();
		$r = this2.get(0);
		return $r;
	}(this))).hasAttribute(name);
	this1().removeAttr(name);
	return had;
};
tannus_html__$ElAttributes_ElAttributes_$Impl_$.exists = function(this1,name) {
	return ((function($this) {
		var $r;
		var this2 = this1();
		$r = this2.get(0);
		return $r;
	}(this))).hasAttribute(name);
};
tannus_html__$ElAttributes_ElAttributes_$Impl_$.iterator = function(this1) {
	return new tannus_html_ElAttrIter(this1);
};
tannus_html__$ElAttributes_ElAttributes_$Impl_$.names = function(this1) {
	return new tannus_html_ElAttrNameIter(this1);
};
tannus_html__$ElAttributes_ElAttributes_$Impl_$.writeObject = function(this1,o) {
	var _g = 0;
	var _g1;
	var this2 = o;
	_g1 = Reflect.fields(this2).map(function(k) {
		return { 'name' : k, 'value' : Reflect.getProperty(this2,k)};
	});
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		var this3 = this1();
		var value = Std.string(p.value);
		this3.attr(p.name,value);
		value;
	}
};
tannus_html__$ElAttributes_ElAttributes_$Impl_$.toObject = function(this1) {
	var o = { };
	var list;
	list = ((function($this) {
		var $r;
		var this2 = this1();
		$r = this2.get(0);
		return $r;
	}(this))).attributes;
	var _g1 = 0;
	var _g = list.length;
	while(_g1 < _g) {
		var i = _g1++;
		var p = list.item(i);
		var key = p.name;
		Reflect.setProperty(o,key,p.value);
		Reflect.getProperty(o,key);
	}
	return o;
};
tannus_html__$ElAttributes_ElAttributes_$Impl_$.get_elem = function(this1) {
	return this1();
};
tannus_html__$ElAttributes_ElAttributes_$Impl_$.get_el = function(this1) {
	var this2 = this1();
	return this2.get(0);
};
var tannus_html_ElAttrIter = function(e) {
	this.a = ((function($this) {
		var $r;
		var this1 = e();
		$r = this1.get(0);
		return $r;
	}(this))).attributes;
	this.i = new IntIterator(0,this.a.length);
};
$hxClasses["tannus.html.ElAttrIter"] = tannus_html_ElAttrIter;
tannus_html_ElAttrIter.__name__ = ["tannus","html","ElAttrIter"];
tannus_html_ElAttrIter.prototype = {
	hasNext: function() {
		return this.i.hasNext();
	}
	,next: function() {
		return tannus_html_ElAttr.fromAttr(this.a.item(this.i.min++));
	}
	,__class__: tannus_html_ElAttrIter
};
var tannus_html_ElAttrNameIter = function(e) {
	this.a = ((function($this) {
		var $r;
		var this1 = e();
		$r = this1.get(0);
		return $r;
	}(this))).attributes;
	this.i = new IntIterator(0,this.a.length);
};
$hxClasses["tannus.html.ElAttrNameIter"] = tannus_html_ElAttrNameIter;
tannus_html_ElAttrNameIter.__name__ = ["tannus","html","ElAttrNameIter"];
tannus_html_ElAttrNameIter.prototype = {
	hasNext: function() {
		return this.i.hasNext();
	}
	,next: function() {
		return this.a.item(this.i.min++).name;
	}
	,__class__: tannus_html_ElAttrNameIter
};
var tannus_html_ElAttr = function(n,v) {
	this.name = n;
	this.val = v;
};
$hxClasses["tannus.html.ElAttr"] = tannus_html_ElAttr;
tannus_html_ElAttr.__name__ = ["tannus","html","ElAttr"];
tannus_html_ElAttr.fromAttr = function(p) {
	return new tannus_html_ElAttr(p.name,new tannus_io__$Pointer_Ref(function() {
		return p.value;
	},function(v) {
		return p.value = v;
	}));
};
tannus_html_ElAttr.prototype = {
	get: function() {
		return this.val.get();
	}
	,set: function(v) {
		return this.val.set(v);
	}
	,'delete': function() {
		this.val["delete"]();
	}
	,__class__: tannus_html_ElAttr
};
var tannus_html__$ElData_ElData_$Impl_$ = {};
$hxClasses["tannus.html._ElData.ElData_Impl_"] = tannus_html__$ElData_ElData_$Impl_$;
tannus_html__$ElData_ElData_$Impl_$.__name__ = ["tannus","html","_ElData","ElData_Impl_"];
tannus_html__$ElData_ElData_$Impl_$.__properties__ = {get_self:"get_self",get_data:"get_data",get_elem:"get_elem"}
tannus_html__$ElData_ElData_$Impl_$._new = function(ref) {
	return ref;
};
tannus_html__$ElData_ElData_$Impl_$.get = function(this1,key) {
	var this2 = this1().data();
	return Reflect.getProperty(this2,key);
};
tannus_html__$ElData_ElData_$Impl_$.set = function(this1,key,value) {
	var this2 = this1().data();
	Reflect.setProperty(this2,key,value);
	return Reflect.getProperty(this2,key);
};
tannus_html__$ElData_ElData_$Impl_$.exists = function(this1,key) {
	return (function($this) {
		var $r;
		var this2 = this1().data();
		$r = Reflect.getProperty(this2,key);
		return $r;
	}(this)) != null;
};
tannus_html__$ElData_ElData_$Impl_$.reference = function(this1,key) {
	return new tannus_io__$Pointer_Ref(function() {
		return (function($this) {
			var $r;
			var this2 = this1().data();
			$r = Reflect.getProperty(this2,key);
			return $r;
		}(this));
	},function(v) {
		var this3 = this1().data();
		Reflect.setProperty(this3,key,v);
		return Reflect.getProperty(this3,key);
	});
};
tannus_html__$ElData_ElData_$Impl_$.get_elem = function(this1) {
	return this1();
};
tannus_html__$ElData_ElData_$Impl_$.get_data = function(this1) {
	return this1().data();
};
tannus_html__$ElData_ElData_$Impl_$.get_self = function(this1) {
	return this1;
};
var tannus_html__$ElStyles_ElStyles_$Impl_$ = {};
$hxClasses["tannus.html._ElStyles.ElStyles_Impl_"] = tannus_html__$ElStyles_ElStyles_$Impl_$;
tannus_html__$ElStyles_ElStyles_$Impl_$.__name__ = ["tannus","html","_ElStyles","ElStyles_Impl_"];
tannus_html__$ElStyles_ElStyles_$Impl_$._new = function(e) {
	return new tannus_html_CElStyles(e);
};
tannus_html__$ElStyles_ElStyles_$Impl_$.get = function(this1,name) {
	return this1.get(name);
};
tannus_html__$ElStyles_ElStyles_$Impl_$.set = function(this1,name,value) {
	return this1.set(name,value);
};
tannus_html__$ElStyles_ElStyles_$Impl_$.fromElement = function(e) {
	return tannus_html__$Element_Element_$Impl_$.get_style(e);
};
tannus_html__$ElStyles_ElStyles_$Impl_$.create = function(elem) {
	var key = "__tannus_styles";
	var css = Reflect.getProperty(elem,key);
	if(css == null) Reflect.setProperty(elem,key,css = new tannus_html_CElStyles(elem));
	return css;
};
var tannus_html_CElStyles = function(e) {
	this.elem = e;
};
$hxClasses["tannus.html.CElStyles"] = tannus_html_CElStyles;
tannus_html_CElStyles.__name__ = ["tannus","html","CElStyles"];
tannus_html_CElStyles.prototype = {
	get: function(name) {
		return this.elem.css(name);
	}
	,set: function(name,value) {
		this.elem.css(name,value);
		return this.get(name);
	}
	,exists: function(name) {
		var this1 = this.get(name);
		return this1 != null;
	}
	,reference: function(name) {
		var g = (function(f,a1) {
			return function() {
				return f(a1);
			};
		})($bind(this,this.get),name);
		var s = (function(f1,a11) {
			return function(a2) {
				return f1(a11,a2);
			};
		})($bind(this,this.set),name);
		return new tannus_io__$Pointer_Ref(g,s);
	}
	,values: function(name) {
		var s = this.get(name);
		if(s != null) return new tannus_css_vals_Lexer().parse(tannus_io_impl_BrowserBinary.ofString(s)); else return [];
	}
	,pluck: function(names) {
		var o = { };
		var _g = 0;
		while(_g < names.length) {
			var name = names[_g];
			++_g;
			var value = this.get(name);
			Reflect.setProperty(o,name,value);
			Reflect.getProperty(o,name);
		}
		return o;
	}
	,gets: function(names) {
		return this.pluck(names);
	}
	,applyMap: function(map) {
		var $it0 = map.keys();
		while( $it0.hasNext() ) {
			var name = $it0.next();
			this.set(name,Std.string(__map_reserved[name] != null?map.getReserved(name):map.h[name]));
		}
	}
	,applyDict: function(map) {
		this.applyMap((js_Boot.__cast(map , tannus_ds_dict_StringDict)).m);
	}
	,applyObject: function(o) {
		var _g = 0;
		var _g1 = Reflect.fields(o);
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			this.set(name,Std.string(Reflect.getProperty(o,name)));
		}
	}
	,writeObject: function(o) {
		this.applyObject(o);
	}
	,write: function(o) {
		this.applyObject(o);
	}
	,copy: function(keys,other) {
		this.applyObject(other.pluck(keys));
	}
	,__class__: tannus_html_CElStyles
};
var tannus_html__$Element_Element_$Impl_$ = {};
$hxClasses["tannus.html._Element.Element_Impl_"] = tannus_html__$Element_Element_$Impl_$;
tannus_html__$Element_Element_$Impl_$.__name__ = ["tannus","html","_Element","Element_Impl_"];
tannus_html__$Element_Element_$Impl_$.__properties__ = {set_position:"set_position",get_position:"get_position",set_rectangle:"set_rectangle",get_rectangle:"get_rectangle",set_h:"set_h",get_h:"get_h",set_w:"set_w",get_w:"get_w",set_z:"set_z",get_z:"get_z",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_classes:"set_classes",get_classes:"get_classes",get_edata:"get_edata",get_attributes:"get_attributes",get_style:"get_style",set_text:"set_text",get_text:"get_text",get_removed:"get_removed",get_exists:"get_exists",get_self:"get_self"}
tannus_html__$Element_Element_$Impl_$._new = function(jq) {
	return js.JQuery(jq);
};
tannus_html__$Element_Element_$Impl_$.get_self = function(this1) {
	return js.JQuery(this1);
};
tannus_html__$Element_Element_$Impl_$.get_exists = function(this1) {
	return this1.length > 0;
};
tannus_html__$Element_Element_$Impl_$.get_removed = function(this1) {
	return this1.closest("body").length < 1;
};
tannus_html__$Element_Element_$Impl_$.get_text = function(this1) {
	return this1.text();
};
tannus_html__$Element_Element_$Impl_$.set_text = function(this1,nt) {
	this1.text(nt);
	return this1.text();
};
tannus_html__$Element_Element_$Impl_$.get_style = function(this1) {
	return tannus_html__$ElStyles_ElStyles_$Impl_$.create(this1);
};
tannus_html__$Element_Element_$Impl_$._cs = function(this1,args) {
	var r = tannus_html__$Element_Element_$Impl_$.cs(this1,args[0],args[1]);
	return r != null?r:"";
};
tannus_html__$Element_Element_$Impl_$.get_attributes = function(this1) {
	return function() {
		return this1;
	};
};
tannus_html__$Element_Element_$Impl_$.get_edata = function(this1) {
	return function() {
		return this1;
	};
};
tannus_html__$Element_Element_$Impl_$.get_classes = function(this1) {
	return ((function($this) {
		var $r;
		var this2 = this1.attr("class");
		$r = this2 != null?this2:"";
		return $r;
	}(this))).split(" ");
};
tannus_html__$Element_Element_$Impl_$.set_classes = function(this1,cl) {
	var value = cl.join(" ");
	this1.attr("class",value);
	value;
	return ((function($this) {
		var $r;
		var this2 = this1.attr("class");
		$r = this2 != null?this2:"";
		return $r;
	}(this))).split(" ");
};
tannus_html__$Element_Element_$Impl_$.cs = function(this1,k,v) {
	if(v != null) this1.css(k,v);
	return this1.css(k);
};
tannus_html__$Element_Element_$Impl_$.get_x = function(this1) {
	return this1.offset().left;
};
tannus_html__$Element_Element_$Impl_$.set_x = function(this1,nx) {
	tannus_html__$Element_Element_$Impl_$.cs(this1,"left",nx + "px");
	return this1.offset().left;
};
tannus_html__$Element_Element_$Impl_$.get_y = function(this1) {
	return this1.offset().top;
};
tannus_html__$Element_Element_$Impl_$.set_y = function(this1,ny) {
	tannus_html__$Element_Element_$Impl_$.cs(this1,"top",ny + "px");
	return this1.offset().top;
};
tannus_html__$Element_Element_$Impl_$.get_z = function(this1) {
	var msz = this1.css("z-index");
	var mz = parseFloat(msz != null?msz:"0");
	if(isNaN(mz)) mz = 0;
	return mz;
};
tannus_html__$Element_Element_$Impl_$.set_z = function(this1,nz) {
	tannus_html__$Element_Element_$Impl_$.cs(this1,"z-index",nz + "");
	var msz = this1.css("z-index");
	var mz = parseFloat(msz != null?msz:"0");
	if(isNaN(mz)) mz = 0;
	return mz;
};
tannus_html__$Element_Element_$Impl_$.get_w = function(this1) {
	return this1.width() + 0.0;
};
tannus_html__$Element_Element_$Impl_$.set_w = function(this1,v) {
	this1.width(Math.round(v));
	return this1.width() + 0.0;
};
tannus_html__$Element_Element_$Impl_$.get_h = function(this1) {
	return this1.height() + 0.0;
};
tannus_html__$Element_Element_$Impl_$.set_h = function(this1,v) {
	this1.height(Math.round(v));
	return this1.height() + 0.0;
};
tannus_html__$Element_Element_$Impl_$.get_rectangle = function(this1) {
	var r;
	var _x = this1.offset().left;
	var _y = this1.offset().top;
	var _width = this1.width() + 0.0;
	var _height = this1.height() + 0.0;
	r = new tannus_geom_CRectangle(_x,_y,_width,_height);
	var msz = this1.css("z-index");
	var mz = parseFloat(msz != null?msz:"0");
	if(isNaN(mz)) mz = 0;
	r.z = mz;
	return r;
};
tannus_html__$Element_Element_$Impl_$.set_rectangle = function(this1,nr) {
	tannus_html__$Element_Element_$Impl_$.cs(this1,"left",nr.x + "px");
	this1.offset().left;
	tannus_html__$Element_Element_$Impl_$.cs(this1,"top",nr.y + "px");
	this1.offset().top;
	tannus_html__$Element_Element_$Impl_$.cs(this1,"z-index",nr.z + "");
	var msz = this1.css("z-index");
	var mz = parseFloat(msz != null?msz:"0");
	if(isNaN(mz)) mz = 0;
	mz;
	this1.width(Math.round(nr.width));
	this1.width() + 0.0;
	this1.height(Math.round(nr.height));
	this1.height() + 0.0;
	return tannus_html__$Element_Element_$Impl_$.get_rectangle(this1);
};
tannus_html__$Element_Element_$Impl_$.get_position = function(this1) {
	var x = this1.offset().left;
	var y = this1.offset().top;
	var z;
	var msz = this1.css("z-index");
	var mz = parseFloat(msz != null?msz:"0");
	if(isNaN(mz)) mz = 0;
	z = mz;
	return new tannus_geom_TPoint(x,y,z);
};
tannus_html__$Element_Element_$Impl_$.set_position = function(this1,np) {
	var nx = np.get_x();
	tannus_html__$Element_Element_$Impl_$.cs(this1,"left",nx + "px");
	this1.offset().left;
	var ny = np.get_y();
	tannus_html__$Element_Element_$Impl_$.cs(this1,"top",ny + "px");
	this1.offset().top;
	var nz = np.get_z();
	tannus_html__$Element_Element_$Impl_$.cs(this1,"z-index",nz + "");
	var msz = this1.css("z-index");
	var mz = parseFloat(msz != null?msz:"0");
	if(isNaN(mz)) mz = 0;
	mz;
	var x = this1.offset().left;
	var y = this1.offset().top;
	var z;
	var msz1 = this1.css("z-index");
	var mz1 = parseFloat(msz1 != null?msz1:"0");
	if(isNaN(mz1)) mz1 = 0;
	z = mz1;
	return new tannus_geom_TPoint(x,y,z);
};
tannus_html__$Element_Element_$Impl_$.get = function(this1,key) {
	return this1.attr(key);
};
tannus_html__$Element_Element_$Impl_$.set = function(this1,key,value) {
	this1.attr(key,value);
	return value;
};
tannus_html__$Element_Element_$Impl_$.plugin = function(this1,name,$arguments) {
	if($arguments == null) $arguments = [];
	return Reflect.callMethod(this1,Reflect.getProperty(this1,name),$arguments);
};
tannus_html__$Element_Element_$Impl_$.method = function(this1,name) {
	var _f = Reflect.makeVarArgs((function(f,a1) {
		return function(a2) {
			return f(a1,a2);
		};
	})((function(_e) {
		return function(func,args) {
			return func.apply(_e,args);
		};
	})(this1),Reflect.getProperty(this1,name)));
	return _f;
};
tannus_html__$Element_Element_$Impl_$.index = function(this1,child,value) {
	if(value == null) {
		var _this = tannus_html_JSTools.arrayify(this1.get(0).children);
		var x = child.get(0);
		return HxOverrides.indexOf(_this,x,0);
	} else {
		child.insertBefore(tannus_html_JSTools.arrayify(this1.get(0).children)[value]);
		return tannus_html__$Element_Element_$Impl_$.index(this1,child);
	}
};
tannus_html__$Element_Element_$Impl_$.at = function(this1,index) {
	return this1.get(index);
};
tannus_html__$Element_Element_$Impl_$.contains = function(this1,other) {
	return other.closest(this1).length > 0;
};
tannus_html__$Element_Element_$Impl_$.containedBy = function(this1,other) {
	return this1.closest(other).length > 0;
};
tannus_html__$Element_Element_$Impl_$.appendElementable = function(this1,child) {
	return this1.append(child.toElement());
};
tannus_html__$Element_Element_$Impl_$.prependElementable = function(this1,child) {
	return this1.prepend(child.toElement());
};
tannus_html__$Element_Element_$Impl_$.afterElementable = function(this1,child) {
	return this1.after(child.toElement());
};
tannus_html__$Element_Element_$Impl_$.beforeElementable = function(this1,child) {
	return this1.before(child.toElement());
};
tannus_html__$Element_Element_$Impl_$.addToElement = function(this1,other) {
	return this1.add(other);
};
tannus_html__$Element_Element_$Impl_$.addToElementArray = function(this1,other) {
	var els = ((function($this) {
		var $r;
		var _g = [];
		{
			var _g2 = 0;
			var _g1 = this1.length;
			while(_g2 < _g1) {
				var i = _g2++;
				_g.push((function($this) {
					var $r;
					var jq = this1.get(i);
					$r = js.JQuery(jq);
					return $r;
				}($this)));
			}
		}
		$r = _g;
		return $r;
	}(this))).concat(other);
	var el = js.JQuery("");
	var _g3 = 0;
	while(_g3 < els.length) {
		var e = els[_g3];
		++_g3;
		el = el.add(e);
	}
	return el;
};
tannus_html__$Element_Element_$Impl_$.addToElementable = function(this1,other) {
	return this1.add(other.toElement());
};
tannus_html__$Element_Element_$Impl_$.subFromElement = function(this1,other) {
	var this2 = js.JQuery(this1);
	var els;
	var _g3 = [];
	var _g21 = 0;
	var _g11 = other.length;
	while(_g21 < _g11) {
		var i1 = _g21++;
		_g3.push((function($this) {
			var $r;
			var jq1 = other.get(i1);
			$r = js.JQuery(jq1);
			return $r;
		}(this)));
	}
	els = _g3;
	var res = ((function($this) {
		var $r;
		var _g = [];
		{
			var _g2 = 0;
			var _g1 = this2.length;
			while(_g2 < _g1) {
				var i = _g2++;
				_g.push((function($this) {
					var $r;
					var jq = this2.get(i);
					$r = js.JQuery(jq);
					return $r;
				}($this)));
			}
		}
		$r = _g;
		return $r;
	}(this))).filter(function(e) {
		return Lambda.has(els,e);
	});
	var result = js.JQuery("");
	var _g4 = 0;
	while(_g4 < res.length) {
		var e1 = res[_g4];
		++_g4;
		result = result.add(e1);
	}
	return result;
};
tannus_html__$Element_Element_$Impl_$.subFromElementArray = function(this1,els) {
	var res = ((function($this) {
		var $r;
		var _g = [];
		{
			var _g2 = 0;
			var _g1 = this1.length;
			while(_g2 < _g1) {
				var i = _g2++;
				_g.push((function($this) {
					var $r;
					var jq = this1.get(i);
					$r = js.JQuery(jq);
					return $r;
				}($this)));
			}
		}
		$r = _g;
		return $r;
	}(this))).filter(function(e) {
		return Lambda.has(els,e);
	});
	var result = js.JQuery("");
	var _g3 = 0;
	while(_g3 < res.length) {
		var e1 = res[_g3];
		++_g3;
		result = result.add(e1);
	}
	return result;
};
tannus_html__$Element_Element_$Impl_$.toArray = function(this1) {
	var _g = [];
	var _g2 = 0;
	var _g1 = this1.length;
	while(_g2 < _g1) {
		var i = _g2++;
		_g.push((function($this) {
			var $r;
			var jq = this1.get(i);
			$r = js.JQuery(jq);
			return $r;
		}(this)));
	}
	return _g;
};
tannus_html__$Element_Element_$Impl_$.fromArray = function(els) {
	var el = js.JQuery("");
	var _g = 0;
	while(_g < els.length) {
		var e = els[_g];
		++_g;
		el = el.add(e);
	}
	return el;
};
tannus_html__$Element_Element_$Impl_$.toHTMLElement = function(this1) {
	return this1.get(0);
};
tannus_html__$Element_Element_$Impl_$.fromString = function(q) {
	return js.JQuery(q);
};
tannus_html__$Element_Element_$Impl_$.fromDOMElement = function(el) {
	return js.JQuery(el);
};
tannus_html__$Element_Element_$Impl_$.extend = function(name,f) {
	var ext = function(args) {
		var self = this;
		args.unshift(self);
		return f.apply(self,args);
	};
	var this1;
	this1 = (function($this) {
		var $r;
		var d;
		{
			var this2;
			this2 = (function($this) {
				var $r;
				var d1;
				d1 = (function($this) {
					var $r;
					var this3 = window;
					$r = this3.jQuery;
					return $r;
				}($this));
				$r = tannus_ds_CObj.create(d1);
				return $r;
			}($this));
			d = Reflect.getProperty(this2.o,"fn");
		}
		$r = tannus_ds_CObj.create(d);
		return $r;
	}(this));
	var val = Reflect.makeVarArgs(ext);
	this1.set(name,val);
};
tannus_html__$Element_Element_$Impl_$.jq = function() {
	var this1 = window;
	return this1.jQuery;
};
tannus_html__$Element_Element_$Impl_$.jqo = function() {
	var d;
	d = (function($this) {
		var $r;
		var this1 = window;
		$r = this1.jQuery;
		return $r;
	}(this));
	return tannus_ds_CObj.create(d);
};
tannus_html__$Element_Element_$Impl_$.jqfn = function() {
	var d;
	var this1;
	this1 = (function($this) {
		var $r;
		var d1;
		d1 = (function($this) {
			var $r;
			var this2 = window;
			$r = this2.jQuery;
			return $r;
		}($this));
		$r = tannus_ds_CObj.create(d1);
		return $r;
	}(this));
	d = Reflect.getProperty(this1.o,"fn");
	return tannus_ds_CObj.create(d);
};
var tannus_html__$JSFunction_JSFunction_$Impl_$ = {};
$hxClasses["tannus.html._JSFunction.JSFunction_Impl_"] = tannus_html__$JSFunction_JSFunction_$Impl_$;
tannus_html__$JSFunction_JSFunction_$Impl_$.__name__ = ["tannus","html","_JSFunction","JSFunction_Impl_"];
tannus_html__$JSFunction_JSFunction_$Impl_$.__properties__ = {set_prototype:"set_prototype",get_prototype:"get_prototype"}
tannus_html__$JSFunction_JSFunction_$Impl_$._new = function(f) {
	return f;
};
tannus_html__$JSFunction_JSFunction_$Impl_$.apply = function(this1,o,args) {
	return this1.apply(o,args);
};
tannus_html__$JSFunction_JSFunction_$Impl_$.bind = function(this1,thisValue) {
	return this1.bind(thisValue);
};
tannus_html__$JSFunction_JSFunction_$Impl_$.get_prototype = function(this1) {
	return this1.prototype;
};
tannus_html__$JSFunction_JSFunction_$Impl_$.set_prototype = function(this1,v) {
	return this1.prototype = v;
};
var tannus_html_JSTools = function() { };
$hxClasses["tannus.html.JSTools"] = tannus_html_JSTools;
tannus_html_JSTools.__name__ = ["tannus","html","JSTools"];
tannus_html_JSTools.arrayify = function(o) {
	return Array.prototype.slice.call(o,0);
};
tannus_html_JSTools.defineGetter = function(o,name,value) {
	Reflect.getProperty(o,"__defineGetter__").call(o,name,value);
};
tannus_html_JSTools.defineSetter = function(o,name,value) {
	Reflect.getProperty(o,"__defineSetter__").call(o,name,value);
};
tannus_html_JSTools.definePointer = function(o,name,value) {
	Reflect.getProperty(o,"__defineGetter__").call(o,name,value.getter);
	Reflect.getProperty(o,"__defineSetter__").call(o,name,value.setter);
};
var tannus_html__$Win_Win_$Impl_$ = {};
$hxClasses["tannus.html._Win.Win_Impl_"] = tannus_html__$Win_Win_$Impl_$;
tannus_html__$Win_Win_$Impl_$.__name__ = ["tannus","html","_Win","Win_Impl_"];
tannus_html__$Win_Win_$Impl_$.__properties__ = {get_current:"get_current",get_document:"get_document",get_self:"get_self",get_viewport:"get_viewport"}
tannus_html__$Win_Win_$Impl_$._new = function(w) {
	return w != null?w:window;
};
tannus_html__$Win_Win_$Impl_$.onScroll = function(this1) {
	var sig = new tannus_io_Signal();
	var handlr = function(event) {
		var scroll = new tannus_geom_TPoint(this1.scrollX,this1.scrollY,0);
		sig.broadcast(scroll);
	};
	this1.addEventListener("scroll",handlr);
	sig.ondelete = function() {
		this1.removeEventListener("scroll",handlr);
	};
	return sig;
};
tannus_html__$Win_Win_$Impl_$.onResize = function(this1) {
	var sig = new tannus_io_Signal();
	var handlr = function(event) {
		var area = [this1.innerWidth,this1.innerHeight];
		sig.broadcast(area);
	};
	this1.addEventListener("resize",handlr);
	sig.ondelete = function() {
		this1.removeEventListener("resize",handlr);
	};
	return sig;
};
tannus_html__$Win_Win_$Impl_$.onKeydown = function(this1) {
	var sig = new tannus_io_Signal();
	var handle = function(event) {
		var mods = [];
		if(event.altKey) mods.push("alt");
		if(event.shiftKey) mods.push("shift");
		if(event.ctrlKey) mods.push("ctrl");
		var e = new tannus_events_KeyboardEvent("keydown",event.keyCode,mods);
		sig.broadcast(e);
	};
	var bod = this1.document.getElementsByTagName("body").item(0);
	bod.addEventListener("keydown",handle);
	sig.ondelete = function() {
		bod.removeEventListener("keydown",handle);
	};
	return sig;
};
tannus_html__$Win_Win_$Impl_$.onBeforeUnload = function(this1) {
	var sig = new tannus_io_Signal();
	var handlr = function(event) {
		sig.call(new Date().getTime());
	};
	this1.addEventListener("beforeunload",handlr);
	sig.ondelete = function() {
		this1.removeEventListener("beforeunload",handlr);
	};
	return sig;
};
tannus_html__$Win_Win_$Impl_$.requestFileSystem = function(this1,size,cb) {
	var self = tannus_ds_CObj.create(this1);
	var rfs = Reflect.getProperty(self.o,"requestFileSystem");
	if(rfs == null) rfs = Reflect.getProperty(self.o,"webkitRequestFileSystem");
	rfs(Reflect.getProperty(self.o,"TEMPORARY"),size,cb);
};
tannus_html__$Win_Win_$Impl_$.expose = function(this1,name,value) {
	var self = tannus_ds_CObj.create(this1);
	var val = value;
	self.set(name,val);
};
tannus_html__$Win_Win_$Impl_$.exposeGetter = function(this1,name,get) {
	this1.__defineGetter__(name,get);
};
tannus_html__$Win_Win_$Impl_$.exposeSetter = function(this1,name,set) {
	this1.__defineSetter__(name,set);
};
tannus_html__$Win_Win_$Impl_$.exposeRef = function(this1,name,ref) {
	this1.__defineGetter__(name,ref.getter);
	this1.__defineSetter__(name,ref.setter);
};
tannus_html__$Win_Win_$Impl_$.get = function(this1,name) {
	return this1[name];
};
tannus_html__$Win_Win_$Impl_$.get_viewport = function(this1) {
	return new tannus_geom_CRectangle(this1.scrollX,this1.scrollY,this1.innerWidth,this1.innerHeight);
};
tannus_html__$Win_Win_$Impl_$.get_self = function(this1) {
	return tannus_ds_CObj.create(this1);
};
tannus_html__$Win_Win_$Impl_$.get_document = function(this1) {
	return this1.document;
};
tannus_html__$Win_Win_$Impl_$.get_current = function() {
	return window;
};
var tannus_html_fs_FilePromise = function(efunc) {
	this.entry = null;
	var _g = this;
	tannus_ds_Promise.call(this,function(accept,reject) {
		efunc(function(e) {
			_g.entry = e;
			_g.gotentry.broadcast(_g.entry);
			var f = e;
			f.file(function(me) {
				accept(new tannus_html_fs_WebFile(me));
			},function(error) {
				reject(error);
			});
		});
	},true);
	this.gotentry = new tannus_io_Signal();
	this.make();
};
$hxClasses["tannus.html.fs.FilePromise"] = tannus_html_fs_FilePromise;
tannus_html_fs_FilePromise.__name__ = ["tannus","html","fs","FilePromise"];
tannus_html_fs_FilePromise.__super__ = tannus_ds_Promise;
tannus_html_fs_FilePromise.prototype = $extend(tannus_ds_Promise.prototype,{
	writer: function() {
		var _g = this;
		return new tannus_ds_Promise(function(accept,reject) {
			_g.useEntry(function(entry) {
				tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$.writer(entry).then(accept).unless(reject);
			});
		},null);
	}
	,write: function(data) {
		this.writer().then(function(writer) {
			writer.write(data);
		});
		return this;
	}
	,read: function(pos,len) {
		if(pos == null) pos = 0;
		var _g = this;
		return new tannus_ds_Promise(function(accept,reject) {
			_g.then(function(file) {
				file.read(pos,len).then(accept).unless(reject);
			});
			_g.unless(function(error) {
				reject(error);
			});
		},null);
	}
	,useEntry: function(action) {
		if(this.entry == null) this.gotentry.listen(action,true); else action(this.entry);
	}
	,__class__: tannus_html_fs_FilePromise
});
var tannus_html_fs_Macros = function() { };
$hxClasses["tannus.html.fs.Macros"] = tannus_html_fs_Macros;
tannus_html_fs_Macros.__name__ = ["tannus","html","fs","Macros"];
var tannus_html_fs__$WebDirectoryEntry_WebDirectoryEntry_$Impl_$ = {};
$hxClasses["tannus.html.fs._WebDirectoryEntry.WebDirectoryEntry_Impl_"] = tannus_html_fs__$WebDirectoryEntry_WebDirectoryEntry_$Impl_$;
tannus_html_fs__$WebDirectoryEntry_WebDirectoryEntry_$Impl_$.__name__ = ["tannus","html","fs","_WebDirectoryEntry","WebDirectoryEntry_Impl_"];
tannus_html_fs__$WebDirectoryEntry_WebDirectoryEntry_$Impl_$._new = function(dir) {
	return dir;
};
tannus_html_fs__$WebDirectoryEntry_WebDirectoryEntry_$Impl_$.exists = function(this1,path) {
	return new tannus_ds_Promise(function(accept,reject) {
		this1.getFile(path,null,function(entry) {
			accept(true);
		},function(error) {
			var _g = error.code;
			switch(_g) {
			case 1:
				accept(false);
				break;
			default:
				reject(error);
			}
		});
	},null).bool();
};
tannus_html_fs__$WebDirectoryEntry_WebDirectoryEntry_$Impl_$.createFile = function(this1,path) {
	return new tannus_ds_Promise((function(f,a1,a2) {
		return function(a3,a4) {
			f(a1,a2,a3,a4);
		};
	})($bind(this1,this1.getFile),path,{ 'create' : true}));
};
tannus_html_fs__$WebDirectoryEntry_WebDirectoryEntry_$Impl_$.getFile = function(this1,path) {
	return new tannus_ds_Promise((function(f,a1,a2) {
		return function(a3,a4) {
			f(a1,a2,a3,a4);
		};
	})($bind(this1,this1.getFile),path,{ }));
};
tannus_html_fs__$WebDirectoryEntry_WebDirectoryEntry_$Impl_$.createDirectory = function(this1,path) {
	return new tannus_ds_Promise((function(f,a1,a2) {
		return function(a3,a4) {
			f(a1,a2,a3,a4);
		};
	})($bind(this1,this1.getDirectory),path,{ 'create' : true}));
};
tannus_html_fs__$WebDirectoryEntry_WebDirectoryEntry_$Impl_$.getDirectory = function(this1,path) {
	return new tannus_ds_Promise((function(f,a1,a2) {
		return function(a3,a4) {
			f(a1,a2,a3,a4);
		};
	})($bind(this1,this1.getDirectory),path,{ }));
};
tannus_html_fs__$WebDirectoryEntry_WebDirectoryEntry_$Impl_$.readEntries = function(this1) {
	return tannus_html_fs__$WebDirectoryReader_WebDirectoryReader_$Impl_$.read(this1.createReader());
};
tannus_html_fs__$WebDirectoryEntry_WebDirectoryEntry_$Impl_$.walk = function(this1,cb,filter,step) {
	var all = [];
	tannus_html_fs__$WebDirectoryReader_WebDirectoryReader_$Impl_$.read(this1.createReader()).then(function(entries) {
		var stack = new tannus_ds_AsyncStack();
		var broken = false;
		var _g = 0;
		while(_g < entries.length) {
			var e = [entries[_g]];
			++_g;
			stack.under((function(e) {
				return function(done) {
					if(broken) {
						done();
						return;
					}
					if(e[0].isFile) {
						var add = filter == null || filter(e[0]);
						if(add) {
							var wfe = e[0];
							if(step != null) {
								var continu = step(wfe);
								if(!continu) broken = true;
							}
							all.push(wfe);
						}
						done();
					} else {
						var _f = e[0];
						tannus_html_fs__$WebDirectoryEntry_WebDirectoryEntry_$Impl_$.walk(_f,(function() {
							return function(sub) {
								all = all.concat(sub);
								done();
							};
						})(),filter);
					}
				};
			})(e));
		}
		stack.run(function() {
			cb(all);
		});
	});
};
var tannus_html_fs__$WebDirectoryReader_WebDirectoryReader_$Impl_$ = {};
$hxClasses["tannus.html.fs._WebDirectoryReader.WebDirectoryReader_Impl_"] = tannus_html_fs__$WebDirectoryReader_WebDirectoryReader_$Impl_$;
tannus_html_fs__$WebDirectoryReader_WebDirectoryReader_$Impl_$.__name__ = ["tannus","html","fs","_WebDirectoryReader","WebDirectoryReader_Impl_"];
tannus_html_fs__$WebDirectoryReader_WebDirectoryReader_$Impl_$._new = function(r) {
	return r;
};
tannus_html_fs__$WebDirectoryReader_WebDirectoryReader_$Impl_$.read = function(this1) {
	var me = this1;
	return new tannus_ds_Promise(function(accept,reject) {
		var on_results = function(entries) {
			accept(tannus_html_fs__$WebDirectoryReader_WebDirectoryReader_$Impl_$.__manip(me,entries));
		};
		var on_error = function(error) {
			reject(error);
		};
		this1.readEntries(on_results,on_error);
	},null).array();
};
tannus_html_fs__$WebDirectoryReader_WebDirectoryReader_$Impl_$.__manip = function(this1,entries) {
	return entries;
};
var tannus_html_fs_WebFile = function(f) {
	this._objectUrl = null;
	this.file = f;
	this.file.lastModified;
};
$hxClasses["tannus.html.fs.WebFile"] = tannus_html_fs_WebFile;
tannus_html_fs_WebFile.__name__ = ["tannus","html","fs","WebFile"];
tannus_html_fs_WebFile.prototype = {
	slice: function(start,end,contentType) {
		return this.file.slice(start,end,contentType);
	}
	,read: function(pos,len) {
		if(pos == null) pos = 0;
		var _g = this;
		return new tannus_ds_Promise(function(accept,reject) {
			if(len == null) len = _g.file.size;
			var reader = new FileReader();
			reader.onerror = function(error) {
				reject(error.target.error);
			};
			reader.onload = function(event) {
				var data = tannus_io_impl_BrowserBinary.ofData(event.target.result);
				accept(data);
			};
			if(pos == 0 && len == _g.file.size) reader.readAsArrayBuffer(_g.file); else reader.readAsArrayBuffer(_g.slice(pos,pos + len,_g.file.type));
		},null);
	}
	,createReader: function() {
		return new tannus_html_fs_WebFileReader(this);
	}
	,input: function() {
		return new tannus_html_fs_WebFileInput(this);
	}
	,getObjectURL: function() {
		if(this._objectUrl == null) {
			var w = window;
			var getter = (w.URL || w.webkitURL).createObjectURL.bind(w);
			this._objectUrl = getter(this.file);
		}
		return this._objectUrl;
	}
	,get_name: function() {
		return this.file.name;
	}
	,get_size: function() {
		return this.file.size;
	}
	,get_type: function() {
		return this.file.type;
	}
	,get_lastModified: function() {
		return this.file.lastModifiedDate;
	}
	,__class__: tannus_html_fs_WebFile
	,__properties__: {get_lastModified:"get_lastModified",get_type:"get_type",get_size:"get_size",get_name:"get_name"}
};
var tannus_html_fs_WebFileReader = function(f) {
	this.file = f;
	this.r = new FileReader();
	this.offset = 0;
};
$hxClasses["tannus.html.fs.WebFileReader"] = tannus_html_fs_WebFileReader;
tannus_html_fs_WebFileReader.__name__ = ["tannus","html","fs","WebFileReader"];
tannus_html_fs_WebFileReader.prototype = {
	seek: function(pos) {
		return this.offset = tannus_math_TMath.clamp_Int(pos,0,this.file.file.size);
	}
	,read: function(size,provide,reject) {
		var _g = this;
		if(size == null) size = this.file.file.size - this.offset;
		size = tannus_math_TMath.min(size,this.file.file.size - this.offset);
		this.r.onload = function(event) {
			_g.offset += size;
			if(_g.offset == _g.file.file.size) _g.r = null;
			try {
				provide(tannus_io_impl_BrowserBinary.ofData(event.target.result));
			} catch( error ) {
				if (error instanceof js__$Boot_HaxeError) error = error.val;
				reject(error);
			}
		};
		this.r.onerror = (function(f) {
			return function(a1) {
				f(a1);
			};
		})(reject);
		this.r.readAsArrayBuffer(this.file.slice(this.offset,this.offset + size));
	}
	,__class__: tannus_html_fs_WebFileReader
};
var tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$ = {};
$hxClasses["tannus.html.fs._WebFileEntry.WebFileEntry_Impl_"] = tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$;
tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$.__name__ = ["tannus","html","fs","_WebFileEntry","WebFileEntry_Impl_"];
tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$.__properties__ = {get_o:"get_o",get_fileSystem:"get_fileSystem"}
tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$._new = function(entry) {
	return entry;
};
tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$.get_fileSystem = function(this1) {
	return this1.filesystem;
};
tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$.file = function(this1) {
	return new tannus_html_fs_FilePromise(function(give) {
		give(this1);
	});
};
tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$.getFile = function(this1,cb) {
	var self = this1;
	if(Object.prototype.hasOwnProperty.call(self,"_file")) cb(Reflect.getProperty(self,"_file")); else this1.file(function(f) {
		{
			Reflect.setProperty(self,"_file",f);
			Reflect.getProperty(self,"_file");
		}
		cb(f);
	},function(err) {
		throw new js__$Boot_HaxeError(err);
	});
};
tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$.size = function(this1) {
	return ((function($this) {
		var $r;
		var this2 = this1;
		$r = new tannus_html_fs_FilePromise(function(give) {
			give(this2);
		});
		return $r;
	}(this))).transform(function(f) {
		return f.file.size;
	});
};
tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$.type = function(this1) {
	return ((function($this) {
		var $r;
		var this2 = this1;
		$r = new tannus_html_fs_FilePromise(function(give) {
			give(this2);
		});
		return $r;
	}(this))).transform(function(f) {
		return f.file.type;
	}).string();
};
tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$.read = function(this1) {
	return new tannus_ds_Promise(function(accept,reject) {
		tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$.getFile(this1,function(file) {
			var reader = new FileReader();
			reader.onerror = function(error) {
				reject(error);
			};
			reader.onload = function(event) {
				var data = tannus_io_impl_BrowserBinary.ofData(event.target.result);
				accept(data);
			};
			reader.readAsArrayBuffer(file);
		});
	},null);
};
tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$.writer = function(this1) {
	return new tannus_ds_Promise(function(accept,reject) {
		tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$.createWriter(this1,function(writer) {
			accept(writer);
		},function(err) {
			reject(err);
		});
	},null);
};
tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$.createWriter = function(this1,onsuccess,onerror) {
	this1.createWriter(function(fw) {
		onsuccess(new tannus_html_fs_CWebFileWriter(fw));
	},onerror);
};
tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$.moveTo = function(this1,parent,name) {
	return new tannus_ds_Promise(function(accept,reject) {
		this1.moveTo(parent,name);
	},null);
};
tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$.copyTo = function(this1,parent,name) {
	return new tannus_ds_Promise(function(accept,reject) {
		this1.copyTo(parent,name);
	},null);
};
tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$.rename = function(this1,newname) {
	return new tannus_ds_Promise(function(accept,reject) {
		var pp;
		var this2 = this1;
		pp = new tannus_ds_Promise(function(accept1,reject1) {
			this2.getParent(function(parent) {
				if(parent.isDirectory) accept1(parent);
			},function(err) {
				reject1(err);
			});
		},null);
		pp.then(function(parent1) {
			tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$.moveTo(this1,parent1,newname).then(accept).unless(reject);
		});
		pp.unless(function(error) {
			reject(error);
		});
	},null);
};
tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$.remove = function(this1,cb) {
	this1.remove(cb);
};
tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$.getDirectory = function(this1) {
	return new tannus_ds_Promise(function(accept,reject) {
		this1.getParent(function(parent) {
			if(parent.isDirectory) accept(parent);
		},function(err) {
			reject(err);
		});
	},null);
};
tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$.get_o = function(this1) {
	return this1;
};
var tannus_html_fs_WebFileError = function(type,msg) {
	Error.call(this,msg);
	this.name = "FileSystemError";
	this.code = type;
};
$hxClasses["tannus.html.fs.WebFileError"] = tannus_html_fs_WebFileError;
tannus_html_fs_WebFileError.__name__ = ["tannus","html","fs","WebFileError"];
tannus_html_fs_WebFileError.__super__ = Error;
tannus_html_fs_WebFileError.prototype = $extend(Error.prototype,{
	__class__: tannus_html_fs_WebFileError
});
var tannus_io_Input = function() {
	this.__b = [];
	this.__eoi = false;
	this.opened = false;
	this.closed = false;
};
$hxClasses["tannus.io.Input"] = tannus_io_Input;
tannus_io_Input.__name__ = ["tannus","io","Input"];
tannus_io_Input.prototype = {
	read: function(provide,reject) {
		if(!this.opened) throw new js__$Boot_HaxeError("Error: ReadableStream must be opened (by calling the \"open\" method) before data can be read from it"); else if(this.closed) throw new js__$Boot_HaxeError("Error: Cannot read from a closed Stream");
		if(this.__b.length > 0) provide(this.__b.shift()); else {
			if(reject == null) reject = function(err) {
				throw new js__$Boot_HaxeError(err);
			};
			this.__get(function(chunk) {
				if(chunk == null) {
					var error = "No data available on ReadableStream";
					reject(error);
				} else provide(chunk);
			},function(error1) {
				reject(error1);
			});
		}
	}
	,__get: function(provide,reject) {
		provide(null);
	}
	,readAll: function(onchunk,onerror,oncomplete) {
		var _g = this;
		if(onchunk == null) onchunk = function(data) {
			null;
		};
		if(onerror == null) onerror = function(error) {
			throw new js__$Boot_HaxeError(error);
		};
		if(oncomplete == null) oncomplete = function() {
			null;
		};
		var step;
		var step1 = null;
		step1 = function(data1) {
			onchunk(data1);
			if(_g.__eoi) oncomplete(); else _g.read(step1,onerror);
		};
		step = step1;
		this.read(step,onerror);
	}
	,open: function(cb) {
		this.opened = true;
	}
	,close: function() {
		this.closed = true;
	}
	,pipe: function(o) {
		var onchunk = function(chunk) {
			o.write(chunk);
		};
		this.readAll(onchunk);
	}
	,buffer: function(d) {
		this.__b.push(d);
	}
	,endOfInput: function() {
		this.__eoi = true;
	}
	,get_eoi: function() {
		return this.__eoi;
	}
	,__class__: tannus_io_Input
	,__properties__: {get_eoi:"get_eoi"}
};
var tannus_io_ByteArrayInput = function() {
	tannus_io_Input.call(this);
	this.chunkSize = -1;
	this.__chunk = null;
};
$hxClasses["tannus.io.ByteArrayInput"] = tannus_io_ByteArrayInput;
tannus_io_ByteArrayInput.__name__ = ["tannus","io","ByteArrayInput"];
tannus_io_ByteArrayInput.__super__ = tannus_io_Input;
tannus_io_ByteArrayInput.prototype = $extend(tannus_io_Input.prototype,{
	read: function(provide,reject) {
		var _g = this;
		tannus_io_Input.prototype.read.call(this,function(d) {
			if(!(_g.__eoi && Lambda.empty(_g.__b)) && _g.chunkSize != -1 && d._length != _g.chunkSize) {
				if(_g.__chunk == null) {
					if(d._length > _g.chunkSize) {
						_g.__chunk = d.slice(0,_g.chunkSize);
						d = d.slice(_g.chunkSize);
						_g.buffer(d);
						provide(_g.__chunk);
						_g.__chunk = null;
					} else if(d._length < _g.chunkSize) _g.__chunk = d;
				} else if(_g.__chunk._length + d._length >= _g.chunkSize) {
					_g.__chunk = _g.__chunk.concat(d);
					provide(_g.__chunk.slice(0,_g.chunkSize));
					if(_g.__chunk._length == _g.chunkSize) _g.__chunk = null; else _g.__chunk = _g.__chunk.slice(_g.chunkSize);
				} else _g.__chunk = _g.__chunk.concat(d);
			} else provide(d);
		},reject);
	}
	,seek: function(offset,done) {
		if(done == null) done = function() {
			null;
		};
		this.__seek(offset,done);
	}
	,__seek: function(offset,done) {
		this.__position(offset);
		done();
	}
	,pipe: function(o) {
		if(js_Boot.__instanceof(o,tannus_io_ByteArrayOutput)) {
			var bo = o;
			bo.seek(this.__position());
			bo.truncate(this.__size());
		}
		tannus_io_Input.prototype.pipe.call(this,o);
	}
	,__size: function() {
		return -1;
	}
	,__position: function(v) {
		return -1;
	}
	,get_length: function() {
		return this.__size();
	}
	,get_position: function() {
		return this.__position();
	}
	,set_position: function(v) {
		return this.__position(v);
	}
	,__class__: tannus_io_ByteArrayInput
	,__properties__: $extend(tannus_io_Input.prototype.__properties__,{set_position:"set_position",get_position:"get_position",get_length:"get_length"})
});
var tannus_html_fs_WebFileInput = function(file) {
	this.offset = 0;
	tannus_io_ByteArrayInput.call(this);
	this.src = file;
	this.reader = new tannus_html_fs_WebFileReader(this.src);
	this.chunkSize = 524288;
};
$hxClasses["tannus.html.fs.WebFileInput"] = tannus_html_fs_WebFileInput;
tannus_html_fs_WebFileInput.__name__ = ["tannus","html","fs","WebFileInput"];
tannus_html_fs_WebFileInput.__super__ = tannus_io_ByteArrayInput;
tannus_html_fs_WebFileInput.prototype = $extend(tannus_io_ByteArrayInput.prototype,{
	__get: function(provide,reject) {
		var _g = this;
		this.reader.seek(this.offset);
		var gotChunk = function(data) {
			_g.offset += data._length;
			provide(data);
			if(_g.__position() == _g.__size()) _g.endOfInput();
		};
		this.reader.read(this.chunkSize,gotChunk,reject);
	}
	,__position: function(i) {
		if(i != null) this.offset = i;
		return this.offset;
	}
	,__size: function() {
		return this.src.file.size;
	}
	,__class__: tannus_html_fs_WebFileInput
});
var tannus_html_fs__$WebFileSystem_WebFileSystem_$Impl_$ = {};
$hxClasses["tannus.html.fs._WebFileSystem.WebFileSystem_Impl_"] = tannus_html_fs__$WebFileSystem_WebFileSystem_$Impl_$;
tannus_html_fs__$WebFileSystem_WebFileSystem_$Impl_$.__name__ = ["tannus","html","fs","_WebFileSystem","WebFileSystem_Impl_"];
tannus_html_fs__$WebFileSystem_WebFileSystem_$Impl_$._new = function(w) {
	return w;
};
tannus_html_fs__$WebFileSystem_WebFileSystem_$Impl_$.request = function(size,cb) {
	tannus_html__$Win_Win_$Impl_$.requestFileSystem(window,size,cb);
};
var tannus_html_fs__$WebFileWriter_WebFileWriter_$Impl_$ = {};
$hxClasses["tannus.html.fs._WebFileWriter.WebFileWriter_Impl_"] = tannus_html_fs__$WebFileWriter_WebFileWriter_$Impl_$;
tannus_html_fs__$WebFileWriter_WebFileWriter_$Impl_$.__name__ = ["tannus","html","fs","_WebFileWriter","WebFileWriter_Impl_"];
tannus_html_fs__$WebFileWriter_WebFileWriter_$Impl_$._new = function(w) {
	return new tannus_html_fs_CWebFileWriter(w);
};
tannus_html_fs__$WebFileWriter_WebFileWriter_$Impl_$.fromFileWriter = function(w) {
	return new tannus_html_fs_CWebFileWriter(w);
};
var tannus_html_fs_CWebFileWriter = function(writer) {
	this.w = writer;
	this.onwrite = new tannus_io_VoidSignal();
	this.w.onwrite = (function(f) {
		return function() {
			f();
		};
	})(($_=this.onwrite,$bind($_,$_.fire)));
	this.onerror = new tannus_io_Signal();
	this.w.onerror = (function(f1) {
		return function(a1) {
			f1(a1);
		};
	})(($_=this.onerror,$bind($_,$_.call)));
	console.log("writer constructed");
};
$hxClasses["tannus.html.fs.CWebFileWriter"] = tannus_html_fs_CWebFileWriter;
tannus_html_fs_CWebFileWriter.__name__ = ["tannus","html","fs","CWebFileWriter"];
tannus_html_fs_CWebFileWriter.prototype = {
	seek: function(pos) {
		try {
			this.w.seek(pos);
		} catch( err ) {
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			this.onerror.call(err);
		}
	}
	,write: function(data,cb) {
		if(cb == null) cb = function(x) {
			null;
		};
		var cbed = false;
		this.onwrite.once(function() {
			if(!cbed) {
				cbed = true;
				cb(null);
			}
		});
		this.onerror.listen(function(err) {
			if(!cbed) {
				cbed = true;
				cb(err);
			}
		},true);
		var blob = new Blob([data.b]);
		this.w.seek(0);
		this.w.write(blob);
	}
	,truncate: function(len) {
		this.w.truncate(len);
	}
	,get_length: function() {
		return this.w.length;
	}
	,get_position: function() {
		return this.w.position;
	}
	,__class__: tannus_html_fs_CWebFileWriter
	,__properties__: {get_position:"get_position",get_length:"get_length"}
};
var tannus_html_fs__$WebFileWriter_OldWebFileWriter_$Impl_$ = {};
$hxClasses["tannus.html.fs._WebFileWriter.OldWebFileWriter_Impl_"] = tannus_html_fs__$WebFileWriter_OldWebFileWriter_$Impl_$;
tannus_html_fs__$WebFileWriter_OldWebFileWriter_$Impl_$.__name__ = ["tannus","html","fs","_WebFileWriter","OldWebFileWriter_Impl_"];
tannus_html_fs__$WebFileWriter_OldWebFileWriter_$Impl_$._new = function(w) {
	return w;
};
tannus_html_fs__$WebFileWriter_OldWebFileWriter_$Impl_$.seek = function(this1,pos) {
	this1.seek(pos);
};
tannus_html_fs__$WebFileWriter_OldWebFileWriter_$Impl_$.write = function(this1,data,cb) {
	if(cb == null) cb = function(x) {
		null;
	};
	this1.onwriteend = function(event) {
		cb(null);
	};
	this1.onerror = function(error) {
		cb(error);
	};
	var blob = new Blob([data.b]);
	this1.write(blob);
};
tannus_html_fs__$WebFileWriter_OldWebFileWriter_$Impl_$.append = function(this1,data,cb) {
	this1.seek(this1.length);
	tannus_html_fs__$WebFileWriter_OldWebFileWriter_$Impl_$.write(this1,data,cb);
};
tannus_html_fs__$WebFileWriter_OldWebFileWriter_$Impl_$.truncate = function(this1,len) {
	this1.truncate(len);
};
var tannus_http__$Url_Url_$Impl_$ = {};
$hxClasses["tannus.http._Url.Url_Impl_"] = tannus_http__$Url_Url_$Impl_$;
tannus_http__$Url_Url_$Impl_$.__name__ = ["tannus","http","_Url","Url_Impl_"];
tannus_http__$Url_Url_$Impl_$._new = function(s) {
	return new tannus_http_CUrl(s);
};
tannus_http__$Url_Url_$Impl_$.toString = function(this1) {
	return this1.toString();
};
tannus_http__$Url_Url_$Impl_$.fromString = function(s) {
	return new tannus_http_CUrl(s);
};
var tannus_http_CUrl = $hx_exports.Href = function(surl) {
	this.protocol = null;
	this.hostname = null;
	this.pathname = null;
	this.search = null;
	this.hash = null;
	if(surl != null) {
		if(new EReg("^([A-Z]+):","i").match(surl)) this.protocol = surl.substring(0,surl.indexOf(":")); else this.protocol = "";
		if(this.protocol.length == 0) this.protocol = "http";
		var noproto = tannus_ds_StringUtils.remove(surl,this.protocol + "://");
		if(StringTools.startsWith(noproto,"/")) noproto = noproto.substring(1);
		this.hostname = tannus_ds_StringUtils.before(noproto,"/");
		if(tannus_ds_StringUtils.has(noproto,"/")) this.pathname = tannus_ds_StringUtils.after(noproto,"/"); else this.pathname = "";
		if(tannus_ds_StringUtils.has(this.pathname,"?")) this.search = tannus_ds_StringUtils.after(this.pathname,"?"); else this.search = "";
		this.pathname = tannus_ds_StringUtils.strip(tannus_ds_StringUtils.strip(this.pathname,tannus_ds__$EitherType_EitherType_$Impl_$.fromL("?")),tannus_ds__$EitherType_EitherType_$Impl_$.fromL(this.search));
		if(tannus_ds_StringUtils.has(this.search,"#")) this.hash = tannus_ds_StringUtils.after(this.search,"#"); else this.hash = "";
		this.search = tannus_ds_StringUtils.before(this.search,"#");
		if(this.hash.length == 0 && tannus_ds_StringUtils.has(this.pathname,"#")) {
			this.hash = tannus_ds_StringUtils.after(this.pathname,"#");
			this.pathname = tannus_ds_StringUtils.before(this.pathname,"#");
		}
		this.params = tannus_ds_QueryString.parse(this.search);
		try {
			this.hashparams = tannus_ds_QueryString.parse(this.hash);
		} catch( err ) {
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			if( js_Boot.__instanceof(err,String) ) {
				this.hashparams = null;
			} else throw(err);
		}
	}
};
$hxClasses["tannus.http.CUrl"] = tannus_http_CUrl;
tannus_http_CUrl.__name__ = ["tannus","http","CUrl"];
tannus_http_CUrl.prototype = {
	toString: function() {
		this.search = tannus_ds_QueryString.stringify(this.params);
		if(this.hashparams != null) this.hash = tannus_ds_QueryString.stringify(this.hashparams); else this.hash = this.hash + "";
		var base = "" + this.protocol + "://" + this.hostname + "/" + this.pathname;
		if(Reflect.fields(this.params).length == 0) base += ""; else base += "?" + this.search;
		if(this.hash != "") base += "#" + this.hash; else base += "";
		return base;
	}
	,clone: function() {
		var s = this.toString();
		return new tannus_http_CUrl(s);
	}
	,get_domain: function() {
		return this.hostname.split(".");
	}
	,set_domain: function(v) {
		this.hostname = v.join(".");
		return this.get_domain();
	}
	,get_path: function() {
		return new tannus_sys_CPath(this.pathname);
	}
	,set_path: function(v) {
		this.pathname = v.s;
		return new tannus_sys_CPath(this.pathname);
	}
	,__class__: tannus_http_CUrl
	,__properties__: {set_path:"set_path",get_path:"get_path",set_domain:"set_domain",get_domain:"get_domain"}
};
var tannus_internal_CompileTime = function() { };
$hxClasses["tannus.internal.CompileTime"] = tannus_internal_CompileTime;
tannus_internal_CompileTime.__name__ = ["tannus","internal","CompileTime"];
var tannus_internal__$Error_Error_$Impl_$ = {};
$hxClasses["tannus.internal._Error.Error_Impl_"] = tannus_internal__$Error_Error_$Impl_$;
tannus_internal__$Error_Error_$Impl_$.__name__ = ["tannus","internal","_Error","Error_Impl_"];
tannus_internal__$Error_Error_$Impl_$._new = function(msg) {
	return new Error(msg);
};
tannus_internal__$Error_Error_$Impl_$.fromString = function(s) {
	return new Error(s);
};
var tannus_internal_TypeTools = $hx_exports.TypeTools = function() { };
$hxClasses["tannus.internal.TypeTools"] = tannus_internal_TypeTools;
tannus_internal_TypeTools.__name__ = ["tannus","internal","TypeTools"];
tannus_internal_TypeTools.typename = function(o) {
	var valtype = Type["typeof"](o);
	switch(valtype[1]) {
	case 3:
		return "Bool";
	case 2:case 1:
		return "Number";
	case 0:
		return "Null";
	case 5:
		return "Function";
	case 8:
		return "Unknown";
	case 6:
		var klass = valtype[2];
		try {
			var name = Type.getClassName(klass);
			return name;
		} catch( err ) {
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			if( js_Boot.__instanceof(err,String) ) {
				return "Unknown";
			} else throw(err);
		}
		break;
	case 7:
		var enumer = valtype[2];
		var enumName = Type.getEnumName(enumer);
		var valueNames = Type.getEnumConstructs(enumer);
		var index = o[1];
		var results = "" + enumName + "." + valueNames[index];
		return results;
	case 4:
		try {
			var name1 = Type.getClassName(o);
			if(name1 != null) return "Class<" + name1 + ">"; else throw new js__$Boot_HaxeError("failed!");
		} catch( err1 ) {
			if (err1 instanceof js__$Boot_HaxeError) err1 = err1.val;
			if( js_Boot.__instanceof(err1,String) ) {
				try {
					var name2 = Type.getEnumName(o);
					if(name2 != null) return "Enum<" + name2 + ">"; else throw new js__$Boot_HaxeError("failed!");
				} catch( err2 ) {
					if (err2 instanceof js__$Boot_HaxeError) err2 = err2.val;
					return "Unknown";
				}
			} else throw(err1);
		}
		break;
	}
};
tannus_internal_TypeTools.getClassHierarchy = function(klass) {
	var kl = klass;
	var hierarchy = [];
	var name = Type.getClassName(kl);
	hierarchy.push(name);
	while(true) try {
		kl = Type.getSuperClass(kl);
		name = Type.getClassName(kl);
		hierarchy.push(name);
	} catch( err ) {
		if (err instanceof js__$Boot_HaxeError) err = err.val;
		break;
	}
	return hierarchy;
};
tannus_internal_TypeTools.hierarchy = function(o) {
	if(Reflect.isObject(o)) {
		var klass = Type.getClass(o);
		if(klass != null) return tannus_internal_TypeTools.getClassHierarchy(klass);
	}
	return [];
};
var tannus_io_Asserts = function() { };
$hxClasses["tannus.io.Asserts"] = tannus_io_Asserts;
tannus_io_Asserts.__name__ = ["tannus","io","Asserts"];
var tannus_io_Binary = function(size,_b) {
	this._length = size;
	this.b = _b;
	this.position = 0;
};
$hxClasses["tannus.io.Binary"] = tannus_io_Binary;
tannus_io_Binary.__name__ = ["tannus","io","Binary"];
tannus_io_Binary.prototype = {
	get: function(index) {
		if(index >= this._length || index < 0) throw new js__$Boot_HaxeError(tannus_io_impl_BinaryError.OutOfBounds);
		return 0;
	}
	,set: function(index,value) {
		if(index >= this._length || index < 0) throw new js__$Boot_HaxeError(tannus_io_impl_BinaryError.OutOfBounds);
		return 0;
	}
	,getInt32: function(i) {
		return this.get(i) | this.get(i + 1) << 8 | this.get(i + 2) << 16 | this.get(i + 3) << 24;
	}
	,setInt32: function(i,v) {
		this.set(i,v);
		this.set(i + 1,v >> 8);
		this.set(i + 2,v >> 16);
		this.set(i + 3,v >> 24);
	}
	,getInt64: function(i) {
		var high = this.getInt32(i + 4);
		var low = this.getInt32(i);
		var x = new haxe__$Int64__$_$_$Int64(high,low);
		return x;
	}
	,setInt64: function(i,v) {
		this.setInt32(i,v.low);
		this.setInt32(i + 4,v.high);
	}
	,getFloat: function(i) {
		return tannus_math_TMath.i32ToFloat(this.getInt32(i));
	}
	,setFloat: function(i,v) {
		this.setInt32(i,tannus_math_TMath.floatToI32(v));
	}
	,fill: function(c,index,size) {
		if(index == null) index = 0;
		if(size == null) size = this._length;
		var _g = index;
		while(_g < size) {
			var i = _g++;
			this.set(i,c);
		}
	}
	,readByte: function() {
		return this.get(this.position++);
	}
	,readInt32: function() {
		var v = this.getInt32(this.position);
		this.position += 4;
		return v;
	}
	,writeInt32: function(i) {
		this.setInt32(this.position,i);
		this.position += 4;
	}
	,readFloat: function() {
		return tannus_math_TMath.i32ToFloat(this.readInt32());
	}
	,writeFloat: function(v) {
		this.writeInt32(tannus_math_TMath.floatToI32(v));
	}
	,writeByte: function(c) {
		this.set(this.position++,c);
	}
	,read: function(len) {
		var res = this.sub(this.position,len);
		this.position += len;
		return res;
	}
	,readString: function(len) {
		var res = this.getString(this.position,len);
		this.position += len;
		return res;
	}
	,write: function(other,len) {
		if(len == null) len = other._length;
		this.blit(this.position,other,0,len);
		this.position += len;
	}
	,writeString: function(s) {
		this.write((Reflect.getProperty(js_Boot.getClass(this),"ofString"))(s));
	}
	,push: function(c) {
		this.position = this._length;
		{
			this.resize(this._length + 1);
			this;
		}
		this.setData(this.b);
		this.set(this.position++,c);
		return this.position;
	}
	,pushInt32: function(i) {
		this.position = this._length;
		{
			this.resize(this._length + 4);
			this;
		}
		this.setData(this.b);
		this.writeInt32(i);
		return this.position;
	}
	,pushFloat: function(n) {
		return this.pushInt32(tannus_math_TMath.floatToI32(n));
	}
	,unshift: function(c) {
		this.shiftRight(1);
		this.setData(this.b);
		this.set(0,c);
		return 0;
	}
	,pop: function() {
		var v = this.get(this._length - 1);
		this.position = 0;
		this.resize(this._length - 1);
		this.setData(this.b);
		return v;
	}
	,shift: function() {
		var v = this.get(0);
		this.setData(this.copy().slice(1).b);
		return v;
	}
	,append: function(footer,len) {
		if(len == null) len = footer._length;
		this.position = this._length;
		{
			this.resize(this._length + len);
			this;
		}
		this.write(footer);
		return this;
	}
	,appendString: function(foot,len) {
		return this.append((Reflect.getProperty(js_Boot.getClass(this),"ofString"))(foot),len);
	}
	,appendStruct: function(od) {
		var o = tannus_ds_CObj.create(od);
		if(Object.prototype.hasOwnProperty.call(o.o,"_append_ba")) {
			var a = o.method("_append_ba");
			var _i = this.position;
			a(this);
			var len = this.position - _i;
			return len;
		} else {
			throw new js__$Boot_HaxeError("Error: " + Std.string(o) + " Cannot be written to a ByteArray");
			return -1;
		}
	}
	,readStruct: function(type) {
		var ocl = tannus_ds_CObj.create(type);
		if(Object.prototype.hasOwnProperty.call(ocl.o,"_from_ba")) {
			var _from = ocl.method("_from_ba");
			return _from(this);
		} else throw new js__$Boot_HaxeError("Error: " + tannus_internal_TypeTools.typename(type) + " has no \"_from_ba\" method");
	}
	,prepend: function(header,len) {
		if(len == null) len = header._length;
		this.shiftRight(header._length);
		this.position = 0;
		this.write(header);
		return this;
	}
	,prependString: function(head,len) {
		return this.prepend((Reflect.getProperty(js_Boot.getClass(this),"ofString"))(head),len);
	}
	,shiftRight: function(digits) {
		var lpad = this._alloc(digits);
		lpad.fill(0);
		lpad = lpad.concat(this);
		{
			this.resize(this._length + digits);
			this;
		}
		this.setData(lpad.b);
	}
	,shiftLeft: function(digits) {
		var rpad = this._alloc(digits);
		rpad.fill(0);
		var backward;
		var this1 = this.slice(digits);
		backward = this1.concat(rpad);
		{
			this.resize(this._length + digits);
			this;
		}
		this.setData(backward.b);
	}
	,sub: function(index,size) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,slice: function(min,max) {
		return this.sub(min,(max != null?max:this._length) - min);
	}
	,blit: function(index,src,srcIndex,size) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,resize: function(size) {
		this._length = size;
	}
	,reverse: function() {
		var _g1 = 0;
		var _g = Math.floor(this._length / 2);
		while(_g1 < _g) {
			var i = _g1++;
			var temp = this.get(i);
			this.set(i,this.get(this._length - i - 1));
			this.set(this._length - i - 1,temp);
		}
	}
	,grow: function(amount) {
		this.resize(this._length + amount);
		return this;
	}
	,concat: function(other) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,copy: function() {
		return this;
	}
	,iterator: function() {
		return new tannus_io_impl_BinaryIterator(this);
	}
	,getString: function(index,len) {
		return "";
	}
	,getData: function() {
		return this.b;
	}
	,seek: function(i) {
		return this.position = i;
	}
	,toString: function() {
		return this.getString(0,this._length);
	}
	,toBytes: function() {
		return haxe_io_Bytes.alloc(0);
	}
	,toHex: function() {
		var sb_b = "";
		var chars = "0123456789ABCDEF".split("").map(function(s) {
			return HxOverrides.cca(s,0);
		});
		var _g1 = 0;
		var _g = this._length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = this.get(i);
			sb_b += String.fromCharCode(chars[c >> 4]);
			sb_b += String.fromCharCode(chars[c & 15]);
		}
		return sb_b;
	}
	,base64Encode: function() {
		return haxe_crypto_Base64.encode(this.toBytes());
	}
	,toBase64: function() {
		return this.base64Encode();
	}
	,toDataUrl: function(type) {
		if(type == null) type = "text/plain";
		var encoded = this.base64Encode();
		return "data:" + type + ";base64," + encoded;
	}
	,toArray: function() {
		var _g = [];
		var $it0 = this.iterator();
		while( $it0.hasNext() ) {
			var c = $it0.next();
			_g.push(c);
		}
		return _g;
	}
	,equals: function(other) {
		if(this._length != other._length) return false; else {
			var _g1 = 0;
			var _g = this._length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.get(i) != other.get(i)) return false;
			}
			return true;
		}
	}
	,setData: function(data) {
		this.b = data;
	}
	,err: function(e) {
		throw new js__$Boot_HaxeError(e);
	}
	,outOfBounds: function() {
		throw new js__$Boot_HaxeError(tannus_io_impl_BinaryError.OutOfBounds);
	}
	,overflow: function() {
		throw new js__$Boot_HaxeError(tannus_io_impl_BinaryError.Overflow);
	}
	,_alloc: function(size) {
		var allocf = Reflect.getProperty(js_Boot.getClass(this),"alloc");
		return allocf(size);
	}
	,_ofString: function(s) {
		return (Reflect.getProperty(js_Boot.getClass(this),"ofString"))(s);
	}
	,get_length: function() {
		return this._length;
	}
	,get_empty: function() {
		return this._length <= 0;
	}
	,get_first: function() {
		return this.get(0);
	}
	,set_first: function(v) {
		return this.set(0,v);
	}
	,get_last: function() {
		return this.get(this._length - 1);
	}
	,set_last: function(v) {
		return this.set(this._length - 1,v);
	}
	,__class__: tannus_io_Binary
	,__properties__: {set_last:"set_last",get_last:"get_last",set_first:"set_first",get_first:"get_first",get_empty:"get_empty",get_length:"get_length"}
};
var tannus_io__$Blob_Blob_$Impl_$ = {};
$hxClasses["tannus.io._Blob.Blob_Impl_"] = tannus_io__$Blob_Blob_$Impl_$;
tannus_io__$Blob_Blob_$Impl_$.__name__ = ["tannus","io","_Blob","Blob_Impl_"];
tannus_io__$Blob_Blob_$Impl_$._new = function(name,mime,dat) {
	return new tannus_io_CBlob(name,mime,dat);
};
tannus_io__$Blob_Blob_$Impl_$.toNativeBlob = function(this1) {
	return new Blob([this1.data.b],{ 'type' : this1.type});
};
tannus_io__$Blob_Blob_$Impl_$.toObjectURL = function(this1) {
	return URL.createObjectURL(new Blob([this1.data.b],{ 'type' : this1.type}));
};
tannus_io__$Blob_Blob_$Impl_$.fromDataURL = function(durl) {
	return tannus_io_CBlob.fromDataURL(durl);
};
var tannus_io_CBlob = function(nam,mime,dat) {
	this.name = nam;
	if(mime != null) this.type = mime;
	if(this.type == null) {
		var np = new tannus_sys_CPath(this.name);
		this.type = tannus_sys_Mimes.getMimeType(np.get_extension());
	}
	if(this.type == null) this.type = "text/plain";
	var this1;
	this1 = tannus_io_impl_BrowserBinary.alloc(0);
	this.data = this1;
	if(dat != null) this.data = dat;
};
$hxClasses["tannus.io.CBlob"] = tannus_io_CBlob;
tannus_io_CBlob.__name__ = ["tannus","io","CBlob"];
tannus_io_CBlob.fromDataURL = function(durl) {
	durl = durl.substring(5);
	var bits = durl.split(";");
	var mime = bits.shift();
	var encoded = durl.substring(durl.indexOf(",") + 1,durl.length - 1);
	var data = tannus_io_impl_BrowserBinary.fromBase64(encoded);
	return new tannus_io_CBlob("file",mime,data);
};
tannus_io_CBlob.prototype = {
	save: function(dirname) {
		var f;
		var p = tannus_sys__$Path_Path_$Impl_$.fromString("" + dirname + "/" + this.name);
		f = new tannus_sys_CFile(p);
		tannus_sys_JavaScriptFileSystem.write(f._path.s,this.data);
		return f;
	}
	,toDataURL: function() {
		return this.data.toDataUrl(this.type);
	}
	,__class__: tannus_io_CBlob
};
var tannus_io__$Byte_Byte_$Impl_$ = {};
$hxClasses["tannus.io._Byte.Byte_Impl_"] = tannus_io__$Byte_Byte_$Impl_$;
tannus_io__$Byte_Byte_$Impl_$.__name__ = ["tannus","io","_Byte","Byte_Impl_"];
tannus_io__$Byte_Byte_$Impl_$.__properties__ = {set_aschar:"set_aschar",get_aschar:"get_aschar",set_asint:"set_asint",get_asint:"get_asint",get_self:"get_self"}
tannus_io__$Byte_Byte_$Impl_$._new = function(n) {
	var this1;
	if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
	this1 = n;
	return this1;
};
tannus_io__$Byte_Byte_$Impl_$.get_self = function(this1) {
	return this1;
};
tannus_io__$Byte_Byte_$Impl_$.get_asint = function(this1) {
	return this1;
};
tannus_io__$Byte_Byte_$Impl_$.set_asint = function(this1,n) {
	if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
	return this1 = n;
};
tannus_io__$Byte_Byte_$Impl_$.get_aschar = function(this1) {
	return String.fromCharCode(this1);
};
tannus_io__$Byte_Byte_$Impl_$.set_aschar = function(this1,s) {
	var n = HxOverrides.cca(s,0);
	if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
	this1 = n;
	return String.fromCharCode(this1);
};
tannus_io__$Byte_Byte_$Impl_$.isNumeric = function(this1) {
	return this1 >= 48 && this1 <= 57;
};
tannus_io__$Byte_Byte_$Impl_$.isLetter = function(this1) {
	return this1 >= 65 && this1 <= 90 || this1 >= 97 && this1 <= 122;
};
tannus_io__$Byte_Byte_$Impl_$.isAlphaNumeric = function(this1) {
	return this1 >= 48 && this1 <= 57 || (this1 >= 65 && this1 <= 90 || this1 >= 97 && this1 <= 122);
};
tannus_io__$Byte_Byte_$Impl_$.isUppercase = function(this1) {
	return this1 >= 65 && this1 <= 90;
};
tannus_io__$Byte_Byte_$Impl_$.isLowercase = function(this1) {
	return this1 >= 97 && this1 <= 122;
};
tannus_io__$Byte_Byte_$Impl_$.isWhiteSpace = function(this1) {
	return Lambda.has([9,10,11,12,13,32],this1);
};
tannus_io__$Byte_Byte_$Impl_$.isLineBreaking = function(this1) {
	return this1 == 10 || this1 == 13;
};
tannus_io__$Byte_Byte_$Impl_$.isPunctuation = function(this1) {
	return Lambda.has([33,44,45,46,58,59,53],this1);
};
tannus_io__$Byte_Byte_$Impl_$.equalsi = function(this1,other) {
	return this1 == other;
};
tannus_io__$Byte_Byte_$Impl_$.equalss = function(this1,other) {
	return this1 == HxOverrides.cca(other,0);
};
tannus_io__$Byte_Byte_$Impl_$.repeat = function(this1,times) {
	return tannus_ds_StringUtils.times(String.fromCharCode(this1),times);
};
tannus_io__$Byte_Byte_$Impl_$.toString = function(this1) {
	return String.fromCharCode(this1);
};
tannus_io__$Byte_Byte_$Impl_$.toInt = function(this1) {
	return this1;
};
tannus_io__$Byte_Byte_$Impl_$.fromString = function(s) {
	var n = HxOverrides.cca(s,0);
	var this1;
	if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
	this1 = n;
	return this1;
};
tannus_io__$Byte_Byte_$Impl_$.isValid = function(n) {
	return ((n | 0) === n) && isFinite(n) && !isNaN(n);
};
tannus_io__$Byte_Byte_$Impl_$.assertValid = function(n) {
	if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
};
var tannus_io__$ByteArray_ByteArray_$Impl_$ = {};
$hxClasses["tannus.io._ByteArray.ByteArray_Impl_"] = tannus_io__$ByteArray_ByteArray_$Impl_$;
tannus_io__$ByteArray_ByteArray_$Impl_$.__name__ = ["tannus","io","_ByteArray","ByteArray_Impl_"];
tannus_io__$ByteArray_ByteArray_$Impl_$._new = function(size) {
	if(size == null) size = 0;
	var this1;
	this1 = tannus_io_impl_BrowserBinary.alloc(size);
	return this1;
};
tannus_io__$ByteArray_ByteArray_$Impl_$.get = function(this1,i) {
	return this1.get(i);
};
tannus_io__$ByteArray_ByteArray_$Impl_$.set = function(this1,i,v) {
	return this1.set(i,v);
};
tannus_io__$ByteArray_ByteArray_$Impl_$.toString = function(this1) {
	return this1.toString();
};
tannus_io__$ByteArray_ByteArray_$Impl_$.toBytes = function(this1) {
	return this1.toBytes();
};
tannus_io__$ByteArray_ByteArray_$Impl_$.toBase = function(this1) {
	return this1.b;
};
tannus_io__$ByteArray_ByteArray_$Impl_$.toArray = function(this1) {
	return this1.toArray();
};
tannus_io__$ByteArray_ByteArray_$Impl_$.expandByString = function(this1,s) {
	return this1.appendString(s);
};
tannus_io__$ByteArray_ByteArray_$Impl_$.expand = function(this1,other) {
	return this1.append(other);
};
tannus_io__$ByteArray_ByteArray_$Impl_$.concat = function(this1,other) {
	return this1.concat(other);
};
tannus_io__$ByteArray_ByteArray_$Impl_$.equals = function(this1,o) {
	return this1.equals(o);
};
tannus_io__$ByteArray_ByteArray_$Impl_$.alloc = function(size) {
	return tannus_io_impl_BrowserBinary.alloc(size);
};
tannus_io__$ByteArray_ByteArray_$Impl_$.ofData = function(d) {
	return tannus_io_impl_BrowserBinary.ofData(d);
};
tannus_io__$ByteArray_ByteArray_$Impl_$.ofString = function(s) {
	return tannus_io_impl_BrowserBinary.ofString(s);
};
tannus_io__$ByteArray_ByteArray_$Impl_$.fromBytes = function(b) {
	return tannus_io_impl_BrowserBinary.fromBytes(b);
};
tannus_io__$ByteArray_ByteArray_$Impl_$.fromBase64 = function(s) {
	return tannus_io_impl_BrowserBinary.fromBase64(s);
};
tannus_io__$ByteArray_ByteArray_$Impl_$.fromVector = function(vec) {
	var data;
	var this1;
	this1 = tannus_io_impl_BrowserBinary.alloc(vec.length);
	data = this1;
	var _g1 = 0;
	var _g = vec.length;
	while(_g1 < _g) {
		var index = _g1++;
		data.set(index,vec[index]);
	}
	return data;
};
var tannus_io_Output = function() {
	this.__b = [];
	this.opened = this.closed = this.paused = false;
};
$hxClasses["tannus.io.Output"] = tannus_io_Output;
tannus_io_Output.__name__ = ["tannus","io","Output"];
tannus_io_Output.prototype = {
	open: function(f) {
		this.opened = true;
	}
	,close: function(f) {
		this.closed = true;
	}
	,pause: function() {
		this.paused = true;
	}
	,resume: function() {
		if(this.paused) {
			this.paused = false;
			this.flush();
		}
	}
	,write: function(data,onwritten) {
		if(this.opened && !this.closed) {
			if(this.paused) this.__b.push(data); else {
				if(onwritten == null) onwritten = function() {
					null;
				};
				this.__write(data,onwritten);
			}
		} else this.error(new Error("Cannot write to closed or unopened Stream!"));
	}
	,__write: function(data,onwritten) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,flush: function(done) {
		var stack = new tannus_ds_AsyncStack();
		while(this.__b.length > 0) stack.push((function(f,a1) {
			return function(a2) {
				f(a1,a2);
			};
		})($bind(this,this.__write),this.__b.shift()));
		stack.run(function() {
			if(done != null) done();
		});
	}
	,buffer: function(data) {
		this.__b.push(data);
	}
	,error: function(e) {
		throw new js__$Boot_HaxeError(e);
	}
	,get_writable: function() {
		return this.opened && !this.closed;
	}
	,__class__: tannus_io_Output
	,__properties__: {get_writable:"get_writable"}
};
var tannus_io_ByteArrayOutput = function() {
	tannus_io_Output.call(this);
	this.chunkSize = -1;
	this.__chunk = null;
};
$hxClasses["tannus.io.ByteArrayOutput"] = tannus_io_ByteArrayOutput;
tannus_io_ByteArrayOutput.__name__ = ["tannus","io","ByteArrayOutput"];
tannus_io_ByteArrayOutput.__super__ = tannus_io_Output;
tannus_io_ByteArrayOutput.prototype = $extend(tannus_io_Output.prototype,{
	write: function(data,done) {
		if(this.opened && !this.closed) {
			if(this.paused) this.__b.push(data); else {
				if(done == null) done = function() {
					null;
				};
				if(this.chunkSize != -1) {
					if(this.__chunk != null) {
						data = this.__chunk.concat(data);
						this.__chunk = null;
					}
					if(data._length > this.chunkSize) {
						data = data.slice(0,this.chunkSize);
						this.__chunk = data.slice(this.chunkSize);
					}
				}
				this.__write(data,done);
			}
		} else this.error(new Error("Cannot write to closed or unopened Stream!"));
	}
	,close: function(done) {
		tannus_io_Output.prototype.close.call(this,done);
		if(done == null) done = function() {
			null;
		};
		if(this.__chunk != null) this.__write(this.__chunk,done); else done();
	}
	,truncate: function(len) {
		this.__size(len);
	}
	,seek: function(pos) {
		return this.__position(pos);
	}
	,__size: function(value) {
		return -1;
	}
	,__position: function(value) {
		return -1;
	}
	,get_length: function() {
		return this.__size();
	}
	,set_length: function(v) {
		return this.__size(v);
	}
	,get_position: function() {
		return this.__position();
	}
	,set_position: function(v) {
		return this.__position(v);
	}
	,__class__: tannus_io_ByteArrayOutput
	,__properties__: $extend(tannus_io_Output.prototype.__properties__,{set_position:"set_position",get_position:"get_position",set_length:"set_length",get_length:"get_length"})
});
var tannus_io_ByteStack = function(data) {
	tannus_ds_Stack.call(this,[]);
	this.b = data;
	this.i = 0;
};
$hxClasses["tannus.io.ByteStack"] = tannus_io_ByteStack;
tannus_io_ByteStack.__name__ = ["tannus","io","ByteStack"];
tannus_io_ByteStack.__super__ = tannus_ds_Stack;
tannus_io_ByteStack.prototype = $extend(tannus_ds_Stack.prototype,{
	read: function(dis) {
		var data;
		var this1;
		this1 = tannus_io_impl_BrowserBinary.alloc(dis);
		data = this1;
		var _g = 0;
		while(_g < dis) {
			var i = _g++;
			data.writeByte(this.pop());
		}
		return data;
	}
	,readUntil: function(delimiter) {
		var res;
		var this1;
		this1 = tannus_io_impl_BrowserBinary.alloc(0);
		res = this1;
		while(this.peek() != delimiter) res.push(this.pop());
		return res;
	}
	,peekAhead: function(dis) {
		var data;
		var this1;
		this1 = tannus_io_impl_BrowserBinary.alloc(dis);
		data = this1;
		var _g1 = 1;
		var _g = dis + 1;
		while(_g1 < _g) {
			var i = _g1++;
			data.writeByte(this.peek(i));
		}
		return data;
	}
	,copy: function() {
		var c = new tannus_io_ByteStack(this.b);
		c.i = this.i;
		return c;
	}
	,peek: function(dis) {
		if(dis == null) dis = 0;
		return this.b.get(this.i + dis);
	}
	,pop: function() {
		var i = this.i++;
		return this.b.get(i);
	}
	,get_empty: function() {
		return this.i >= this.b._length;
	}
	,seek: function(pos) {
		this.i = pos;
	}
	,getByteArray: function() {
		return this.b.copy();
	}
	,remaining: function() {
		return this.b._length - this.i;
	}
	,__class__: tannus_io_ByteStack
});
var tannus_io__$Getter_Getter_$Impl_$ = {};
$hxClasses["tannus.io._Getter.Getter_Impl_"] = tannus_io__$Getter_Getter_$Impl_$;
tannus_io__$Getter_Getter_$Impl_$.__name__ = ["tannus","io","_Getter","Getter_Impl_"];
tannus_io__$Getter_Getter_$Impl_$.__properties__ = {get_v:"get_v"}
tannus_io__$Getter_Getter_$Impl_$._new = function(f) {
	return f;
};
tannus_io__$Getter_Getter_$Impl_$.get_v = function(this1) {
	return this1();
};
tannus_io__$Getter_Getter_$Impl_$.get = function(this1) {
	return this1();
};
tannus_io__$Getter_Getter_$Impl_$.toString = function(this1) {
	return Std.string(this1());
};
tannus_io__$Getter_Getter_$Impl_$.transform = function(this1,f) {
	return function() {
		return f(this1());
	};
};
tannus_io__$Getter_Getter_$Impl_$.addNumber = function(get,val) {
	return get() + val;
};
tannus_io__$Getter_Getter_$Impl_$.addString = function(get,val) {
	return get() + val;
};
var tannus_io__$Pointer_Pointer_$Impl_$ = {};
$hxClasses["tannus.io._Pointer.Pointer_Impl_"] = tannus_io__$Pointer_Pointer_$Impl_$;
tannus_io__$Pointer_Pointer_$Impl_$.__name__ = ["tannus","io","_Pointer","Pointer_Impl_"];
tannus_io__$Pointer_Pointer_$Impl_$.__properties__ = {set_deleter:"set_deleter",get_deleter:"get_deleter",get_set:"get_set",get_get:"get_get",get_exists:"get_exists",set__:"set__",get__:"get__",set_setter:"set_setter",get_setter:"get_setter",set_getter:"set_getter",get_getter:"get_getter",set_v:"set_v",get_v:"get_v",set_value:"set_value",get_value:"get_value",get_self:"get_self"}
tannus_io__$Pointer_Pointer_$Impl_$._new = function(g,s,d) {
	return new tannus_io__$Pointer_Ref(g,s);
};
tannus_io__$Pointer_Pointer_$Impl_$.get_self = function(this1) {
	return this1;
};
tannus_io__$Pointer_Pointer_$Impl_$.get_value = function(this1) {
	return this1.get();
};
tannus_io__$Pointer_Pointer_$Impl_$.set_value = function(this1,nv) {
	return this1.set(nv);
};
tannus_io__$Pointer_Pointer_$Impl_$.get_v = function(this1) {
	return this1.get();
};
tannus_io__$Pointer_Pointer_$Impl_$.set_v = function(this1,nv) {
	return this1.set(nv);
};
tannus_io__$Pointer_Pointer_$Impl_$.get_getter = function(this1) {
	return this1.getter;
};
tannus_io__$Pointer_Pointer_$Impl_$.set_getter = function(this1,ng) {
	return this1.getter = ng;
};
tannus_io__$Pointer_Pointer_$Impl_$.get_setter = function(this1) {
	return this1.setter;
};
tannus_io__$Pointer_Pointer_$Impl_$.set_setter = function(this1,ns) {
	return this1.setter = ns;
};
tannus_io__$Pointer_Pointer_$Impl_$.get__ = function(this1) {
	return this1.get();
};
tannus_io__$Pointer_Pointer_$Impl_$.set__ = function(this1,v) {
	return this1.set(v);
};
tannus_io__$Pointer_Pointer_$Impl_$.get_exists = function(this1) {
	return this1.get() != null;
};
tannus_io__$Pointer_Pointer_$Impl_$.get_get = function(this1) {
	return $bind(this1,this1.get);
};
tannus_io__$Pointer_Pointer_$Impl_$.get_set = function(this1) {
	return $bind(this1,this1.set);
};
tannus_io__$Pointer_Pointer_$Impl_$.get_deleter = function(this1) {
	return this1.deleter;
};
tannus_io__$Pointer_Pointer_$Impl_$.set_deleter = function(this1,nd) {
	return this1.deleter = nd;
};
tannus_io__$Pointer_Pointer_$Impl_$["delete"] = function(this1) {
	this1["delete"]();
};
tannus_io__$Pointer_Pointer_$Impl_$.to_underlying = function(this1) {
	return this1.get();
};
tannus_io__$Pointer_Pointer_$Impl_$.setvalue = function(this1,v) {
	return this1.set(v);
};
tannus_io__$Pointer_Pointer_$Impl_$.setPointer = function(this1,v) {
	return this1.set(v.get());
};
tannus_io__$Pointer_Pointer_$Impl_$.access = function(this1,v) {
	if(v != null) return this1.set(v); else return this1.get();
};
tannus_io__$Pointer_Pointer_$Impl_$.attach_str = function(this1,str) {
	var s = this1.setter;
	this1.setter = tannus_io__$Setter_Setter_$Impl_$.attach(s,str);
};
tannus_io__$Pointer_Pointer_$Impl_$._transform = function(this1,mget,mset) {
	var g = tannus_io__$Getter_Getter_$Impl_$.transform(this1.getter,mget);
	var s = tannus_io__$Setter_Setter_$Impl_$.transform(this1.setter,mset);
	return new tannus_io__$Pointer_Ref(g,s);
};
tannus_io__$Pointer_Pointer_$Impl_$.clone = function(this1) {
	return new tannus_io__$Pointer_Ref(this1.getter,this1.setter);
};
tannus_io__$Pointer_Pointer_$Impl_$.toGetter = function(this1) {
	return this1.getter;
};
tannus_io__$Pointer_Pointer_$Impl_$.toSetter = function(this1) {
	return this1.setter;
};
tannus_io__$Pointer_Pointer_$Impl_$.toString = function(this1) {
	return this1.toString();
};
tannus_io__$Pointer_Pointer_$Impl_$.iterator = function(self) {
	return $iterator(self.get())();
};
tannus_io__$Pointer_Pointer_$Impl_$.pre_decrement = function(a) {
	a.set(a.get() - 1);
	return a.get();
};
tannus_io__$Pointer_Pointer_$Impl_$.pre_increment = function(a) {
	a.set(a.get() + 1);
	return a.get();
};
tannus_io__$Pointer_Pointer_$Impl_$.post_decrement = function(a) {
	var r = a.get();
	a.set(r - 1);
	return r;
};
tannus_io__$Pointer_Pointer_$Impl_$.post_increment = function(a) {
	var r = a.get();
	a.set(r + 1);
	return r;
};
tannus_io__$Pointer_Pointer_$Impl_$.fromAccessor = function(af) {
	var g = (function(f,a1) {
		return function() {
			return f(a1);
		};
	})(af,null);
	var s = (function(f1) {
		return function(a11) {
			return f1(a11);
		};
	})(af);
	return new tannus_io__$Pointer_Ref(g,s);
};
var tannus_io__$Pointer_Ref = function(g,s,d) {
	var _g = this;
	this.getter = g;
	this.setter = s;
	this.deleter = d;
	var prop = function(n) {
		Reflect.getProperty(_g,"__defineGetter__").call(_g,n,$bind(_g,_g.get));
		Reflect.getProperty(_g,"__defineSetter__").call(_g,n,$bind(_g,_g.set));
	};
	var _g1 = 0;
	var _g11 = ["value","v","_"];
	while(_g1 < _g11.length) {
		var n1 = _g11[_g1];
		++_g1;
		prop(n1);
	}
};
$hxClasses["tannus.io._Pointer.Ref"] = tannus_io__$Pointer_Ref;
tannus_io__$Pointer_Ref.__name__ = ["tannus","io","_Pointer","Ref"];
tannus_io__$Pointer_Ref.prototype = {
	get: function() {
		return this.getter();
	}
	,set: function(v) {
		return this.setter(v);
	}
	,'delete': function() {
		if(this.deleter != null) this.deleter();
	}
	,toString: function() {
		return Std.string(this.get());
	}
	,__class__: tannus_io__$Pointer_Ref
};
var tannus_io__$RegEx_RegEx_$Impl_$ = {};
$hxClasses["tannus.io._RegEx.RegEx_Impl_"] = tannus_io__$RegEx_RegEx_$Impl_$;
tannus_io__$RegEx_RegEx_$Impl_$.__name__ = ["tannus","io","_RegEx","RegEx_Impl_"];
tannus_io__$RegEx_RegEx_$Impl_$._new = function(pattern) {
	return pattern;
};
tannus_io__$RegEx_RegEx_$Impl_$.matches = function(this1,text) {
	var ma = [];
	this1.map(text,function(e) {
		var parts = [];
		var i = 0;
		var matched = true;
		while(matched) try {
			var p = e.matched(i);
			if(p == null) {
				matched = false;
				break;
			}
			parts.push(p);
			i++;
		} catch( err ) {
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			matched = false;
			break;
		}
		ma.push(parts);
		return "";
	});
	return ma;
};
tannus_io__$RegEx_RegEx_$Impl_$.search = function(this1,s) {
	return tannus_io__$RegEx_RegEx_$Impl_$.matches(this1,s);
};
tannus_io__$RegEx_RegEx_$Impl_$.extract = function(this1,str,n) {
	if(n == null) n = 0;
	return tannus_io__$RegEx_RegEx_$Impl_$.matches(this1,str)[n];
};
tannus_io__$RegEx_RegEx_$Impl_$.extractGroups = function(this1,str,n) {
	if(n == null) n = 0;
	return tannus_io__$RegEx_RegEx_$Impl_$.matches(this1,str)[0].slice(1);
};
tannus_io__$RegEx_RegEx_$Impl_$.findAll = function(this1,s) {
	var all = [];
	this1.map(s,function(e) {
		var pos = e.matchedPos();
		all.push({ 'str' : s, 'pos' : e.matchedPos()});
		return s;
	});
	return all;
};
tannus_io__$RegEx_RegEx_$Impl_$.replace = function(this1,rtext,text) {
	return this1.map(rtext,function(e) {
		var i = 0;
		var whole = null;
		var subs = [];
		while(true) try {
			var s = this1.matched(i++);
			if(whole == null) whole = s; else subs.push(s);
		} catch( err ) {
			if (err instanceof js__$Boot_HaxeError) err = err.val;
			break;
		}
		var _t = text;
		var _g1 = 0;
		var _g = subs.length;
		while(_g1 < _g) {
			var ii = _g1++;
			_t = StringTools.replace(_t,"{{" + ii + "}}",subs[ii]);
		}
		return _t;
	});
};
tannus_io__$RegEx_RegEx_$Impl_$.toTester = function(this1) {
	return (function(f) {
		return function(s) {
			return f(s);
		};
	})($bind(this1,this1.match));
};
var tannus_io__$Setter_Setter_$Impl_$ = {};
$hxClasses["tannus.io._Setter.Setter_Impl_"] = tannus_io__$Setter_Setter_$Impl_$;
tannus_io__$Setter_Setter_$Impl_$.__name__ = ["tannus","io","_Setter","Setter_Impl_"];
tannus_io__$Setter_Setter_$Impl_$.__properties__ = {set_v:"set_v"}
tannus_io__$Setter_Setter_$Impl_$._new = function(f) {
	return f;
};
tannus_io__$Setter_Setter_$Impl_$.set_v = function(this1,nv) {
	return this1(nv);
};
tannus_io__$Setter_Setter_$Impl_$.wrap = function(this1,f) {
	var self = this1;
	this1 = function(v) {
		return f(self,v);
	};
};
tannus_io__$Setter_Setter_$Impl_$.attach = function(this1,other) {
	var f = function(s,val) {
		other(val);
		return s(val);
	};
	var self = this1;
	this1 = function(v) {
		return f(self,v);
	};
	return this1;
};
tannus_io__$Setter_Setter_$Impl_$.transform = function(this1,f) {
	return function(o) {
		var v = f(o);
		this1(v);
		return o;
	};
};
tannus_io__$Setter_Setter_$Impl_$.set = function(this1,v) {
	return this1(v);
};
var tannus_io_Signal = function() {
	this.handlers = [];
	this.ondelete = function() {
		null;
	};
};
$hxClasses["tannus.io.Signal"] = tannus_io_Signal;
tannus_io_Signal.__name__ = ["tannus","io","Signal"];
tannus_io_Signal.prototype = {
	add: function(handler) {
		this.handlers.push(handler);
	}
	,listen: function(f,once) {
		if(once == null) once = false;
		if(!once) this.add(tannus_io__$Signal_Handler.Normal(f)); else {
			var _fired = false;
			var fired = new tannus_io__$Pointer_Ref(function() {
				return _fired;
			},function(v) {
				return _fired = v;
			});
			this.add(tannus_io__$Signal_Handler.Once(f,fired));
		}
	}
	,on: function(f,once) {
		if(once == null) once = false;
		this.listen(f,once);
	}
	,once: function(f) {
		this.listen(f,true);
	}
	,when: function(test,f) {
		this.add(tannus_io__$Signal_Handler.Tested(f,test));
	}
	,times: function(count,f) {
		var _fired = 0;
		var fired = new tannus_io__$Pointer_Ref(function() {
			return _fired;
		},function(v) {
			return _fired = v;
		});
		this.add(tannus_io__$Signal_Handler.Counted(f,count,fired));
	}
	,every: function(wait,f) {
		var _rem = 0;
		var rem = new tannus_io__$Pointer_Ref(function() {
			return _rem;
		},function(v) {
			return _rem = v;
		});
		this.add(tannus_io__$Signal_Handler.Every(f,wait,rem));
	}
	,ignore: function(func) {
		this.handlers = this.handlers.filter(function(h) {
			switch(h[1]) {
			case 0:
				var f = h[2];
				return !Reflect.compareMethods(f,func);
			case 3:
				var f1 = h[2];
				return !Reflect.compareMethods(f1,func);
			case 4:
				var f2 = h[2];
				return !Reflect.compareMethods(f2,func);
			case 1:
				var f3 = h[2];
				return !Reflect.compareMethods(f3,func);
			case 2:
				var f4 = h[2];
				return !Reflect.compareMethods(f4,func);
			}
		});
	}
	,off: function(f) {
		this.ignore(f);
	}
	,clear: function() {
		this.handlers = [];
	}
	,callHandler: function(h,arg) {
		switch(h[1]) {
		case 0:
			var f = h[2];
			f(arg);
			break;
		case 3:
			var fired = h[3];
			var f1 = h[2];
			if(!fired.get()) {
				f1(arg);
				fired.set(true);
			}
			break;
		case 4:
			var test = h[3];
			var f2 = h[2];
			if(test(arg)) f2(arg);
			break;
		case 1:
			var called = h[4];
			var count = h[3];
			var f3 = h[2];
			if(called.get() <= count) {
				f3(arg);
				var v = called.get() + 1;
				called.set(v);
			}
			break;
		case 2:
			var rem = h[4];
			var wait = h[3];
			var f4 = h[2];
			if(rem.get() == wait) {
				f4(arg);
				rem.set(0);
			} else {
				var nv = rem.get() + 1;
				rem.set(nv);
			}
			break;
		}
	}
	,broadcast: function(data) {
		var _g = 0;
		var _g1 = this.handlers;
		while(_g < _g1.length) {
			var h = _g1[_g];
			++_g;
			this.callHandler(h,data);
		}
	}
	,call: function(data) {
		this.broadcast(data);
	}
	,__class__: tannus_io_Signal
};
var tannus_io__$Signal_Handler = $hxClasses["tannus.io._Signal.Handler"] = { __ename__ : ["tannus","io","_Signal","Handler"], __constructs__ : ["Normal","Counted","Every","Once","Tested"] };
tannus_io__$Signal_Handler.Normal = function(func) { var $x = ["Normal",0,func]; $x.__enum__ = tannus_io__$Signal_Handler; $x.toString = $estr; return $x; };
tannus_io__$Signal_Handler.Counted = function(func,count,fired) { var $x = ["Counted",1,func,count,fired]; $x.__enum__ = tannus_io__$Signal_Handler; $x.toString = $estr; return $x; };
tannus_io__$Signal_Handler.Every = function(func,wait,remaining) { var $x = ["Every",2,func,wait,remaining]; $x.__enum__ = tannus_io__$Signal_Handler; $x.toString = $estr; return $x; };
tannus_io__$Signal_Handler.Once = function(func,fired) { var $x = ["Once",3,func,fired]; $x.__enum__ = tannus_io__$Signal_Handler; $x.toString = $estr; return $x; };
tannus_io__$Signal_Handler.Tested = function(func,test) { var $x = ["Tested",4,func,test]; $x.__enum__ = tannus_io__$Signal_Handler; $x.toString = $estr; return $x; };
var tannus_io_VoidSignal = function() {
	this.handlers = [];
	this.ondelete = function() {
		null;
	};
	this._remove = [];
};
$hxClasses["tannus.io.VoidSignal"] = tannus_io_VoidSignal;
tannus_io_VoidSignal.__name__ = ["tannus","io","VoidSignal"];
tannus_io_VoidSignal.prototype = {
	clone: function() {
		var c = new tannus_io_VoidSignal();
		var _g = 0;
		var _g1 = this.handlers;
		while(_g < _g1.length) {
			var h = _g1[_g];
			++_g;
			switch(h[1]) {
			case 0:
				var f = h[2];
				c.add(tannus_io__$VoidSignal_Handler.Normal(((function() {
					return function(f1) {
						return (function() {
							return function() {
								f1();
							};
						})();
					};
				})())(f)));
				break;
			case 1:
				var fired = [h[4]];
				var count = h[3];
				var f2 = h[2];
				c.add(tannus_io__$VoidSignal_Handler.Counted(((function() {
					return function(f3) {
						return (function() {
							return function() {
								f3();
							};
						})();
					};
				})())(f2),count,(function($this) {
					var $r;
					var this1 = ((function(fired) {
						return function() {
							var _v = fired[0];
							return new tannus_io__$Pointer_Ref((function() {
								return function() {
									return _v;
								};
							})(),(function() {
								return function(v) {
									return _v = v;
								};
							})());
						};
					})(fired))();
					$r = this1.get();
					return $r;
				}(this))));
				break;
			case 3:
				var fired1 = h[3];
				var f4 = h[2];
				if(!fired1.get()) c.add(tannus_io__$VoidSignal_Handler.Once(((function() {
					return function(f5) {
						return (function() {
							return function() {
								f5();
							};
						})();
					};
				})())(f4),((function() {
					return function() {
						var _v1 = false;
						return new tannus_io__$Pointer_Ref((function() {
							return function() {
								return _v1;
							};
						})(),(function() {
							return function(v1) {
								return _v1 = v1;
							};
						})());
					};
				})())()));
				break;
			case 2:
				var remaining = [h[4]];
				var wait = h[3];
				var f6 = h[2];
				c.add(tannus_io__$VoidSignal_Handler.Every(((function() {
					return function(f7) {
						return (function() {
							return function() {
								f7();
							};
						})();
					};
				})())(f6),wait,(function($this) {
					var $r;
					var this2 = ((function(remaining) {
						return function() {
							var _v2 = remaining[0];
							return new tannus_io__$Pointer_Ref((function() {
								return function() {
									return _v2;
								};
							})(),(function() {
								return function(v2) {
									return _v2 = v2;
								};
							})());
						};
					})(remaining))();
					$r = this2.get();
					return $r;
				}(this))));
				break;
			}
		}
		return c;
	}
	,add: function(h) {
		this.handlers.push(h);
	}
	,on: function(f) {
		this.add(tannus_io__$VoidSignal_Handler.Normal(f));
	}
	,once: function(f) {
		this.add(tannus_io__$VoidSignal_Handler.Once(f,(function() {
			var _v = false;
			return new tannus_io__$Pointer_Ref(function() {
				return _v;
			},function(v) {
				return _v = v;
			});
		})()));
	}
	,times: function(count,f) {
		this.add(tannus_io__$VoidSignal_Handler.Counted(f,count,(function() {
			var _v = 0;
			return new tannus_io__$Pointer_Ref(function() {
				return _v;
			},function(v) {
				return _v = v;
			});
		})()));
	}
	,every: function(interval,f) {
		this.add(tannus_io__$VoidSignal_Handler.Every(f,interval,(function() {
			var _v = interval;
			return new tannus_io__$Pointer_Ref(function() {
				return _v;
			},function(v) {
				return _v = v;
			});
		})()));
	}
	,ignore: function(func) {
		var ignores = [];
		var _g = 0;
		var _g1 = this.handlers;
		while(_g < _g1.length) {
			var h = _g1[_g];
			++_g;
			switch(h[1]) {
			case 0:
				var f = h[2];
				if(Reflect.compareMethods(f,func)) ignores.push(h);
				break;
			case 3:
				var f1 = h[2];
				if(Reflect.compareMethods(f1,func)) ignores.push(h);
				break;
			case 1:
				var f2 = h[2];
				if(Reflect.compareMethods(f2,func)) ignores.push(h);
				break;
			case 2:
				var f3 = h[2];
				if(Reflect.compareMethods(f3,func)) ignores.push(h);
				break;
			}
		}
		var _g2 = 0;
		while(_g2 < ignores.length) {
			var h1 = ignores[_g2];
			++_g2;
			HxOverrides.remove(this.handlers,h1);
		}
	}
	,off: function(f) {
		this.ignore(f);
	}
	,clear: function() {
		this.handlers = [];
	}
	,callHandler: function(h) {
		switch(h[1]) {
		case 0:
			var f = h[2];
			f();
			break;
		case 3:
			var fired = h[3];
			var f1 = h[2];
			if(!fired.get()) {
				f1();
				this._remove.push(h);
			}
			break;
		case 1:
			var fired1 = h[4];
			var count = h[3];
			var f2 = h[2];
			if(fired1.get() < count) {
				f2();
				var nv = fired1.get() + 1;
				fired1.set(nv);
			} else this._remove.push(h);
			break;
		case 2:
			var rem = h[4];
			var wait = h[3];
			var f3 = h[2];
			if(rem.get() == wait) {
				f3();
				rem.set(0);
			} else {
				var nv1 = rem.get() + 1;
				rem.set(nv1);
			}
			break;
		}
	}
	,call: function() {
		var _g = 0;
		var _g1 = this.handlers;
		while(_g < _g1.length) {
			var h = _g1[_g];
			++_g;
			this.callHandler(h);
		}
		var _g2 = 0;
		var _g11 = this._remove;
		while(_g2 < _g11.length) {
			var h1 = _g11[_g2];
			++_g2;
			HxOverrides.remove(this.handlers,h1);
		}
		this._remove = [];
	}
	,fire: function() {
		this.call();
	}
	,__class__: tannus_io_VoidSignal
};
var tannus_io__$VoidSignal_Handler = $hxClasses["tannus.io._VoidSignal.Handler"] = { __ename__ : ["tannus","io","_VoidSignal","Handler"], __constructs__ : ["Normal","Counted","Every","Once"] };
tannus_io__$VoidSignal_Handler.Normal = function(func) { var $x = ["Normal",0,func]; $x.__enum__ = tannus_io__$VoidSignal_Handler; $x.toString = $estr; return $x; };
tannus_io__$VoidSignal_Handler.Counted = function(func,count,fired) { var $x = ["Counted",1,func,count,fired]; $x.__enum__ = tannus_io__$VoidSignal_Handler; $x.toString = $estr; return $x; };
tannus_io__$VoidSignal_Handler.Every = function(func,wait,remaining) { var $x = ["Every",2,func,wait,remaining]; $x.__enum__ = tannus_io__$VoidSignal_Handler; $x.toString = $estr; return $x; };
tannus_io__$VoidSignal_Handler.Once = function(func,fired) { var $x = ["Once",3,func,fired]; $x.__enum__ = tannus_io__$VoidSignal_Handler; $x.toString = $estr; return $x; };
var tannus_io_impl_BinaryError = $hxClasses["tannus.io.impl.BinaryError"] = { __ename__ : ["tannus","io","impl","BinaryError"], __constructs__ : ["Overflow","OutOfBounds","Custom"] };
tannus_io_impl_BinaryError.Overflow = ["Overflow",0];
tannus_io_impl_BinaryError.Overflow.toString = $estr;
tannus_io_impl_BinaryError.Overflow.__enum__ = tannus_io_impl_BinaryError;
tannus_io_impl_BinaryError.OutOfBounds = ["OutOfBounds",1];
tannus_io_impl_BinaryError.OutOfBounds.toString = $estr;
tannus_io_impl_BinaryError.OutOfBounds.__enum__ = tannus_io_impl_BinaryError;
tannus_io_impl_BinaryError.Custom = function(error) { var $x = ["Custom",2,error]; $x.__enum__ = tannus_io_impl_BinaryError; $x.toString = $estr; return $x; };
var tannus_io_impl_BinaryIterator = function(b) {
	this.bin = b;
	this.index = 0;
};
$hxClasses["tannus.io.impl.BinaryIterator"] = tannus_io_impl_BinaryIterator;
tannus_io_impl_BinaryIterator.__name__ = ["tannus","io","impl","BinaryIterator"];
tannus_io_impl_BinaryIterator.prototype = {
	hasNext: function() {
		return this.index <= this.bin._length - 1;
	}
	,next: function() {
		var c = this.bin.get(this.index);
		this.index++;
		return c;
	}
	,__class__: tannus_io_impl_BinaryIterator
};
var tannus_io_impl_BrowserBinary = $hx_exports.Binary = function(size,data,arr) {
	tannus_io_Binary.call(this,size,data);
	if(arr != null) this.array = arr; else this.array = new Uint8Array(data);
};
$hxClasses["tannus.io.impl.BrowserBinary"] = tannus_io_impl_BrowserBinary;
tannus_io_impl_BrowserBinary.__name__ = ["tannus","io","impl","BrowserBinary"];
tannus_io_impl_BrowserBinary.alloc = function(size) {
	var list = new Uint8Array(size);
	var data = list.buffer;
	return new tannus_io_impl_BrowserBinary(size,data,list);
};
tannus_io_impl_BrowserBinary.ofData = function(d) {
	var copy = (js_Boot.__cast(d , ArrayBuffer)).slice(0);
	return new tannus_io_impl_BrowserBinary(d.byteLength,copy);
};
tannus_io_impl_BrowserBinary.ofString = function(s) {
	if(s == "") throw new js__$Boot_HaxeError("Error: Dealing with empty Strings is too much bullshit");
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	var tarr = new Uint8Array(a);
	return new tannus_io_impl_BrowserBinary(a.length,tarr.buffer);
};
tannus_io_impl_BrowserBinary.fromBuffer = function(b) {
	var jsb = tannus_io_impl_BrowserBinary.alloc(b.length);
	var _g1 = 0;
	var _g = b.length;
	while(_g1 < _g) {
		var i = _g1++;
		jsb.set(i,b[i]);
	}
	return jsb;
};
tannus_io_impl_BrowserBinary.fromBytes = function(b) {
	return tannus_io_impl_BrowserBinary.ofData(b.b.buffer);
};
tannus_io_impl_BrowserBinary.list = function(uia) {
	return Array.prototype.slice.call(uia,0);
};
tannus_io_impl_BrowserBinary.fromBase64 = function(s) {
	return tannus_io_impl_BrowserBinary.fromBytes(haxe_crypto_Base64.decode(s));
};
tannus_io_impl_BrowserBinary.__super__ = tannus_io_Binary;
tannus_io_impl_BrowserBinary.prototype = $extend(tannus_io_Binary.prototype,{
	get: function(i) {
		tannus_io_Binary.prototype.get.call(this,i);
		return this.array[i];
	}
	,set: function(i,v) {
		tannus_io_Binary.prototype.set.call(this,i,v);
		return this.array[i] = v;
	}
	,sub: function(index,size) {
		return new tannus_io_impl_BrowserBinary(size,this.b.slice(index,index + size));
	}
	,slice: function(start,end) {
		if(end == null) end = this._length;
		return new tannus_io_impl_BrowserBinary(end - start,this.b.slice(start,end));
	}
	,blit: function(index,src,srcIndex,size) {
		var _g = 0;
		while(_g < size) {
			var i = _g++;
			this.set(index + i,src.get(srcIndex + i));
		}
	}
	,getString: function(index,size) {
		var result = "";
		var _g = 0;
		while(_g < size) {
			var i = _g++;
			var this1 = this.get(index + i);
			result += String.fromCharCode(this1);
		}
		return result;
	}
	,resize: function(size) {
		if(size < this._length) this.setData(this.b = this.b.slice(0,size)); else {
			var bigger = tannus_io_impl_BrowserBinary.alloc(size);
			bigger.blit(0,this,0,this._length);
			this.setData(bigger.b);
		}
	}
	,concat: function(other) {
		var lensum = this._length + other._length;
		var sum = new tannus_io_impl_BrowserBinary(lensum,new ArrayBuffer(lensum));
		sum.blit(0,this,0,this._length);
		sum.blit(this._length,other,0,other._length);
		return sum;
	}
	,setData: function(d) {
		this.b = d;
		this.array = new Uint8Array(this.b);
		this._length = this.array.length;
	}
	,toBytes: function() {
		return haxe_io_Bytes.ofData(this.b);
	}
	,toBuffer: function() {
		return new Buffer(this.array);
	}
	,__class__: tannus_io_impl_BrowserBinary
});
var tannus_macro_MacroTools = function() { };
$hxClasses["tannus.macro.MacroTools"] = tannus_macro_MacroTools;
tannus_macro_MacroTools.__name__ = ["tannus","macro","MacroTools"];
var tannus_math__$Percent_Percent_$Impl_$ = {};
$hxClasses["tannus.math._Percent.Percent_Impl_"] = tannus_math__$Percent_Percent_$Impl_$;
tannus_math__$Percent_Percent_$Impl_$.__name__ = ["tannus","math","_Percent","Percent_Impl_"];
tannus_math__$Percent_Percent_$Impl_$.__properties__ = {set_delta:"set_delta",get_delta:"get_delta",set_value:"set_value",get_value:"get_value"}
tannus_math__$Percent_Percent_$Impl_$._new = function(f) {
	return f;
};
tannus_math__$Percent_Percent_$Impl_$.get_value = function(this1) {
	return this1;
};
tannus_math__$Percent_Percent_$Impl_$.set_value = function(this1,nv) {
	return this1 = nv;
};
tannus_math__$Percent_Percent_$Impl_$.get_delta = function(this1) {
	return this1 / 100;
};
tannus_math__$Percent_Percent_$Impl_$.set_delta = function(this1,v) {
	return this1 = v * 100;
};
tannus_math__$Percent_Percent_$Impl_$.toDelta = function(this1) {
	return this1 / 100;
};
tannus_math__$Percent_Percent_$Impl_$.complement = function(this1) {
	return 100 - this1;
};
tannus_math__$Percent_Percent_$Impl_$.plus = function(this1,other) {
	return this1 + other;
};
tannus_math__$Percent_Percent_$Impl_$.minus = function(this1,other) {
	return this1 - other;
};
tannus_math__$Percent_Percent_$Impl_$.preincrement = function(this1) {
	return ++this1;
};
tannus_math__$Percent_Percent_$Impl_$.postincrement = function(this1) {
	return this1++;
};
tannus_math__$Percent_Percent_$Impl_$.decrement = function(this1) {
	return --this1;
};
tannus_math__$Percent_Percent_$Impl_$.percent = function(what,of) {
	return what / of * 100;
};
tannus_math__$Percent_Percent_$Impl_$.toString = function(this1) {
	return "" + this1 + "%";
};
var tannus_math_Random = $hx_exports.Random = function(seed) {
	if(seed != null) this.state = seed; else this.state = Math.floor(Math.random() * 2147483647);
};
$hxClasses["tannus.math.Random"] = tannus_math_Random;
tannus_math_Random.__name__ = ["tannus","math","Random"];
tannus_math_Random.stringSeed = function(seed) {
	var state = 0;
	var ba = tannus_io_impl_BrowserBinary.ofString(seed);
	var $it0 = ba.iterator();
	while( $it0.hasNext() ) {
		var bit = $it0.next();
		seed += bit;
	}
	return new tannus_math_Random(state);
};
tannus_math_Random.prototype = {
	nextInt: function() {
		this.state = (1103515245.0 * this.state + 12345) % 2147483647;
		return this.state;
	}
	,nextFloat: function() {
		return this.nextInt() / 2147483647;
	}
	,reset: function(value) {
		this.state = value;
	}
	,randint: function(min,max) {
		return Math.floor(this.nextFloat() * (max - min + 1) + min);
	}
	,chance: function(chances,choices,shuffleAll) {
		if(shuffleAll == null) shuffleAll = true;
		if(tannus_math_TMath.sum_Int(chances) != 100) throw new js__$Boot_HaxeError(new tannus_utils_JavaScriptError("RandomError: The [chances] parameter for tannus.math.Random::chance must add up to 100")); else if(chances.length != choices.length) throw new js__$Boot_HaxeError(new tannus_utils_JavaScriptError("RandomError: The [chances] and [choices] parameters for tannus.math.Random::chance must be of the same length")); else {
			var all = [];
			var _g1 = 0;
			var _g = chances.length;
			while(_g1 < _g) {
				var index = _g1++;
				var count = chances[index];
				var value = choices[index];
				var _g2 = 0;
				while(_g2 < count) {
					var i = _g2++;
					all.push(value);
				}
			}
			if(shuffleAll) all = this.shuffle(all);
			return this.choice(all);
		}
	}
	,randchance: function(top,bottom) {
		var choices;
		var _g = [];
		var _g1 = 0;
		while(_g1 < bottom) {
			var i = _g1++;
			_g.push(i);
		}
		choices = _g;
		var correct = [];
		while(correct.length < top) {
			var cnum = this.choice(choices);
			if(!Lambda.has(correct,cnum)) correct.push(cnum);
		}
		return Lambda.has(correct,this.randint(top,bottom));
	}
	,randbool: function() {
		return this.randint(0,1) == 1;
	}
	,choice: function(set) {
		return set[this.randint(0,set.length - 1)];
	}
	,sample: function(set,size) {
		var sampleSize;
		if(size == null) sampleSize = this.randint(0,set.length); else sampleSize = size;
		var items = [];
		while(items.length < sampleSize) {
			var ritem = this.choice(set);
			if(!Lambda.has(items,ritem)) items.push(ritem);
		}
		return items;
	}
	,shuffle: function(set) {
		var copy = set.slice();
		var result = [];
		if(copy.length > 0) {
			while(copy.length != 1) {
				var el = this.choice(copy);
				HxOverrides.remove(copy,el);
				result.push(el);
			}
			result.push(copy.pop());
		}
		return result;
	}
	,enumConstruct: function(_enum) {
		var name = this.choice(Type.getEnumConstructs(_enum));
		return (function(f,e,a1) {
			return function(a2) {
				return f(e,a1,a2);
			};
		})(Type.createEnum,_enum,name);
	}
	,pointInRect: function(rect) {
		var x = this.randint(Math.floor(rect.x),Math.floor(rect.x + rect.width));
		var y = this.randint(Math.floor(rect.y),Math.floor(rect.y + rect.height));
		return new tannus_geom_TPoint(x,y,0);
	}
	,__class__: tannus_math_Random
};
var tannus_math_RandomTools = function() { };
$hxClasses["tannus.math.RandomTools"] = tannus_math_RandomTools;
tannus_math_RandomTools.__name__ = ["tannus","math","RandomTools"];
tannus_math_RandomTools.__properties__ = {get_rand:"get_rand"}
tannus_math_RandomTools.randint = function(range) {
	return new tannus_math_Random().randint(range[0],range[1]);
};
tannus_math_RandomTools.between = function(r) {
	return r.min - r.min + new tannus_math_Random().randint(r.min | 0,r.max | 0);
};
tannus_math_RandomTools.choice = function(set) {
	return new tannus_math_Random().choice(set);
};
tannus_math_RandomTools.chance = function(choices,chances,shuffleAll) {
	if(shuffleAll == null) shuffleAll = true;
	return new tannus_math_Random().chance(chances,choices,shuffleAll);
};
tannus_math_RandomTools.sample = function(list,size) {
	return new tannus_math_Random().sample(list,size);
};
tannus_math_RandomTools.shuffle = function(set) {
	return new tannus_math_Random().shuffle(set);
};
tannus_math_RandomTools.randomConstruct = function(enumer) {
	return new tannus_math_Random().enumConstruct(enumer);
};
tannus_math_RandomTools.get_rand = function() {
	return new tannus_math_Random();
};
var tannus_math__$Ratio_Ratio_$Impl_$ = {};
$hxClasses["tannus.math._Ratio.Ratio_Impl_"] = tannus_math__$Ratio_Ratio_$Impl_$;
tannus_math__$Ratio_Ratio_$Impl_$.__name__ = ["tannus","math","_Ratio","Ratio_Impl_"];
tannus_math__$Ratio_Ratio_$Impl_$._new = function(top,bottom) {
	return new tannus_math_CRatio(top,bottom);
};
tannus_math__$Ratio_Ratio_$Impl_$.equals = function(this1,other) {
	return this1.equals(other);
};
tannus_math__$Ratio_Ratio_$Impl_$.toFloat = function(this1) {
	return this1.toFloat();
};
tannus_math__$Ratio_Ratio_$Impl_$.toString = function(this1) {
	return this1.toString();
};
tannus_math__$Ratio_Ratio_$Impl_$.toPercent = function(this1) {
	return this1.toPercent();
};
tannus_math__$Ratio_Ratio_$Impl_$.fromFloatArray = function(a) {
	return new tannus_math_CRatio(a[0],a[1]);
};
tannus_math__$Ratio_Ratio_$Impl_$.fromIntArray = function(a) {
	return new tannus_math_CRatio(a[0],a[1]);
};
var tannus_math_CRatio = function(t,b) {
	this.top = t;
	this.bottom = b;
};
$hxClasses["tannus.math.CRatio"] = tannus_math_CRatio;
tannus_math_CRatio.__name__ = ["tannus","math","CRatio"];
tannus_math_CRatio.prototype = {
	bottomValue: function(topValue) {
		return topValue / this.top * this.bottom;
	}
	,topValue: function(bottomValue) {
		return bottomValue / this.bottom * this.top;
	}
	,toFloat: function() {
		return this.top / this.bottom;
	}
	,toString: function() {
		return "" + this.top + " / " + this.bottom;
	}
	,toPercent: function() {
		return tannus_math__$Percent_Percent_$Impl_$.percent(this.top,this.bottom);
	}
	,equals: function(other) {
		return this.toFloat() == other.toFloat();
	}
	,reciprocal: function() {
		var bottom = this.toFloat();
		return new tannus_math_CRatio(1,bottom);
	}
	,get_percent: function() {
		return this.toPercent();
	}
	,__class__: tannus_math_CRatio
	,__properties__: {get_percent:"get_percent"}
};
var tannus_math_TMath = $hx_exports.TMath = function() { };
$hxClasses["tannus.math.TMath"] = tannus_math_TMath;
tannus_math_TMath.__name__ = ["tannus","math","TMath"];
tannus_math_TMath.clamp_Float = function(value,min,max) {
	if(value < min) return min; else if(value > max) return max; else return value;
};
tannus_math_TMath.sum_Int = function(list) {
	var res = null;
	var _g = 0;
	while(_g < list.length) {
		var item = list[_g];
		++_g;
		if(!(res != null)) res = item; else res = (res != null?res:res) + item;
	}
	return res;
};
tannus_math_TMath.clamp_Int = function(value,min,max) {
	if(value < min) return min; else if(value > max) return max; else return value;
};
tannus_math_TMath.sum_Float = function(list) {
	var res = null;
	var _g = 0;
	while(_g < list.length) {
		var item = list[_g];
		++_g;
		if(!(res != null)) res = item; else res = (res != null?res:res) + item;
	}
	return res;
};
tannus_math_TMath.toRadians = function(degrees) {
	return degrees * 3.141592653589793 / 180;
};
tannus_math_TMath.toDegrees = function(radians) {
	return radians * 180 / 3.141592653589793;
};
tannus_math_TMath.angleBetween = function(x1,y1,x2,y2) {
	return tannus_math_TMath.toDegrees(Math.atan2(y2 - y1,x2 - x1));
};
tannus_math_TMath.toFixed = function(n,c) {
	if(c == null) c = 0;
	var sn = Std.string(n);
	var bd = tannus_ds_StringUtils.before(sn,".");
	var wn = Std.parseInt(bd);
	var ad = "";
	var res = wn + "";
	if(tannus_ds_StringUtils.has(sn,".")) {
		ad = tannus_ds_StringUtils.after(sn,".");
		var sl = tannus_ds_StringUtils.slice(ad,0,c);
		if(ad.length > sl.length) {
			sl = tannus_ds_StringUtils.slice(ad,0,c + 1);
			var idec = Std.parseInt(sl);
			idec = Math.round(idec / 10);
			res += "." + idec;
		} else res += "." + sl;
	}
	return res;
};
tannus_math_TMath.max = function(a,b) {
	if(a > b) return a; else return b;
};
tannus_math_TMath.min = function(a,b) {
	if(a < b) return a; else return b;
};
tannus_math_TMath.maxr = function(nums) {
	var m = null;
	var $it0 = $iterator(nums)();
	while( $it0.hasNext() ) {
		var n = $it0.next();
		if(m == null) m = n;
		m = n > m?n:m;
	}
	return m;
};
tannus_math_TMath.minr = function(nums) {
	var m = null;
	var _g = 0;
	while(_g < nums.length) {
		var n = nums[_g];
		++_g;
		if(m == null) m = n;
		m = n < m?n:m;
	}
	return m;
};
tannus_math_TMath.range = function(nums) {
	var mi = null;
	var ma = null;
	var _g = 0;
	while(_g < nums.length) {
		var n = nums[_g];
		++_g;
		if(mi == null) mi = n;
		if(ma == null) ma = n;
		mi = n < mi?n:mi;
		ma = n > ma?n:ma;
	}
	return new tannus_ds_Range(mi,ma);
};
tannus_math_TMath.lerp = function(a,b,x) {
	return a + x * (b - a);
};
tannus_math_TMath.almostEquals = function(n,v,threshold) {
	return Math.abs(n - v) <= threshold;
};
tannus_math_TMath.i = function(f) {
	return f | 0;
};
tannus_math_TMath.roundFloat = function(f,digit) {
	var n = Math.pow(10,digit);
	var r = Math.round(f * n) / n;
	return r;
};
tannus_math_TMath.average = function(values) {
	var sum = 0;
	var _g = 0;
	while(_g < values.length) {
		var n = values[_g];
		++_g;
		sum += n;
	}
	return sum / values.length;
};
tannus_math_TMath.largest = function(items,predicate) {
	var highest = 0;
	var $it0 = $iterator(items)();
	while( $it0.hasNext() ) {
		var item = $it0.next();
		highest = tannus_math_TMath.max(highest,predicate(item));
	}
	return highest;
};
tannus_math_TMath.smallest = function(items,predicate) {
	var lowest = 0;
	var $it0 = $iterator(items)();
	while( $it0.hasNext() ) {
		var item = $it0.next();
		lowest = tannus_math_TMath.min(lowest,predicate(item));
	}
	return lowest;
};
tannus_math_TMath.largestItem = function(items,predicate) {
	var asarr = Lambda.array(items);
	if(asarr.length == 0) return null; else if(asarr.length == 1) return asarr[0]; else if(asarr.length == 2) {
		var px = predicate(asarr[0]);
		var py = predicate(asarr[1]);
		if(px >= py) return asarr[0]; else return asarr[1];
	} else {
		var best = null;
		var $it0 = $iterator(items)();
		while( $it0.hasNext() ) {
			var item = $it0.next();
			var score = predicate(item);
			if(best == null || score > best.score) best = { 'item' : item, 'score' : score};
		}
		return best.item;
	}
};
tannus_math_TMath.minmax = function(items,predicate) {
	var res = new tannus_ds_FloatRange(NaN,NaN);
	var $it0 = $iterator(items)();
	while( $it0.hasNext() ) {
		var item = $it0.next();
		var score = predicate(item);
		if(res.max < score || isNaN(res.max)) res.max = score; else if(res.min > score || isNaN(res.min)) res.min = score;
		if(res.min > res.max) {
			var _t = res.max;
			res.max = res.min;
			res.min = _t;
		}
	}
	return res;
};
tannus_math_TMath.sign = function(value) {
	if(value < 0) return -1; else if(value > 0) return 1; else return 0;
};
tannus_math_TMath.sumf = function(set,extractor) {
	var res = null;
	var $it0 = $iterator(set)();
	while( $it0.hasNext() ) {
		var item = $it0.next();
		if(res != null) res = res + extractor(item); else res = extractor(item);
	}
	return res;
};
tannus_math_TMath.sampleVariance = function(data) {
	var sampleSize = data.length;
	if(sampleSize < 2) return 0;
	var mean = tannus_math_TMath.average(data);
	return tannus_math_TMath.sum_Float(data.map(function(val) {
		return Math.pow(val - mean,2);
	})) / (sampleSize - 1);
};
tannus_math_TMath.standardDeviation = function(data) {
	return Math.sqrt(tannus_math_TMath.sampleVariance(data));
};
tannus_math_TMath.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) return 0.0;
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
tannus_math_TMath.floatToI32 = function(f) {
	if(f == 0) return 0;
	var af;
	if(f < 0) af = -f; else af = f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) exp = -127; else if(exp > 128) exp = 128;
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608) & 8388607;
	return (f < 0?-2147483648:0) | exp + 127 << 23 | sig;
};
tannus_math_TMath.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) return 0.0;
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
tannus_math_TMath.snap = function(value,min,step,max) {
	if(value < min) return min; else if(max != null && value > max) return max; else {
		var v = min;
		while(true) {
			if(value <= v) {
				var prev = v - step;
				if(value >= prev) {
					if(v - value < value - prev) return v; else return prev;
				}
			}
			v += step;
		}
	}
};
tannus_math_TMath.prettify = function(num,dec) {
	if(dec == null) dec = 0;
	var i = num | 0;
	var si;
	if(i == null) si = "null"; else si = "" + i;
	console.log(si);
	var res;
	var this1;
	this1 = tannus_io_impl_BrowserBinary.alloc(0);
	res = this1;
	var index = si.length - 1;
	while(index >= 0) {
		var c = tannus_ds_StringUtils.byteAt(si,index);
		res.push(c);
		if((index + 1) % 3 == 0) res.push(44);
		index--;
	}
	res.reverse();
	return res.toString();
};
var tannus_media__$Duration_Duration_$Impl_$ = {};
$hxClasses["tannus.media._Duration.Duration_Impl_"] = tannus_media__$Duration_Duration_$Impl_$;
tannus_media__$Duration_Duration_$Impl_$.__name__ = ["tannus","media","_Duration","Duration_Impl_"];
tannus_media__$Duration_Duration_$Impl_$._new = function(s,m,h) {
	if(h == null) h = 0;
	if(m == null) m = 0;
	if(s == null) s = 0;
	return new tannus_media_CDur(s,m,h);
};
tannus_media__$Duration_Duration_$Impl_$.equals = function(this1,other) {
	return this1.equals(other);
};
tannus_media__$Duration_Duration_$Impl_$.nequals = function(this1,other) {
	return !this1.equals(other);
};
tannus_media__$Duration_Duration_$Impl_$.gt = function(this1,other) {
	return 3600 * this1.hours + 60 * this1.minutes + this1.seconds > 3600 * other.hours + 60 * other.minutes + other.seconds;
};
tannus_media__$Duration_Duration_$Impl_$.lt = function(this1,other) {
	return 3600 * this1.hours + 60 * this1.minutes + this1.seconds < 3600 * other.hours + 60 * other.minutes + other.seconds;
};
tannus_media__$Duration_Duration_$Impl_$.plus = function(this1,other) {
	return this1.plus(other);
};
tannus_media__$Duration_Duration_$Impl_$.toString = function(this1) {
	return this1.toString();
};
tannus_media__$Duration_Duration_$Impl_$.toInt = function(this1) {
	return 3600 * this1.hours + 60 * this1.minutes + this1.seconds;
};
tannus_media__$Duration_Duration_$Impl_$.toFloat = function(this1) {
	return 3600 * this1.hours + 60 * this1.minutes + this1.seconds + 0.0;
};
tannus_media__$Duration_Duration_$Impl_$.fromSecondsI = function(i) {
	return tannus_media_CDur.fromSecondsI(i);
};
tannus_media__$Duration_Duration_$Impl_$.fromSecondsF = function(n) {
	return tannus_media_CDur.fromSecondsI(Math.floor(n));
};
tannus_media__$Duration_Duration_$Impl_$.fromString = function(s) {
	return tannus_media_CDur.fromString(s);
};
tannus_media__$Duration_Duration_$Impl_$.fromIntArray = function(a) {
	return tannus_media__$Duration_Duration_$Impl_$._new(a[0],a[1],a[2]);
};
var tannus_media_CDur = $hx_exports.tannus.media.Duration = function(s,m,h) {
	this.seconds = s;
	this.minutes = m;
	this.hours = h;
};
$hxClasses["tannus.media.CDur"] = tannus_media_CDur;
tannus_media_CDur.__name__ = ["tannus","media","CDur"];
tannus_media_CDur.__interfaces__ = [tannus_ds_Comparable];
tannus_media_CDur.fromSecondsI = function(i) {
	var d = tannus_media__$Duration_Duration_$Impl_$._new();
	d.set_totalSeconds(i);
	return d;
};
tannus_media_CDur.fromInt = function(i) {
	return tannus_media_CDur.fromSecondsI(i);
};
tannus_media_CDur.fromSecondsF = function(n) {
	return tannus_media_CDur.fromSecondsI(Math.floor(n));
};
tannus_media_CDur.fromFloat = function(n) {
	return tannus_media_CDur.fromSecondsI(Math.floor(n));
};
tannus_media_CDur.fromString = function(s) {
	var data = StringTools.trim(s).split(":").map(Std.parseInt);
	switch(data.length) {
	case 1:
		var s1 = data[0];
		return tannus_media__$Duration_Duration_$Impl_$._new(s1);
	case 2:
		var s2 = data[1];
		var m = data[0];
		return tannus_media__$Duration_Duration_$Impl_$._new(s2,m);
	case 3:
		var s3 = data[2];
		var m1 = data[1];
		var h = data[0];
		return tannus_media__$Duration_Duration_$Impl_$._new(s3,m1,h);
	default:
		throw new js__$Boot_HaxeError("Invalid Duration string \"" + s + "\"");
	}
};
tannus_media_CDur.fromIntArray = function(a) {
	return tannus_media__$Duration_Duration_$Impl_$._new(a[0],a[1],a[2]);
};
tannus_media_CDur.prototype = {
	toString: function() {
		var bits = [];
		bits.unshift(this.seconds + "");
		bits.unshift(this.minutes + "");
		if(this.hours > 0) bits.unshift(this.hours + "");
		bits = bits.map(function(s) {
			if(s.length < 2) s = tannus_ds_StringUtils.times("0",2 - s.length) + s;
			return s;
		});
		return bits.join(":");
	}
	,equals: function(other) {
		return this.seconds == other.seconds && this.minutes == other.minutes && this.hours == other.hours;
	}
	,greaterThan: function(other) {
		return 3600 * this.hours + 60 * this.minutes + this.seconds > 3600 * other.hours + 60 * other.minutes + other.seconds;
	}
	,lessThan: function(other) {
		return 3600 * this.hours + 60 * this.minutes + this.seconds < 3600 * other.hours + 60 * other.minutes + other.seconds;
	}
	,compare: function(other) {
		if(this.equals(other)) return 0; else if(3600 * this.hours + 60 * this.minutes + this.seconds > 3600 * other.hours + 60 * other.minutes + other.seconds) return 1; else return -1;
	}
	,plus: function(other) {
		return tannus_media_CDur.fromSecondsI(3600 * this.hours + 60 * this.minutes + this.seconds + (3600 * other.hours + 60 * other.minutes + other.seconds));
	}
	,toInt: function() {
		return 3600 * this.hours + 60 * this.minutes + this.seconds;
	}
	,toFloat: function() {
		return 3600 * this.hours + 60 * this.minutes + this.seconds + 0.0;
	}
	,get_totalHours: function() {
		return Math.floor(this.hours + this.minutes / 60.0);
	}
	,get_totalMinutes: function() {
		return Math.floor(60 * this.hours + this.minutes + this.seconds / 60.0);
	}
	,get_totalSeconds: function() {
		return 3600 * this.hours + 60 * this.minutes + this.seconds;
	}
	,set_totalSeconds: function(v) {
		this.hours = Math.floor(v / 3600);
		v = v - this.hours * 3600;
		this.minutes = Math.floor(v / 60);
		this.seconds = v - this.minutes * 60;
		return 3600 * this.hours + 60 * this.minutes + this.seconds;
	}
	,__class__: tannus_media_CDur
	,__properties__: {set_totalSeconds:"set_totalSeconds",get_totalSeconds:"get_totalSeconds",get_totalMinutes:"get_totalMinutes",get_totalHours:"get_totalHours"}
};
var tannus_mvc_BaseAttribute = function() {
	this.change = new tannus_io_Signal();
	this.keychange = new tannus_io_Signal();
	this.keys = [];
};
$hxClasses["tannus.mvc.BaseAttribute"] = tannus_mvc_BaseAttribute;
tannus_mvc_BaseAttribute.__name__ = ["tannus","mvc","BaseAttribute"];
tannus_mvc_BaseAttribute.prototype = {
	get: function() {
		throw new js__$Boot_HaxeError(new tannus_utils_JavaScriptError("Not implemented"));
	}
	,set: function(value) {
		throw new js__$Boot_HaxeError(new tannus_utils_JavaScriptError("Not implemented"));
	}
	,'delete': function() {
		return false;
	}
	,dispose: function() {
		null;
	}
	,exists: function() {
		return false;
	}
	,allockey: function(key) {
		if(!Lambda.has(this.keys,key)) this.keys.push(key);
	}
	,deallockey: function(key) {
		return HxOverrides.remove(this.keys,key);
	}
	,defaultValue: function() {
		throw new js__$Boot_HaxeError(new tannus_utils_JavaScriptError("Not implemented"));
	}
	,get_value: function() {
		return this.get();
	}
	,set_value: function(v) {
		return this.set(v);
	}
	,get_v: function() {
		return this.get();
	}
	,set_v: function(v) {
		return this.set(v);
	}
	,__class__: tannus_mvc_BaseAttribute
	,__properties__: {set_v:"set_v",get_v:"get_v",set_value:"set_value",get_value:"get_value"}
};
var tannus_mvc_Attribute = function(m,n) {
	tannus_mvc_BaseAttribute.call(this);
	this.model = m;
	this.name = n;
	this.model.watch($bind(this,this.onchange));
};
$hxClasses["tannus.mvc.Attribute"] = tannus_mvc_Attribute;
tannus_mvc_Attribute.__name__ = ["tannus","mvc","Attribute"];
tannus_mvc_Attribute.__super__ = tannus_mvc_BaseAttribute;
tannus_mvc_Attribute.prototype = $extend(tannus_mvc_BaseAttribute.prototype,{
	unbind: function() {
		this.model.unwatch($bind(this,this.onchange));
	}
	,rebind: function(m) {
		this.unbind();
		this.model = m;
		this.model.watch($bind(this,this.onchange));
	}
	,get: function() {
		if(!this.exists()) return this.set(this.defaultValue()); else return this.model.getAttribute(this.name);
	}
	,set: function(value) {
		return this.model.setAttribute(this.name,value);
	}
	,kg: function(key) {
		return this.model.getAttribute(key);
	}
	,ks: function(key,value) {
		return this.model.setAttribute(key,value);
	}
	,'delete': function() {
		return this.model.removeAttribute(this.name);
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.keys;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			this.deallockey(key);
		}
		this.model.am.removeAttribute(this);
	}
	,exists: function() {
		return this.model.hasAttribute(this.name);
	}
	,allockey: function(key) {
		this.model.am.allockey(this,key);
		tannus_mvc_BaseAttribute.prototype.allockey.call(this,key);
	}
	,deallockey: function(key) {
		var r = tannus_mvc_BaseAttribute.prototype.deallockey.call(this,key);
		this.model.removeAttribute(key);
		return r;
	}
	,onchange: function(mc) {
		if(mc.name == this.name) this.change.broadcast(mc.value); else if(Lambda.has(this.keys,mc.name)) this.keychange.broadcast(mc.value); else return;
	}
	,__listen: function() {
		this.model.watch($bind(this,this.onchange));
	}
	,__class__: tannus_mvc_Attribute
});
var tannus_mvc_Collection = function() {
	this.a = [];
};
$hxClasses["tannus.mvc.Collection"] = tannus_mvc_Collection;
tannus_mvc_Collection.__name__ = ["tannus","mvc","Collection"];
tannus_mvc_Collection.prototype = {
	addAttribute: function(attr) {
		this.validate(attr);
		this.a.push(attr);
	}
	,removeAttribute: function(attr) {
		return HxOverrides.remove(this.a,attr);
	}
	,getAttribute: function(n) {
		var _g = 0;
		var _g1 = this.a;
		while(_g < _g1.length) {
			var x = _g1[_g];
			++_g;
			if(x.name == n) return x;
		}
		return null;
	}
	,validate: function(attr) {
		var vkeys = [attr.name].concat(attr.keys);
		var _g = 0;
		var _g1 = this.a;
		while(_g < _g1.length) {
			var x = _g1[_g];
			++_g;
			if(x != attr && x.name == attr.name) throw new js__$Boot_HaxeError(new tannus_utils_JavaScriptError("AttributeError: There is already an Attribute named \"" + x.name + "\" attached to [this] Collection")); else {
				var skol = tannus_ds_ArrayTools.union(x.keys,attr.keys);
				if(skol.length > 0) throw new js__$Boot_HaxeError((function($this) {
					var $r;
					var message = "AttributeError: Attribute \"" + attr.name + "\" has the following keys in common with another Attribute: (" + skol.join(", ") + ")";
					$r = new tannus_utils_JavaScriptError(message);
					return $r;
				}(this))); else {
					var gol = tannus_ds_ArrayTools.union([x.name].concat(x.keys),[attr.name].concat(attr.keys));
					if(!Lambda.empty(gol)) throw new js__$Boot_HaxeError(new tannus_utils_JavaScriptError("AttributeError: Attribute \"" + attr.name + "\" utilizes keys already in use by another Attribute"));
				}
			}
		}
	}
	,__class__: tannus_mvc_Collection
};
var tannus_mvc_ListAttribute = function(model,name) {
	tannus_mvc_Attribute.call(this,model,name);
	this.set(0);
};
$hxClasses["tannus.mvc.ListAttribute"] = tannus_mvc_ListAttribute;
tannus_mvc_ListAttribute.__name__ = ["tannus","mvc","ListAttribute"];
tannus_mvc_ListAttribute.__super__ = tannus_mvc_Attribute;
tannus_mvc_ListAttribute.prototype = $extend(tannus_mvc_Attribute.prototype,{
	getItem: function(index) {
		if(index >= this.get() || index < 0) throw new js__$Boot_HaxeError(new tannus_utils_JavaScriptError("IndexOutOfBoundsError: List index " + index + " does not exist"));
		return this.kg("" + this.name + "[" + index + "]");
	}
	,setItem: function(index,value) {
		if(index >= this.get() || index < 0) throw new js__$Boot_HaxeError(new tannus_utils_JavaScriptError("IndexOutOfBoundsError: List index " + index + " does not exist"));
		return this.ks("" + this.name + "[" + index + "]",value);
	}
	,removeItem: function(index) {
		var before = this.slice(0,index);
		var after = this.slice(index + 1);
		this.truncate(this.get() - 1);
		this.deallockey(this.ikey(this.get()));
		var all = before.concat(after);
		var _g1 = 0;
		var _g = all.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.setItem(i,all[i]);
		}
	}
	,remove: function(x) {
		var _g1 = 0;
		var _g = this.get();
		while(_g1 < _g) {
			var index = _g1++;
			var item = this.getItem(index);
			if(item == x) {
				this.removeItem(index);
				return true;
			}
		}
		return false;
	}
	,slice: function(index,end) {
		if(end == null) end = this.get();
		var _g = [];
		var _g1 = index;
		while(_g1 < end) {
			var i = _g1++;
			_g.push(this.getItem(i));
		}
		return _g;
	}
	,concat: function(arr) {
		return this.list().concat(arr);
	}
	,append: function(tail) {
		var _g = 0;
		while(_g < tail.length) {
			var x = tail[_g];
			++_g;
			this.push(x);
		}
	}
	,push: function(item) {
		var index = this.get();
		this.truncate(index + 1);
		this.setItem(index,item);
		return this.get();
	}
	,unshift: function(item) {
		var l = this.list();
		this.setItem(0,item);
		this.truncate(this.get() + 1);
		var _g1 = 1;
		var _g = this.get();
		while(_g1 < _g) {
			var i = _g1++;
			this.setItem(i,l[i - 1]);
		}
	}
	,shift: function() {
		if(this.get() > 0) {
			var first = this.getItem(0);
			var all = this.slice(1);
			this.truncate(this.get() - 1);
			var _g1 = 0;
			var _g = all.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.setItem(i,all[i]);
			}
			return first;
		} else return null;
	}
	,pop: function() {
		if(this.get() > 0) {
			var last = this.getItem(this.get() - 1);
			this.truncate(this.get() - 1);
			return last;
		} else return null;
	}
	,indexOf: function(item) {
		var _g1 = 0;
		var _g = this.get();
		while(_g1 < _g) {
			var index = _g1++;
			if(this.getItem(index) == item) return index;
		}
		return -1;
	}
	,lastIndexOf: function(item) {
		var i = this.get();
		while(i > 0) if(this.getItem(--i) == item) return i;
		console.log(i);
		return -1;
	}
	,insert: function(index,item) {
		if(index < 0) {
			index = this.get() + index;
			if(index < 0) index = 0;
		}
		if(index >= this.get()) {
			this.push(item);
			return;
		} else if(index == 0) {
			this.unshift(item);
			return;
		}
		var l = this.get();
		this.truncate(l + 1);
		var ii = l - 1;
		while(ii >= index) this.setItem(ii + 1,this.getItem(ii--));
		this.setItem(index,item);
	}
	,reverse: function() {
		var _g1 = 0;
		var _g = Math.floor(this.get() / 2);
		while(_g1 < _g) {
			var index = _g1++;
			var temp = this.getItem(index);
			this.setItem(index,this.getItem(this.get() - index - 1));
			this.setItem(this.get() - index - 1,temp);
		}
	}
	,list: function() {
		return Lambda.array(this);
	}
	,iterator: function() {
		return new tannus_mvc_ListAttributeIter(this);
	}
	,truncate: function(mlen) {
		if(this.get() > mlen) {
			var _g1 = mlen + 1;
			var _g = this.get();
			while(_g1 < _g) {
				var index = _g1++;
				this.deallockey("" + this.name + "[" + index + "]");
			}
		} else if(mlen > this.get()) {
			var _g2 = this.get();
			while(_g2 < mlen) {
				var index1 = _g2++;
				this.allockey("" + this.name + "[" + index1 + "]");
			}
		}
		this.set(mlen);
	}
	,ikey: function(index) {
		return "" + this.name + "[" + index + "]";
	}
	,vi: function(index) {
		if(index >= this.get() || index < 0) throw new js__$Boot_HaxeError(new tannus_utils_JavaScriptError("IndexOutOfBoundsError: List index " + index + " does not exist"));
	}
	,get_length: function() {
		return this.get();
	}
	,__class__: tannus_mvc_ListAttribute
	,__properties__: $extend(tannus_mvc_Attribute.prototype.__properties__,{get_length:"get_length"})
});
var tannus_mvc_ListAttributeIter = function(l) {
	this.a = l;
	this.i = 0;
};
$hxClasses["tannus.mvc.ListAttributeIter"] = tannus_mvc_ListAttributeIter;
tannus_mvc_ListAttributeIter.__name__ = ["tannus","mvc","ListAttributeIter"];
tannus_mvc_ListAttributeIter.prototype = {
	hasNext: function() {
		return this.i < this.a.get();
	}
	,next: function() {
		return this.a.getItem(this.i++);
	}
	,__class__: tannus_mvc_ListAttributeIter
};
var tannus_mvc_ModelCollection = function(m) {
	tannus_mvc_Collection.call(this);
	this.model = m;
};
$hxClasses["tannus.mvc.ModelCollection"] = tannus_mvc_ModelCollection;
tannus_mvc_ModelCollection.__name__ = ["tannus","mvc","ModelCollection"];
tannus_mvc_ModelCollection.__super__ = tannus_mvc_Collection;
tannus_mvc_ModelCollection.prototype = $extend(tannus_mvc_Collection.prototype,{
	allockey: function(allocer,key) {
		var _g = 0;
		var _g1 = this.a;
		while(_g < _g1.length) {
			var atr = _g1[_g];
			++_g;
			if(atr != allocer && (atr.name == key || Lambda.has(atr.keys,key))) throw new js__$Boot_HaxeError(new tannus_utils_JavaScriptError("AttributeError: Attempted to allocate key \"" + key + "\" (already allocated by the \"" + atr.name + "\" Attribute)"));
		}
	}
	,__class__: tannus_mvc_ModelCollection
});
var tannus_mvc_Requirements = function() {
	this.tasks = new haxe_ds_StringMap();
	this.complete = new tannus_io_VoidSignal();
};
$hxClasses["tannus.mvc.Requirements"] = tannus_mvc_Requirements;
tannus_mvc_Requirements.__name__ = ["tannus","mvc","Requirements"];
tannus_mvc_Requirements.prototype = {
	add: function(name,task) {
		this.tasks.set(name,task);
	}
	,onComplete: function(f) {
		this.complete.on(f);
	}
	,meet: function(cb) {
		if(cb != null) this.complete.on(cb);
		var stack = new tannus_ds_AsyncStack();
		var $it0 = this.tasks.keys();
		while( $it0.hasNext() ) {
			var name = $it0.next();
			stack.under(this.tasks.get(name));
		}
		stack.run(($_=this.complete,$bind($_,$_.fire)));
	}
	,__class__: tannus_mvc_Requirements
};
var tannus_nlp_Lexer = function() {
};
$hxClasses["tannus.nlp.Lexer"] = tannus_nlp_Lexer;
tannus_nlp_Lexer.__name__ = ["tannus","nlp","Lexer"];
tannus_nlp_Lexer.tokenizeString = function(s) {
	return new tannus_nlp_Lexer().tokenize(s);
};
tannus_nlp_Lexer.prototype = {
	tokenize: function(s) {
		this.buffer = new tannus_io_ByteStack(tannus_io_impl_BrowserBinary.ofString(s));
		this.words = [];
		while(!this.buffer.get_empty()) {
			var w = this.nextWord();
			if(w == null) break; else this.words.push(w);
		}
		return this.words;
	}
	,nextWord: function() {
		var c = this.buffer.peek();
		if(Lambda.has([9,10,11,12,13,32],c)) {
			this.buffer.pop();
			return this.nextWord();
		} else if(this.buffer.get_empty()) return null; else {
			var str = "";
			var this1 = this.buffer.pop();
			str += String.fromCharCode(this1);
			while(!this.buffer.get_empty() && !(function($this) {
				var $r;
				var this2 = $this.buffer.peek();
				$r = Lambda.has([9,10,11,12,13,32],this2);
				return $r;
			}(this))) {
				var this3 = this.buffer.pop();
				str += String.fromCharCode(this3);
			}
			var hasletter = false;
			var _g1 = 0;
			var _g = str.length;
			while(_g1 < _g) {
				var i = _g1++;
				if((function($this) {
					var $r;
					var this4 = tannus_ds_StringUtils.byteAt(str,i);
					$r = this4 >= 65 && this4 <= 90 || this4 >= 97 && this4 <= 122;
					return $r;
				}(this))) {
					hasletter = true;
					break;
				}
			}
			if(hasletter) return str; else if(this.buffer.get_empty()) return null; else return this.nextWord();
		}
	}
	,next: function() {
		return this.buffer.peek();
	}
	,advance: function() {
		return this.buffer.pop();
	}
	,__class__: tannus_nlp_Lexer
};
var tannus_nlp__$Word_Word_$Impl_$ = {};
$hxClasses["tannus.nlp._Word.Word_Impl_"] = tannus_nlp__$Word_Word_$Impl_$;
tannus_nlp__$Word_Word_$Impl_$.__name__ = ["tannus","nlp","_Word","Word_Impl_"];
tannus_nlp__$Word_Word_$Impl_$.__properties__ = {get_iscapitalized:"get_iscapitalized",get_isupper:"get_isupper",get_islower:"get_islower"}
tannus_nlp__$Word_Word_$Impl_$._new = function(s) {
	return s;
};
tannus_nlp__$Word_Word_$Impl_$.lower = function(this1) {
	var s = this1.toLowerCase();
	return s;
};
tannus_nlp__$Word_Word_$Impl_$.upper = function(this1) {
	var s = this1.toUpperCase();
	return s;
};
tannus_nlp__$Word_Word_$Impl_$.capitalize = function(this1) {
	var s = tannus_ds_StringUtils.capitalize(this1);
	return s;
};
tannus_nlp__$Word_Word_$Impl_$.toString = function(this1) {
	return this1;
};
tannus_nlp__$Word_Word_$Impl_$.bytes = function(this1) {
	return tannus_io_impl_BrowserBinary.ofString(this1);
};
tannus_nlp__$Word_Word_$Impl_$.levenshtein = function(this1,other) {
	if(this1.length == 0) return other.length;
	if(other.length == 0) return this1.length;
	var l = tannus_io_impl_BrowserBinary.ofString(this1);
	var r = tannus_io_impl_BrowserBinary.ofString(other);
	var matrix = [];
	var i = 0;
	while(i < r._length) {
		matrix[i] = [i];
		i++;
	}
	var j = 0;
	while(j < l._length) {
		matrix[0][j] = j;
		j++;
	}
	i = 1;
	while(i < r._length) {
		j = 1;
		while(j < l._length) {
			if((function($this) {
				var $r;
				var this2 = r.get(i - 1);
				var other1 = l.get(j - 1);
				$r = this2 == other1;
				return $r;
			}(this))) matrix[i][j] = matrix[i - 1][j - 1]; else matrix[i][j] = tannus_math_TMath.min(matrix[i - 1][j - 1] + 1,tannus_math_TMath.min(matrix[i][j - 1] + 1,matrix[i - 1][j] + 1));
			j++;
		}
		i++;
	}
	return matrix[r._length - 1][l._length - 1];
};
tannus_nlp__$Word_Word_$Impl_$.get_islower = function(this1) {
	return this1.toLowerCase() == this1;
};
tannus_nlp__$Word_Word_$Impl_$.get_isupper = function(this1) {
	return this1.toUpperCase() == this1;
};
tannus_nlp__$Word_Word_$Impl_$.get_iscapitalized = function(this1) {
	return tannus_ds_StringUtils.capitalize(this1) == this1;
};
var tannus_nlp_Words = function(d) {
	this.data = d;
};
$hxClasses["tannus.nlp.Words"] = tannus_nlp_Words;
tannus_nlp_Words.__name__ = ["tannus","nlp","Words"];
tannus_nlp_Words.create = function(s) {
	if(s.length == 0) return new tannus_nlp_Words([]); else return new tannus_nlp_Words(tannus_nlp_Lexer.tokenizeString(s));
};
tannus_nlp_Words.empty = function() {
	return new tannus_nlp_Words([]);
};
tannus_nlp_Words.prototype = {
	get: function(i) {
		return this.data[i];
	}
	,count: function(w) {
		return Lambda.count(this.data,function(cw) {
			return w == cw;
		});
	}
	,has: function(w) {
		return Lambda.has(this.data,w);
	}
	,add: function(w) {
		this.data.push(w);
	}
	,remove: function(w) {
		return HxOverrides.remove(this.data,w);
	}
	,iterator: function() {
		return HxOverrides.iter(this.data);
	}
	,map: function(f) {
		return new tannus_nlp_Words(this.data.map(f));
	}
	,filter: function(f) {
		return new tannus_nlp_Words(this.data.filter(f));
	}
	,plus: function(other) {
		return new tannus_nlp_Words(this.data.concat(other.data));
	}
	,minus: function(other) {
		return new tannus_nlp_Words(tannus_ds_ArrayTools.without(this.data,other.data));
	}
	,union: function(other) {
		return new tannus_nlp_Words(tannus_ds_ArrayTools.union(this.data,other.data));
	}
	,join: function(sep) {
		return this.data.join(sep);
	}
	,__class__: tannus_nlp_Words
};
var tannus_nore_Check = $hxClasses["tannus.nore.Check"] = { __ename__ : ["tannus","nore","Check"], __constructs__ : ["TypeCheck","LooseTypeCheck","ShortTypeCheck","NestedCheck","FieldExistsCheck","FieldValueCheck","FieldValueBlockCheck","FieldValueTypeCheck","HelperCheck","GroupCheck","EitherCheck","InvertedCheck","TernaryCheck"] };
tannus_nore_Check.TypeCheck = function(t) { var $x = ["TypeCheck",0,t]; $x.__enum__ = tannus_nore_Check; $x.toString = $estr; return $x; };
tannus_nore_Check.LooseTypeCheck = function(t) { var $x = ["LooseTypeCheck",1,t]; $x.__enum__ = tannus_nore_Check; $x.toString = $estr; return $x; };
tannus_nore_Check.ShortTypeCheck = function(t) { var $x = ["ShortTypeCheck",2,t]; $x.__enum__ = tannus_nore_Check; $x.toString = $estr; return $x; };
tannus_nore_Check.NestedCheck = function(op,value) { var $x = ["NestedCheck",3,op,value]; $x.__enum__ = tannus_nore_Check; $x.toString = $estr; return $x; };
tannus_nore_Check.FieldExistsCheck = function(name) { var $x = ["FieldExistsCheck",4,name]; $x.__enum__ = tannus_nore_Check; $x.toString = $estr; return $x; };
tannus_nore_Check.FieldValueCheck = function(op,name,value) { var $x = ["FieldValueCheck",5,op,name,value]; $x.__enum__ = tannus_nore_Check; $x.toString = $estr; return $x; };
tannus_nore_Check.FieldValueBlockCheck = function(name,checks) { var $x = ["FieldValueBlockCheck",6,name,checks]; $x.__enum__ = tannus_nore_Check; $x.toString = $estr; return $x; };
tannus_nore_Check.FieldValueTypeCheck = function(name,type,loose) { var $x = ["FieldValueTypeCheck",7,name,type,loose]; $x.__enum__ = tannus_nore_Check; $x.toString = $estr; return $x; };
tannus_nore_Check.HelperCheck = function(name,args) { var $x = ["HelperCheck",8,name,args]; $x.__enum__ = tannus_nore_Check; $x.toString = $estr; return $x; };
tannus_nore_Check.GroupCheck = function(checks) { var $x = ["GroupCheck",9,checks]; $x.__enum__ = tannus_nore_Check; $x.toString = $estr; return $x; };
tannus_nore_Check.EitherCheck = function(left,right) { var $x = ["EitherCheck",10,left,right]; $x.__enum__ = tannus_nore_Check; $x.toString = $estr; return $x; };
tannus_nore_Check.InvertedCheck = function(check) { var $x = ["InvertedCheck",11,check]; $x.__enum__ = tannus_nore_Check; $x.toString = $estr; return $x; };
tannus_nore_Check.TernaryCheck = function(condition,itrue,ifalse) { var $x = ["TernaryCheck",12,condition,itrue,ifalse]; $x.__enum__ = tannus_nore_Check; $x.toString = $estr; return $x; };
var tannus_nore_Compiler = function() {
	this.reset();
};
$hxClasses["tannus.nore.Compiler"] = tannus_nore_Compiler;
tannus_nore_Compiler.__name__ = ["tannus","nore","Compiler"];
tannus_nore_Compiler.prototype = {
	compileString: function(s) {
		var l = new tannus_nore_Lexer();
		var $it0 = this.operators.keys();
		while( $it0.hasNext() ) {
			var s1 = $it0.next();
			l.operators.push(s1);
		}
		var p = new tannus_nore_Parser();
		var toks = l.lex(s);
		var tree = p.parse(toks);
		return this.compile(tree);
	}
	,compile: function(checkList) {
		this.checks = new tannus_ds_Stack(checkList);
		while(!this.checks.get_empty()) {
			var cf = this.compileCheck(this.checks.pop());
			this.checkFuncs.push(cf);
		}
		return (function(f) {
			return function(o) {
				return f(o);
			};
		})($bind(this,this.testAll));
	}
	,compileCheck: function(check) {
		var _g = this;
		switch(check[1]) {
		case 9:
			var list = check[2];
			var state = this.save();
			var child = new tannus_nore_Compiler();
			child.restore(state);
			return child.compile(list);
		case 0:
			var type = check[2];
			return (function(f,a1,a2) {
				return function(o) {
					return f(o,a1,a2);
				};
			})(($_=this.tools,$bind($_,$_.checkType)),type,false);
		case 1:
			var type1 = check[2];
			return (function(f1,a11,a21) {
				return function(o1) {
					return f1(o1,a11,a21);
				};
			})(($_=this.tools,$bind($_,$_.checkType)),type1,true);
		case 2:
			var type2 = check[2];
			return (function(f2,a12) {
				return function(o2) {
					return f2(o2,a12);
				};
			})(($_=this.tools,$bind($_,$_.checkShortType)),type2);
		case 3:
			var value = check[3];
			var sop = check[2];
			if(this.operators.exists(sop)) {
				var op = this.operators.get(sop);
				return function(o3) {
					return op(o3,(function($this) {
						var $r;
						var this1 = tannus_nore_ValueTools.haxeValue(value,_g.tools,o3);
						$r = this1();
						return $r;
					}(this)));
				};
			} else throw new js__$Boot_HaxeError("CompilationError: Invalid operator \"" + sop + "\"!");
			break;
		case 4:
			var name = check[2];
			return (function(f3,a13) {
				return function(o4) {
					return f3(o4,a13);
				};
			})(($_=this.tools,$bind($_,$_.has)),name);
		case 5:
			var value1 = check[4];
			var name1 = check[3];
			var sop1 = check[2];
			if(this.operators.exists(sop1)) {
				var op1 = this.operators.get(sop1);
				return function(o5) {
					return op1(_g.tools.get(o5,name1),(function($this) {
						var $r;
						var this2 = tannus_nore_ValueTools.haxeValue(value1,_g.tools,o5);
						$r = this2();
						return $r;
					}(this)));
				};
			} else throw new js__$Boot_HaxeError("CompilationError: Invalid operator \"" + sop1 + "\"!");
			break;
		case 7:
			var loose = check[4];
			var type3 = check[3];
			var name2 = check[2];
			return function(o6) {
				return _g.tools.checkType(_g.tools.get(o6,name2),type3,loose);
			};
		case 6:
			var block = check[3];
			var name3 = check[2];
			var getit = (function(f4,a14) {
				return function(o7) {
					return f4(o7,a14);
				};
			})(($_=this.tools,$bind($_,$_.get)),name3);
			var test = this.sub(block);
			return function(o8) {
				var ctx = getit(o8);
				return test(ctx);
			};
		case 8:
			var vargs = check[3];
			var name4 = check[2];
			return (function(f5,a15,a22) {
				return function(o9) {
					return f5(o9,a15,a22);
				};
			})(($_=this.tools,$bind($_,$_.helper_check)),name4,vargs);
		case 10:
			var cright = check[3];
			var cleft = check[2];
			var left = this.compileCheck(cleft);
			var right = this.compileCheck(cright);
			return function(o10) {
				return left(o10) || right(o10);
			};
		case 11:
			var cc = check[2];
			var c = this.compileCheck(cc);
			return function(o11) {
				return !c(o11);
			};
		case 12:
			var cfalse = check[4];
			var ctrue = check[3];
			var ccondition = check[2];
			var cond = this.compileCheck(ccondition);
			var itrue = this.compileCheck(ctrue);
			var ifalse;
			if(cfalse != null) ifalse = this.compileCheck(cfalse); else ifalse = null;
			return function(o12) {
				if(cond(o12)) return itrue(o12); else if(ifalse != null) return ifalse(o12); else return true;
			};
		}
	}
	,reset: function() {
		this.checks = new tannus_ds_Stack();
		this.checkFuncs = [];
		try {
			this.operators.exists("");
		} catch( error ) {
			if (error instanceof js__$Boot_HaxeError) error = error.val;
			this.operators = new haxe_ds_StringMap();
		}
		try {
			this.helpers.exists("");
		} catch( error1 ) {
			if (error1 instanceof js__$Boot_HaxeError) error1 = error1.val;
			this.helpers = new haxe_ds_StringMap();
		}
		this.tools = new tannus_nore_CompilerTools(this);
		this.initOperators();
		this.initHelpers();
	}
	,initOperators: function() {
		var _g = this;
		var eq2 = function(x,y) {
			if(tannus_internal_TypeTools.typename(x) == tannus_internal_TypeTools.typename(y)) {
				if(x == y) return true; else {
					var eq = _g.tools.get(x,"equals");
					if(Reflect.isFunction(eq)) try {
						var eqv = Reflect.callMethod(x,eq,[y]);
						if(eqv != null) return eqv == true;
					} catch( err ) {
						if (err instanceof js__$Boot_HaxeError) err = err.val;
						null;
					}
					var eq1 = _g.tools.get(y,"equals");
					if(Reflect.isFunction(eq1)) try {
						var eqv1 = Reflect.callMethod(y,eq1,[x]);
						if(eqv1 != null) return eqv1 == true;
					} catch( err1 ) {
						if (err1 instanceof js__$Boot_HaxeError) err1 = err1.val;
						null;
					}
					return false;
				}
			} else return false;
		};
		this.operators.set("==",eq2);
		this.operators.set("!=",function(x5,y5) {
			return !eq2(x5,y5);
		});
		var greaterThan = function(x1,y1) {
			if(tannus_internal_TypeTools.typename(x1) == "Number" && tannus_internal_TypeTools.typename(y1) == "Number") return x1 > y1; else return false;
		};
		var lessThan = function(x2,y2) {
			if(tannus_internal_TypeTools.typename(x2) == "Number" && tannus_internal_TypeTools.typename(y2) == "Number") return x2 < y2; else return false;
		};
		this.operators.set(">",greaterThan);
		this.operators.set("<",lessThan);
		this.operators.set(">=",function(x6,y6) {
			return greaterThan(x6,y6) || eq2(x6,y6);
		});
		this.operators.set("<=",function(x7,y7) {
			return lessThan(x7,y7) || eq2(x7,y7);
		});
		var has = function(x3,y3) {
			if(typeof(x3) == "string") return tannus_ds_StringUtils.has(js_Boot.__cast(x3 , String),Std.string(y3)); else if((x3 instanceof Array) && x3.__enum__ == null) return Lambda.has(js_Boot.__cast(x3 , Array),y3); else return false;
		};
		this.operators.set("has",has);
		this.operators.set("contains",has);
		var regtest = function(x4,y4) {
			{
				var _g1 = [x4,y4].map((function(f) {
					return function(o) {
						return f(o);
					};
				})(tannus_internal_TypeTools.typename));
				switch(_g1.length) {
				case 2:
					switch(_g1[1]) {
					case "String":
						var reg = new EReg(Std.string(y4),"");
						return reg.match(Std.string(x4));
					default:
						return false;
					}
					break;
				default:
					return false;
				}
			}
		};
		this.operators.set("~=",regtest);
	}
	,initHelpers: function() {
		null;
	}
	,operator: function(name,f) {
		this.operators.set(name,f);
	}
	,helper: function(name,f) {
		this.helpers.set(name,f);
	}
	,save: function() {
		return { 'checks' : this.checks.copy(), 'checkFuncs' : this.checkFuncs.slice(), 'operators' : this.copyOperators(), 'helpers' : this.copyHelpers(), 'tools' : this.tools};
	}
	,restore: function(s) {
		this.checks = s.checks;
		this.checkFuncs = s.checkFuncs;
		this.operators = s.operators;
		this.helpers = s.helpers;
		this.tools = s.tools;
	}
	,sub: function(checkList) {
		var subc = new tannus_nore_Compiler();
		subc.tools = this.tools;
		subc.operators = this.copyOperators();
		subc.helpers = this.copyHelpers();
		var f = subc.compile(checkList);
		return f;
	}
	,copyOperators: function() {
		var copy = new haxe_ds_StringMap();
		var $it0 = this.operators.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			var value = this.operators.get(key);
			if(__map_reserved[key] != null) copy.setReserved(key,value); else copy.h[key] = value;
		}
		return copy;
	}
	,copyHelpers: function() {
		var copy = new haxe_ds_StringMap();
		var $it0 = this.helpers.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			var value = this.helpers.get(key);
			if(__map_reserved[key] != null) copy.setReserved(key,value); else copy.h[key] = value;
		}
		return copy;
	}
	,testAll: function(o) {
		var _g = 0;
		var _g1 = this.checkFuncs;
		while(_g < _g1.length) {
			var check = _g1[_g];
			++_g;
			if(!check(o)) return false;
		}
		return true;
	}
	,get_end: function() {
		return this.checks.get_empty();
	}
	,__class__: tannus_nore_Compiler
	,__properties__: {get_end:"get_end"}
};
var tannus_nore_CompilerTools = function(owner) {
	this.c = owner;
};
$hxClasses["tannus.nore.CompilerTools"] = tannus_nore_CompilerTools;
tannus_nore_CompilerTools.__name__ = ["tannus","nore","CompilerTools"];
tannus_nore_CompilerTools.prototype = {
	has: function(o,name) {
		return Object.prototype.hasOwnProperty.call(o,name);
	}
	,get: function(o,name) {
		return Reflect.getProperty(o,name);
	}
	,checkType: function(o,type,loose) {
		if(loose == null) loose = false;
		if(!loose) return tannus_internal_TypeTools.typename(o) == type; else {
			var tc = Type.resolveClass(type);
			return js_Boot.__instanceof(o,tc);
		}
	}
	,checkShortType: function(o,type) {
		var className = tannus_ds_ArrayTools.last(tannus_internal_TypeTools.typename(o).split("."));
		return className == type;
	}
	,helper_check: function(o,name,vargs) {
		var args;
		var _g = [];
		var _g1 = 0;
		while(_g1 < vargs.length) {
			var v = vargs[_g1];
			++_g1;
			_g.push((function($this) {
				var $r;
				var this1 = tannus_nore_ValueTools.haxeValue(v,$this,o);
				$r = this1();
				return $r;
			}(this)));
		}
		args = _g;
		if(this.c.helpers.exists(name)) {
			var help = this.c.helpers.get(name);
			return help(o,args);
		} else if(this.has(o,name)) {
			var v1 = this.get(o,name);
			if(typeof(v1) == "boolean") return v1; else if(Reflect.isFunction(v1)) return Reflect.callMethod(o,this.get(o,name),args) == true; else return false;
		} else return false;
	}
	,__class__: tannus_nore_CompilerTools
};
var tannus_nore_Lexer = function() {
	this.reset();
	this.operators = [];
	this.operators.push("=>");
	this.operators.push("is");
	this.operators.push("has");
	this.operators.push("contains");
};
$hxClasses["tannus.nore.Lexer"] = tannus_nore_Lexer;
tannus_nore_Lexer.__name__ = ["tannus","nore","Lexer"];
tannus_nore_Lexer.lexString = function(s) {
	return new tannus_nore_Lexer().lex(s);
};
tannus_nore_Lexer.prototype = {
	operator: function(op) {
		this.operators.push(op);
	}
	,lex: function(s) {
		this.reset();
		this.bytes = new tannus_io_ByteStack(tannus_io_impl_BrowserBinary.ofString(s));
		while(!this.bytes.get_empty()) {
			var t = this.lexNext();
			if(t != null) this.tokens.push(t);
		}
		return this.tokens;
	}
	,lexNext: function() {
		var c = this.bytes.peek();
		if(Lambda.has([9,10,11,12,13,32],c)) {
			this.bytes.pop();
			if(!this.bytes.get_empty()) return this.lexNext(); else return null;
		} else if(c >= 65 && c <= 90 || c >= 97 && c <= 122 || c == 95) {
			var id = String.fromCharCode(c);
			this.bytes.pop();
			while(!this.bytes.get_empty() && this.isIdent(this.bytes.peek())) {
				var this1 = this.bytes.pop();
				id += String.fromCharCode(this1);
			}
			if(Lambda.has(this.operators,id)) return tannus_nore_Token.TOperator(id);
			if(Lambda.has(["if"],id.toLowerCase())) return this.lexStructure(id.toLowerCase()); else return tannus_nore_Token.TConst(tannus_nore_Const.CIdent(id));
		} else if(c == 64) {
			this.bytes.pop();
			var id1 = "";
			while(!this.bytes.get_empty() && this.isIdent(this.bytes.peek())) {
				var this2 = this.bytes.pop();
				id1 += String.fromCharCode(this2);
			}
			return tannus_nore_Token.TConst(tannus_nore_Const.CReference(id1));
		} else if(Lambda.has([34,39,96],c)) {
			var delimiter = this.bytes.pop();
			var level;
			switch(delimiter) {
			case 39:
				level = 1;
				break;
			case 34:
				level = 2;
				break;
			case 96:
				level = 3;
				break;
			default:
				level = -1;
			}
			var str;
			{
				var this3 = this.bytes.readUntil(delimiter);
				str = this3.toString();
			}
			this.bytes.pop();
			return tannus_nore_Token.TConst(tannus_nore_Const.CString(str,level));
		} else if(c >= 48 && c <= 57) {
			var snum;
			{
				var this4 = this.bytes.pop();
				snum = String.fromCharCode(this4);
			}
			while(!this.bytes.get_empty() && ((function($this) {
				var $r;
				var this5 = $this.bytes.peek();
				$r = this5 >= 48 && this5 <= 57;
				return $r;
			}(this)) || (function($this) {
				var $r;
				var this6 = $this.bytes.peek();
				$r = this6 == HxOverrides.cca(".",0);
				return $r;
			}(this)))) {
				var this7 = this.bytes.pop();
				snum += String.fromCharCode(this7);
			}
			return tannus_nore_Token.TConst(tannus_nore_Const.CNumber(parseFloat(snum)));
		} else if(c == 91) {
			var sgroup;
			{
				var this10 = this.readGroup((function($this) {
					var $r;
					var n = HxOverrides.cca("[",0);
					var this8;
					if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
					this8 = n;
					$r = this8;
					return $r;
				}(this)),(function($this) {
					var $r;
					var n1 = HxOverrides.cca("]",0);
					var this9;
					if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n1)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n1 + ")!");
					this9 = n1;
					$r = this9;
					return $r;
				}(this)));
				sgroup = this10.toString();
			}
			var group = this.sub(sgroup);
			return tannus_nore_Token.TBrackets(group);
		} else if(c == 123) {
			var sg;
			{
				var this13 = this.readGroup((function($this) {
					var $r;
					var n2 = HxOverrides.cca("{",0);
					var this11;
					if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n2)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n2 + ")!");
					this11 = n2;
					$r = this11;
					return $r;
				}(this)),(function($this) {
					var $r;
					var n3 = HxOverrides.cca("}",0);
					var this12;
					if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n3)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n3 + ")!");
					this12 = n3;
					$r = this12;
					return $r;
				}(this)));
				sg = this13.toString();
			}
			var g = this.sub(sg);
			return tannus_nore_Token.TBoxBrackets(g);
		} else if(this.isOpChar(c)) {
			var state = this.save();
			var op;
			{
				var this14 = this.bytes.pop();
				op = String.fromCharCode(this14);
			}
			while(!this.bytes.get_empty() && this.isOpChar(this.bytes.peek())) {
				var this15 = this.bytes.pop();
				op += String.fromCharCode(this15);
			}
			if(Lambda.has(this.operators,op)) return tannus_nore_Token.TOperator(op); else switch(op) {
			case "!":
				return tannus_nore_Token.TNot;
			default:
				throw new js__$Boot_HaxeError("SyntaxError: Invalid operator \"" + op + "\"!");
				return null;
			}
		} else if(c == 40) {
			var s = this.readGroup((function($this) {
				var $r;
				var n4 = HxOverrides.cca("(",0);
				var this16;
				if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n4)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n4 + ")!");
				this16 = n4;
				$r = this16;
				return $r;
			}(this)),(function($this) {
				var $r;
				var n5 = HxOverrides.cca(")",0);
				var this17;
				if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n5)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n5 + ")!");
				this17 = n5;
				$r = this17;
				return $r;
			}(this)));
			var toklist;
			if(s._length <= 0) toklist = []; else toklist = this.sub(s.toString());
			var treeStack = new tannus_ds_Stack(toklist.slice());
			var tree = [];
			var hasComma = false;
			while(!treeStack.get_empty()) {
				var t = treeStack.pop();
				if(!(function($this) {
					var $r;
					switch(t[1]) {
					case 9:
						$r = true;
						break;
					default:
						$r = false;
					}
					return $r;
				}(this))) tree.push(t); else hasComma = true;
			}
			if(hasComma) return tannus_nore_Token.TTuple(tree); else return tannus_nore_Token.TGroup(toklist);
		} else if(c == 44) {
			this.bytes.pop();
			return tannus_nore_Token.TComma;
		} else if(c == 124) {
			this.bytes.pop();
			return tannus_nore_Token.TOr;
		} else if(c == 58) {
			this.bytes.pop();
			this.canCall = true;
			var name = this.lexNext();
			if(name != null) switch(name[1]) {
			case 0:
				switch(name[2][1]) {
				case 0:
					var name1 = name[2][2];
					if(!this.bytes.get_empty()) {
						var state1 = this.save();
						var targs = this.lexNext();
						if(targs != null) switch(targs[1]) {
						case 5:
							var args = targs[2];
							console.log("helper");
							return tannus_nore_Token.THelper(name1,args);
						case 4:
							var __ex0 = targs[2];
							{
								var _g = __ex0[0];
								var arg = _g;
								console.log("helper");
								return tannus_nore_Token.THelper(name1,[arg]);
							}
							break;
						default:
							this.restore(state1);
							console.log("helper");
							return tannus_nore_Token.THelper(name1,[]);
						} else {
							this.restore(state1);
							console.log("helper");
							return tannus_nore_Token.THelper(name1,[]);
						}
					} else {
						console.log("helper");
						return tannus_nore_Token.THelper(name1,[]);
					}
					break;
				default:
					throw new js__$Boot_HaxeError("SyntaxError: Expected identifier, got " + Std.string(name));
				}
				break;
			default:
				throw new js__$Boot_HaxeError("SyntaxError: Expected identifier, got " + Std.string(name));
			} else throw new js__$Boot_HaxeError("SyntaxError: Expected identifier, got " + Std.string(name));
		} else if(c == 46) {
			this.bytes.pop();
			if((function($this) {
				var $r;
				var this18 = $this.bytes.peek();
				$r = this18 == 46;
				return $r;
			}(this))) {
				this.bytes.pop();
				return tannus_nore_Token.TDoubleDot;
			} else throw new js__$Boot_HaxeError("SyntaxError: Expected \".\", got " + (function($this) {
				var $r;
				var this19 = $this.bytes.peek();
				$r = String.fromCharCode(this19);
				return $r;
			}(this)));
		} else if(c == 126) {
			this.bytes.pop();
			return tannus_nore_Token.TApprox;
		} else throw new js__$Boot_HaxeError("SyntaxError: Unexpected \"" + String.fromCharCode(c) + "\"!");
	}
	,lexStructure: function(kw) {
		switch(kw) {
		case "if":
			var cond = this.lexNext();
			console.log(cond);
			var then = this.lexNext();
			console.log(then);
			switch(then[1]) {
			case 0:
				switch(then[2][1]) {
				case 0:
					switch(then[2][2]) {
					case "then":
						var itrue = this.lexNext();
						console.log(itrue);
						var ifalse = null;
						if(!this.bytes.get_empty()) {
							var state = this.save();
							var otherwise = this.lexNext();
							switch(otherwise[1]) {
							case 0:
								switch(otherwise[2][1]) {
								case 0:
									switch(otherwise[2][2]) {
									case "else":
										ifalse = this.lexNext();
										console.log(ifalse);
										break;
									default:
										this.restore(state);
									}
									break;
								default:
									this.restore(state);
								}
								break;
							default:
								this.restore(state);
							}
						}
						if(cond != null) null; else throw new js__$Boot_HaxeError("SyntaxError: Unexpected if!");
						if(itrue != null) null; else throw new js__$Boot_HaxeError("SyntaxError: Unexpected end of input!");
						return tannus_nore_Token.TIf(cond,itrue,ifalse);
					default:
						throw new js__$Boot_HaxeError("SyntaxError: Unexpected " + Std.string(then) + "!");
					}
					break;
				default:
					throw new js__$Boot_HaxeError("SyntaxError: Unexpected " + Std.string(then) + "!");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("SyntaxError: Unexpected " + Std.string(then) + "!");
			}
			break;
		default:
			throw new js__$Boot_HaxeError("FuckUpError: \"" + kw + "\" is not a keyword");
		}
	}
	,readGroup: function(start,end) {
		var c = this.bytes.peek();
		if(c == start) {
			var level = 1;
			var data;
			var this1;
			this1 = tannus_io_impl_BrowserBinary.alloc(0);
			data = this1;
			this.bytes.pop();
			while(level > 0) {
				c = this.bytes.peek();
				if(c == start) level++; else if(c == end) level--;
				if(level > 0) data.push(c);
				this.bytes.pop();
			}
			return data;
		}
		var this2;
		this2 = tannus_io_impl_BrowserBinary.alloc(0);
		return this2;
	}
	,sub: function(s) {
		var state = this.save();
		var _it = this.inTernary;
		var result = this.lex(s);
		this.restore(state);
		this.inTernary = _it;
		return result;
	}
	,reset: function() {
		this.tokens = [];
		this.canCall = false;
		this.inTernary = false;
		this.bytes = new tannus_io_ByteStack((function($this) {
			var $r;
			var this1;
			this1 = tannus_io_impl_BrowserBinary.alloc(0);
			$r = this1;
			return $r;
		}(this)));
	}
	,save: function() {
		return { 'tokens' : this.tokens.slice(), 'bytes' : this.bytes.copy(), 'canCall' : this.canCall};
	}
	,restore: function(s) {
		this.bytes = s.bytes;
		this.tokens = s.tokens;
		this.canCall = s.canCall;
	}
	,next: function() {
		return this.bytes.peek();
	}
	,advance: function() {
		return this.bytes.pop();
	}
	,last: function() {
		return this.tokens.pop();
	}
	,isIdent: function(c) {
		return c >= 48 && c <= 57 || (c >= 65 && c <= 90 || c >= 97 && c <= 122) || c == 46 || c == 95;
	}
	,isOpChar: function(c) {
		return Lambda.has(["=","!","<",">","$","^"],String.fromCharCode(c));
	}
	,isOperator: function(op) {
		return Lambda.has(this.operators,op);
	}
	,isKeyword: function(id) {
		return Lambda.has(["if"],id.toLowerCase());
	}
	,get_end: function() {
		return this.bytes.get_empty();
	}
	,__class__: tannus_nore_Lexer
	,__properties__: {get_end:"get_end"}
};
var tannus_nore_ORegEx = function() { };
$hxClasses["tannus.nore.ORegEx"] = tannus_nore_ORegEx;
tannus_nore_ORegEx.__name__ = ["tannus","nore","ORegEx"];
tannus_nore_ORegEx.compile = function(sel,pred) {
	var comp = new tannus_nore_Compiler();
	if(pred != null) pred(comp);
	return comp.compileString(sel);
};
var tannus_nore_Parser = function() {
	this.reset();
};
$hxClasses["tannus.nore.Parser"] = tannus_nore_Parser;
tannus_nore_Parser.__name__ = ["tannus","nore","Parser"];
tannus_nore_Parser.parseTokens = function(tree) {
	return new tannus_nore_Parser().parse(tree);
};
tannus_nore_Parser.parseString = function(s) {
	return tannus_nore_Parser.parseTokens(new tannus_nore_Lexer().lex(s));
};
tannus_nore_Parser.prototype = {
	parse: function(tokenList) {
		this.reset();
		this.tokens = new tannus_ds_Stack(tokenList);
		while(!this.tokens.get_empty()) this.tree.push(this.nextCheck());
		return this.tree;
	}
	,nextCheck: function() {
		var t = this.tokens.pop();
		switch(t[1]) {
		case 0:
			switch(t[2][1]) {
			case 0:
				var type = t[2][2];
				return tannus_nore_Check.TypeCheck(type);
			default:
				throw new js__$Boot_HaxeError("SyntaxError: Unexpected " + Std.string(t) + "!");
			}
			break;
		case 12:
			t = this.tokens.pop();
			switch(t[1]) {
			case 0:
				switch(t[2][1]) {
				case 0:
					var type1 = t[2][2];
					return tannus_nore_Check.LooseTypeCheck(type1);
				default:
					throw new js__$Boot_HaxeError("SyntaxError: Unexpected " + Std.string(t) + "!");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("SyntaxError: Unexpected " + Std.string(t) + "!");
			}
			break;
		case 13:
			t = this.tokens.pop();
			switch(t[1]) {
			case 0:
				switch(t[2][1]) {
				case 0:
					var type2 = t[2][2];
					return tannus_nore_Check.ShortTypeCheck(type2);
				default:
					throw new js__$Boot_HaxeError("SyntaxError: Unexpected " + Std.string(t) + "!");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("SyntaxError: Unexpected " + Std.string(t) + "!");
			}
			break;
		case 2:
			var group = t[2];
			switch(group.length) {
			case 1:
				switch(group[0][1]) {
				case 0:
					switch(group[0][2][1]) {
					case 0:
						var name = group[0][2][2];
						return tannus_nore_Check.FieldExistsCheck(name);
					default:
						throw new js__$Boot_HaxeError("SyntaxError: " + Std.string(group) + " is not a valid field-check!");
					}
					break;
				default:
					throw new js__$Boot_HaxeError("SyntaxError: " + Std.string(group) + " is not a valid field-check!");
				}
				break;
			case 3:
				switch(group[0][1]) {
				case 0:
					switch(group[0][2][1]) {
					case 0:
						switch(group[1][1]) {
						case 1:
							var op = group[1][2];
							var op1 = group[1][2];
							switch(group[1][2]) {
							case "=>":
								var valueToken = group[2];
								var valueToken1 = group[2];
								switch(group[2][1]) {
								case 3:
									var name1 = group[0][2][2];
									var __ex0 = group[2][2];
									{
										var _g = this.sub(__ex0);
										var checks = _g;
										return tannus_nore_Check.FieldValueBlockCheck(name1,checks);
									}
									break;
								default:
									var name2 = group[0][2][2];
									switch(group[0][2][2]) {
									case "this":
										return tannus_nore_Check.NestedCheck(op,tannus_nore_ValueTools.toValue(valueToken));
									default:
										return tannus_nore_Check.FieldValueCheck(op1,name2,tannus_nore_ValueTools.toValue(valueToken1));
									}
								}
								break;
							case "is":
								var valueToken2 = group[2];
								var valueToken3 = group[2];
								switch(group[2][1]) {
								case 0:
									switch(group[2][2][1]) {
									case 0:
										var name3 = group[0][2][2];
										var type3 = group[2][2][2];
										return tannus_nore_Check.FieldValueTypeCheck(name3,type3,false);
									default:
										var name4 = group[0][2][2];
										switch(group[0][2][2]) {
										case "this":
											return tannus_nore_Check.NestedCheck(op,tannus_nore_ValueTools.toValue(valueToken2));
										default:
											return tannus_nore_Check.FieldValueCheck(op1,name4,tannus_nore_ValueTools.toValue(valueToken3));
										}
									}
									break;
								default:
									var name5 = group[0][2][2];
									switch(group[0][2][2]) {
									case "this":
										return tannus_nore_Check.NestedCheck(op,tannus_nore_ValueTools.toValue(valueToken2));
									default:
										return tannus_nore_Check.FieldValueCheck(op1,name5,tannus_nore_ValueTools.toValue(valueToken3));
									}
								}
								break;
							default:
								var name6 = group[0][2][2];
								switch(group[0][2][2]) {
								case "this":
									var valueToken4 = group[2];
									return tannus_nore_Check.NestedCheck(op,tannus_nore_ValueTools.toValue(valueToken4));
								default:
									var valueToken5 = group[2];
									return tannus_nore_Check.FieldValueCheck(op1,name6,tannus_nore_ValueTools.toValue(valueToken5));
								}
							}
							break;
						default:
							throw new js__$Boot_HaxeError("SyntaxError: " + Std.string(group) + " is not a valid field-check!");
						}
						break;
					default:
						throw new js__$Boot_HaxeError("SyntaxError: " + Std.string(group) + " is not a valid field-check!");
					}
					break;
				default:
					throw new js__$Boot_HaxeError("SyntaxError: " + Std.string(group) + " is not a valid field-check!");
				}
				break;
			case 4:
				switch(group[0][1]) {
				case 0:
					switch(group[0][2][1]) {
					case 0:
						switch(group[1][1]) {
						case 1:
							switch(group[1][2]) {
							case "is":
								switch(group[2][1]) {
								case 12:
									switch(group[3][1]) {
									case 0:
										switch(group[3][2][1]) {
										case 0:
											var name7 = group[0][2][2];
											var type4 = group[3][2][2];
											return tannus_nore_Check.FieldValueTypeCheck(name7,type4,true);
										default:
											throw new js__$Boot_HaxeError("SyntaxError: " + Std.string(group) + " is not a valid field-check!");
										}
										break;
									default:
										throw new js__$Boot_HaxeError("SyntaxError: " + Std.string(group) + " is not a valid field-check!");
									}
									break;
								default:
									throw new js__$Boot_HaxeError("SyntaxError: " + Std.string(group) + " is not a valid field-check!");
								}
								break;
							default:
								throw new js__$Boot_HaxeError("SyntaxError: " + Std.string(group) + " is not a valid field-check!");
							}
							break;
						default:
							throw new js__$Boot_HaxeError("SyntaxError: " + Std.string(group) + " is not a valid field-check!");
						}
						break;
					default:
						throw new js__$Boot_HaxeError("SyntaxError: " + Std.string(group) + " is not a valid field-check!");
					}
					break;
				default:
					throw new js__$Boot_HaxeError("SyntaxError: " + Std.string(group) + " is not a valid field-check!");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("SyntaxError: " + Std.string(group) + " is not a valid field-check!");
			}
			break;
		case 4:
			var group1 = t[2];
			var subChecks = this.sub(group1);
			return tannus_nore_Check.GroupCheck(subChecks);
		case 3:
			var group2 = t[2];
			var subChecks1 = this.sub(group2);
			return tannus_nore_Check.GroupCheck(subChecks1);
		case 7:
			var argTokens = t[3];
			var name8 = t[2];
			var args;
			var _g1 = [];
			var _g11 = 0;
			while(_g11 < argTokens.length) {
				var t1 = argTokens[_g11];
				++_g11;
				_g1.push(tannus_nore_ValueTools.toValue(t1));
			}
			args = _g1;
			return tannus_nore_Check.HelperCheck(name8,args);
		case 10:
			var left = this.tree.pop();
			var right = this.nextCheck();
			{
				var l = left;
				var l1 = left;
				if(left == null) {
					var r = right;
					throw new js__$Boot_HaxeError("SyntaxError: Unexpected \"|\"!");
				} else switch(left[1]) {
				default:
					var r1 = right;
					if(right == null) throw new js__$Boot_HaxeError("SyntaxError: Unexpected end of input!"); else switch(right[1]) {
					default:
						return tannus_nore_Check.EitherCheck(left,right);
					}
				}
			}
			break;
		case 11:
			var check = this.nextCheck();
			if(check != null) return tannus_nore_Check.InvertedCheck(check); else throw new js__$Boot_HaxeError("SyntaxError: Unexpected end of input!");
			break;
		case 8:
			var telse = t[4];
			var tthen = t[3];
			var ttest = t[2];
			var toks = [ttest,tthen];
			if(telse != null) toks.push(telse);
			var chl = this.sub(toks);
			return Type.createEnum(tannus_nore_Check,"TernaryCheck",chl);
		default:
			throw new js__$Boot_HaxeError("SyntaxError: Unexpected " + Std.string(t) + "!");
		}
	}
	,reset: function() {
		this.tokens = new tannus_ds_Stack();
		this.tree = [];
	}
	,token: function() {
		return this.tokens.pop();
	}
	,last: function() {
		return this.tree.pop();
	}
	,save: function() {
		return { 'tokens' : this.tokens.copy(), 'tree' : this.tree.slice()};
	}
	,restore: function(s) {
		this.tokens = s.tokens;
		this.tree = s.tree;
	}
	,sub: function(toks) {
		var child = new tannus_nore_Parser();
		return child.parse(toks);
	}
	,get_end: function() {
		return this.tokens.get_empty();
	}
	,__class__: tannus_nore_Parser
	,__properties__: {get_end:"get_end"}
};
var tannus_nore__$Selector_Selector_$Impl_$ = {};
$hxClasses["tannus.nore._Selector.Selector_Impl_"] = tannus_nore__$Selector_Selector_$Impl_$;
tannus_nore__$Selector_Selector_$Impl_$.__name__ = ["tannus","nore","_Selector","Selector_Impl_"];
tannus_nore__$Selector_Selector_$Impl_$._new = function(s) {
	return new tannus_nore_CSelector(s);
};
tannus_nore__$Selector_Selector_$Impl_$.invert = function(this1) {
	return this1.invert();
};
tannus_nore__$Selector_Selector_$Impl_$.sum = function(this1,other) {
	return this1.sum(other);
};
tannus_nore__$Selector_Selector_$Impl_$.diff = function(this1,other) {
	return this1.diff(other);
};
tannus_nore__$Selector_Selector_$Impl_$.toPredicate = function(this1) {
	return this1.f;
};
tannus_nore__$Selector_Selector_$Impl_$.toString = function(this1) {
	return this1.toString();
};
tannus_nore__$Selector_Selector_$Impl_$.fromString = function(s) {
	return new tannus_nore_CSelector(s);
};
var tannus_nore_CSelector = function(sel) {
	this.selector = sel;
	this.f = tannus_nore_ORegEx.compile(sel);
};
$hxClasses["tannus.nore.CSelector"] = tannus_nore_CSelector;
tannus_nore_CSelector.__name__ = ["tannus","nore","CSelector"];
tannus_nore_CSelector.prototype = {
	test: function(o) {
		return this.f(o);
	}
	,filter: function(list) {
		return list.filter(this.f);
	}
	,clone: function() {
		return new tannus_nore_CSelector(this.selector);
	}
	,toString: function() {
		return "Selector(" + this.selector + ")";
	}
	,invert: function() {
		return new tannus_nore_CSelector("!(" + this.selector + ")");
	}
	,sum: function(other) {
		return new tannus_nore_CSelector(this.selector + other.selector);
	}
	,diff: function(other) {
		var s = this.selector + other.invert().selector;
		return new tannus_nore_CSelector(s);
	}
	,__class__: tannus_nore_CSelector
};
var tannus_nore_Token = $hxClasses["tannus.nore.Token"] = { __ename__ : ["tannus","nore","Token"], __constructs__ : ["TConst","TOperator","TBrackets","TBoxBrackets","TGroup","TTuple","TCall","THelper","TIf","TComma","TOr","TNot","TApprox","TDoubleDot"] };
tannus_nore_Token.TConst = function(c) { var $x = ["TConst",0,c]; $x.__enum__ = tannus_nore_Token; $x.toString = $estr; return $x; };
tannus_nore_Token.TOperator = function(op) { var $x = ["TOperator",1,op]; $x.__enum__ = tannus_nore_Token; $x.toString = $estr; return $x; };
tannus_nore_Token.TBrackets = function(tree) { var $x = ["TBrackets",2,tree]; $x.__enum__ = tannus_nore_Token; $x.toString = $estr; return $x; };
tannus_nore_Token.TBoxBrackets = function(tree) { var $x = ["TBoxBrackets",3,tree]; $x.__enum__ = tannus_nore_Token; $x.toString = $estr; return $x; };
tannus_nore_Token.TGroup = function(tree) { var $x = ["TGroup",4,tree]; $x.__enum__ = tannus_nore_Token; $x.toString = $estr; return $x; };
tannus_nore_Token.TTuple = function(values) { var $x = ["TTuple",5,values]; $x.__enum__ = tannus_nore_Token; $x.toString = $estr; return $x; };
tannus_nore_Token.TCall = function(id,args) { var $x = ["TCall",6,id,args]; $x.__enum__ = tannus_nore_Token; $x.toString = $estr; return $x; };
tannus_nore_Token.THelper = function(id,args) { var $x = ["THelper",7,id,args]; $x.__enum__ = tannus_nore_Token; $x.toString = $estr; return $x; };
tannus_nore_Token.TIf = function(test,then,otherwise) { var $x = ["TIf",8,test,then,otherwise]; $x.__enum__ = tannus_nore_Token; $x.toString = $estr; return $x; };
tannus_nore_Token.TComma = ["TComma",9];
tannus_nore_Token.TComma.toString = $estr;
tannus_nore_Token.TComma.__enum__ = tannus_nore_Token;
tannus_nore_Token.TOr = ["TOr",10];
tannus_nore_Token.TOr.toString = $estr;
tannus_nore_Token.TOr.__enum__ = tannus_nore_Token;
tannus_nore_Token.TNot = ["TNot",11];
tannus_nore_Token.TNot.toString = $estr;
tannus_nore_Token.TNot.__enum__ = tannus_nore_Token;
tannus_nore_Token.TApprox = ["TApprox",12];
tannus_nore_Token.TApprox.toString = $estr;
tannus_nore_Token.TApprox.__enum__ = tannus_nore_Token;
tannus_nore_Token.TDoubleDot = ["TDoubleDot",13];
tannus_nore_Token.TDoubleDot.toString = $estr;
tannus_nore_Token.TDoubleDot.__enum__ = tannus_nore_Token;
var tannus_nore_Const = $hxClasses["tannus.nore.Const"] = { __ename__ : ["tannus","nore","Const"], __constructs__ : ["CIdent","CString","CReference","CNumber"] };
tannus_nore_Const.CIdent = function(id) { var $x = ["CIdent",0,id]; $x.__enum__ = tannus_nore_Const; $x.toString = $estr; return $x; };
tannus_nore_Const.CString = function(s,quotes) { var $x = ["CString",1,s,quotes]; $x.__enum__ = tannus_nore_Const; $x.toString = $estr; return $x; };
tannus_nore_Const.CReference = function(name) { var $x = ["CReference",2,name]; $x.__enum__ = tannus_nore_Const; $x.toString = $estr; return $x; };
tannus_nore_Const.CNumber = function(n) { var $x = ["CNumber",3,n]; $x.__enum__ = tannus_nore_Const; $x.toString = $estr; return $x; };
var tannus_nore_Value = $hxClasses["tannus.nore.Value"] = { __ename__ : ["tannus","nore","Value"], __constructs__ : ["VString","VNumber","VArray","VField"] };
tannus_nore_Value.VString = function(str) { var $x = ["VString",0,str]; $x.__enum__ = tannus_nore_Value; $x.toString = $estr; return $x; };
tannus_nore_Value.VNumber = function(num) { var $x = ["VNumber",1,num]; $x.__enum__ = tannus_nore_Value; $x.toString = $estr; return $x; };
tannus_nore_Value.VArray = function(values) { var $x = ["VArray",2,values]; $x.__enum__ = tannus_nore_Value; $x.toString = $estr; return $x; };
tannus_nore_Value.VField = function(name) { var $x = ["VField",3,name]; $x.__enum__ = tannus_nore_Value; $x.toString = $estr; return $x; };
var tannus_nore_ValueTools = function() { };
$hxClasses["tannus.nore.ValueTools"] = tannus_nore_ValueTools;
tannus_nore_ValueTools.__name__ = ["tannus","nore","ValueTools"];
tannus_nore_ValueTools.toValue = function(t) {
	switch(t[1]) {
	case 0:
		switch(t[2][1]) {
		case 1:
			var str = t[2][2];
			return tannus_nore_Value.VString(str);
		case 3:
			var num = t[2][2];
			return tannus_nore_Value.VNumber(num);
		case 2:
			var name = t[2][2];
			return tannus_nore_Value.VField(name);
		default:
			throw new js__$Boot_HaxeError("ValueError: Cannot get a Value from " + Std.string(t) + "!");
		}
		break;
	case 5:
		var vals = t[2];
		var values = vals.map(tannus_nore_ValueTools.toValue);
		return tannus_nore_Value.VArray(values);
	default:
		throw new js__$Boot_HaxeError("ValueError: Cannot get a Value from " + Std.string(t) + "!");
	}
};
tannus_nore_ValueTools.haxeValue = function(val,tools,o) {
	switch(val[1]) {
	case 0:
		var str = val[2];
		return function() {
			return str;
		};
	case 1:
		var num = val[2];
		return function() {
			return num;
		};
	case 2:
		var values = val[2];
		return function() {
			var _g = [];
			var _g1 = 0;
			while(_g1 < values.length) {
				var v = values[_g1];
				++_g1;
				_g.push(tannus_nore_ValueTools.haxeValue(v,tools,o));
			}
			return _g;
		};
	case 3:
		var name = val[2];
		return function() {
			return tools.get(o,name);
		};
	}
};
var tannus_storage_Commit = $hxClasses["tannus.storage.Commit"] = { __ename__ : ["tannus","storage","Commit"], __constructs__ : ["Create","Delete","Change"] };
tannus_storage_Commit.Create = function(key,value) { var $x = ["Create",0,key,value]; $x.__enum__ = tannus_storage_Commit; $x.toString = $estr; return $x; };
tannus_storage_Commit.Delete = function(key) { var $x = ["Delete",1,key]; $x.__enum__ = tannus_storage_Commit; $x.toString = $estr; return $x; };
tannus_storage_Commit.Change = function(key,prev,next) { var $x = ["Change",2,key,prev,next]; $x.__enum__ = tannus_storage_Commit; $x.toString = $estr; return $x; };
var tannus_storage_Storage = function() {
	this.local = new haxe_ds_StringMap();
	this.remote = null;
	this.commits = [];
	this.deleted = [];
	this._ready = false;
	this._remote_commit = new tannus_ds_CRef($bind(this,this._remoteCommitSignal));
};
$hxClasses["tannus.storage.Storage"] = tannus_storage_Storage;
tannus_storage_Storage.__name__ = ["tannus","storage","Storage"];
tannus_storage_Storage.copy = function(d) {
	var result = new haxe_ds_StringMap();
	var $it0 = d.keys();
	while( $it0.hasNext() ) {
		var key = $it0.next();
		var value;
		value = __map_reserved[key] != null?d.getReserved(key):d.h[key];
		result.set(key,value);
	}
	return result;
};
tannus_storage_Storage.prototype = {
	fetch: function(done) {
		var _g = this;
		this._fetch(function(fdata) {
			_g.remote = fdata;
			done();
		});
	}
	,push: function(done) {
		var _g = this;
		this._fetch(function(fdata) {
			fdata = _g._applyCommits(fdata,_g.commits);
			_g._push(fdata,function(err) {
				if(err != null) throw new js__$Boot_HaxeError(err);
				_g.local = new haxe_ds_StringMap();
				_g.deleted = [];
				_g.commits = [];
				_g.remote = tannus_storage_Storage.copy(fdata);
				done();
			});
		});
	}
	,init: function(cb) {
		var _g = this;
		this.fetch(function() {
			_g._ready = true;
			cb();
		});
	}
	,get: function(key) {
		if(this.remote != null) {
			if(Lambda.has(this.deleted,key)) return null;
			var rv = this.remote.get(key);
			var lv = this.local.get(key);
			{
				var rem = rv;
				var rem1 = rv;
				if(rv == null) {
					var loc = lv;
					if(loc != null) return loc; else {
						var loc1 = lv;
						if(lv == null) {
							if(rem != null) return rem; else if(rem1 != null && loc1 != null) return loc1; else return null;
						} else switch(lv) {
						default:
							if(rem1 != null && loc1 != null) return loc1; else return null;
						}
					}
				} else switch(rv) {
				default:
					var loc1 = lv;
					if(lv == null) {
						if(rem != null) return rem; else if(rem1 != null && loc1 != null) return loc1; else return null;
					} else switch(lv) {
					default:
						if(rem1 != null && loc1 != null) return loc1; else return null;
					}
				}
			}
		} else throw new js__$Boot_HaxeError("StorageError: Storage has not been initialized!");
	}
	,set: function(key,value) {
		if(this.remote != null) {
			if(Lambda.has(this.deleted,key)) {
				HxOverrides.remove(this.deleted,key);
				this.commit(tannus_storage_Commit.Create(key,value));
			} else {
				var prev = this.get(key);
				if(prev != null) this.commit(tannus_storage_Commit.Change(key,prev,value)); else this.commit(tannus_storage_Commit.Create(key,value));
			}
			{
				this.local.set(key,value);
				value;
			}
			return value;
		} else throw new js__$Boot_HaxeError("StorageError: Storage has not been initialized!");
	}
	,exists: function(key) {
		if(this.remote != null) {
			if(Lambda.has(this.deleted,key)) return false; else return this.local.exists(key) || this.remote.exists(key);
		} else throw new js__$Boot_HaxeError("StorageError: Storage has not been initialized!");
	}
	,watch: function(handler) {
		var sig = this._remote_commit.get();
		sig.listen(handler,false);
	}
	,remove: function(key) {
		this.deleted.push(key);
		this.commit(tannus_storage_Commit.Delete(key));
	}
	,reference: function(key) {
		var ref;
		var g = (function(f,a1) {
			return function() {
				return f(a1);
			};
		})($bind(this,this.get),key);
		var s = (function(f1,a11) {
			return function(a2) {
				return f1(a11,a2);
			};
		})($bind(this,this.set),key);
		var d = (function(f2,a12) {
			return function() {
				f2(a12);
			};
		})($bind(this,this.remove),key);
		ref = new tannus_io__$Pointer_Ref(g,s);
		return ref;
	}
	,keys: function() {
		return tannus_ds_ArrayTools.without(tannus_ds_ArrayTools.unique(tannus_ds_MapTools.keyArray(this.remote).concat(tannus_ds_MapTools.keyArray(this.local))),this.deleted);
	}
	,getState: function() {
		return this._applyCommits(this.remote != null?this.remote:new haxe_ds_StringMap(),this.commits);
	}
	,rollback: function() {
		this.local = new haxe_ds_StringMap();
		this.deleted = [];
		this.commits = [];
	}
	,_fetch: function(cb) {
		throw new js__$Boot_HaxeError("StorageMethodNotImplemented: _fetch!");
	}
	,_applyCommits: function(rem,coms) {
		var result = tannus_storage_Storage.copy(rem);
		var _g = 0;
		while(_g < coms.length) {
			var commit = coms[_g];
			++_g;
			switch(commit[1]) {
			case 0:
				var value = commit[3];
				var key = commit[2];
				var value1 = value;
				result.set(key,value1);
				break;
			case 2:
				var next = commit[4];
				var prev = commit[3];
				var key1 = commit[2];
				var value2 = next;
				result.set(key1,value2);
				break;
			case 1:
				var key2 = commit[2];
				result.remove(key2);
				break;
			}
		}
		return result;
	}
	,_push: function(data,cb) {
		throw new js__$Boot_HaxeError("StorageMethodNotImplemented: _push!");
	}
	,_remoteCommitSignal: function() {
		throw new js__$Boot_HaxeError("StorageMethodNotImplemented: _remoteCommitSignal!");
		return new tannus_io_Signal();
	}
	,commit: function(c) {
		this.commits.push(c);
	}
	,get_ready: function() {
		return this._ready;
	}
	,__class__: tannus_storage_Storage
	,__properties__: {get_ready:"get_ready"}
};
var tannus_storage_SubStorage = function(paref) {
	tannus_storage_Storage.call(this);
	this._parent = paref;
	this.key = null;
	this.prefix = null;
	this.autoPush = true;
};
$hxClasses["tannus.storage.SubStorage"] = tannus_storage_SubStorage;
tannus_storage_SubStorage.__name__ = ["tannus","storage","SubStorage"];
tannus_storage_SubStorage.__super__ = tannus_storage_Storage;
tannus_storage_SubStorage.prototype = $extend(tannus_storage_Storage.prototype,{
	_fetch: function(cb) {
		var _g = this;
		var dat = new haxe_ds_StringMap();
		this._parent().fetch(function() {
			if(_g.key != null) {
				var encoded = _g._parent().get(_g.key) + "";
				var decoded = haxe_Unserializer.run(encoded);
				cb(tannus_ds__$Object_Object_$Impl_$.toMap(decoded));
			} else if(_g.prefix != null) {
				var keys = _g._parent().keys().filter(function(item) {
					return StringTools.startsWith(item,_g.prefix);
				});
				var _g1 = 0;
				while(_g1 < keys.length) {
					var key = keys[_g1];
					++_g1;
					var k = tannus_ds_StringUtils.after(key,_g.prefix);
					var v = _g._parent().get(key);
					dat.set(k,v);
					v;
				}
				cb(dat);
			} else throw new js__$Boot_HaxeError("Error: Either key or prefix must be defined, and neither are");
		});
	}
	,_push: function(data,cb) {
		if(this.key != null) {
			var encoded = haxe_Serializer.run(tannus_ds_MapTools.toObject(data));
			this._parent().set(this.key,encoded);
			this._parent().push(function() {
				cb(null);
			});
		} else if(this.prefix != null) {
			var $it0 = data.keys();
			while( $it0.hasNext() ) {
				var key = $it0.next();
				this._parent().set(this.prefix + key,__map_reserved[key] != null?data.getReserved(key):data.h[key]);
			}
			var _g = 0;
			var _g1 = this.deleted;
			while(_g < _g1.length) {
				var key1 = _g1[_g];
				++_g;
				this._parent().remove(this.prefix != null?this.prefix + key1:key1);
			}
			this._parent().push(function() {
				cb(null);
			});
		} else throw new js__$Boot_HaxeError("Error: Either key or prefix must be defined, and neither are");
	}
	,_remoteCommitSignal: function() {
		var _g = this;
		var sig = new tannus_io_Signal();
		this._parent().watch(function(commit) {
			switch(commit[1]) {
			case 2:
				var next = commit[4];
				var prev = commit[3];
				var key = commit[2];
				if(_g.relevantKey(key)) sig.call(tannus_storage_Commit.Change(_g.prefix != null?tannus_ds_StringUtils.after(key,_g.prefix):key,prev,next));
				break;
			case 0:
				var value = commit[3];
				var key1 = commit[2];
				if(_g.relevantKey(key1)) sig.call(tannus_storage_Commit.Create(_g.prefix != null?tannus_ds_StringUtils.after(key1,_g.prefix):key1,value));
				break;
			case 1:
				var key2 = commit[2];
				if(_g.relevantKey(key2)) sig.call(tannus_storage_Commit.Delete(_g.prefix != null?tannus_ds_StringUtils.after(key2,_g.prefix):key2));
				break;
			}
		});
		return sig;
	}
	,relevantKey: function(k) {
		if(this.key != null) return k == this.key; else if(this.prefix != null) return StringTools.startsWith(k,this.prefix); else return false;
	}
	,localKey: function(k) {
		if(this.prefix != null) return tannus_ds_StringUtils.after(k,this.prefix); else return k;
	}
	,globalKey: function(k) {
		if(this.prefix != null) return this.prefix + k; else return k;
	}
	,set: function(key,value) {
		var res = tannus_storage_Storage.prototype.set.call(this,key,value);
		if(this.autoPush) this.push(function() {
			null;
		});
		return res;
	}
	,get_parent: function() {
		return this._parent();
	}
	,__class__: tannus_storage_SubStorage
	,__properties__: $extend(tannus_storage_Storage.prototype.__properties__,{get_parent:"get_parent"})
});
var tannus_storage_chrome_ChromeStorage = function(a) {
	tannus_storage_Storage.call(this);
	this.area = a;
};
$hxClasses["tannus.storage.chrome.ChromeStorage"] = tannus_storage_chrome_ChromeStorage;
tannus_storage_chrome_ChromeStorage.__name__ = ["tannus","storage","chrome","ChromeStorage"];
tannus_storage_chrome_ChromeStorage.__super__ = tannus_storage_Storage;
tannus_storage_chrome_ChromeStorage.prototype = $extend(tannus_storage_Storage.prototype,{
	_fetch: function(cb) {
		var _g = this;
		this.area.get(null,function(data) {
			var d = _g.decode(tannus_ds__$Object_Object_$Impl_$.toMap(data));
			cb(d);
		});
	}
	,_push: function(map_data,cb) {
		var _g = this;
		var data = tannus_ds_MapTools.toObject(this.encode(map_data));
		this.area.remove(this.deleted,function() {
			_g.area.set(data,function() {
				cb(null);
			});
		});
	}
	,_remoteCommitSignal: function() {
		var signal = new tannus_io_Signal();
		tannus_chrome__$StorageArea_StorageArea_$Impl_$.watchAll(this.area,function(change) {
			var removed = [];
			var created = new haxe_ds_StringMap();
			var changed = new haxe_ds_StringMap();
			var commits = [];
			var $it0 = change.keys();
			while( $it0.hasNext() ) {
				var key = $it0.next();
				var delta;
				delta = __map_reserved[key] != null?change.getReserved(key):change.h[key];
				{
					var _g = delta[1];
					var _g1 = delta[0];
					var value = _g;
					var prev = _g;
					if(_g == null) {
						var value1 = _g1;
						var v = value1;
						created.set(key,v);
						v;
						commits.push(tannus_storage_Commit.Create(key,value1));
					} else switch(_g) {
					default:
						var next = _g1;
						if(_g1 == null) {
							removed.push(key);
							commits.push(tannus_storage_Commit.Delete(key));
						} else switch(_g1) {
						default:
							if(__map_reserved[key] != null) changed.setReserved(key,delta); else changed.h[key] = delta;
							commits.push(tannus_storage_Commit.Change(key,prev,next));
						}
					}
				}
			}
			var _g2 = 0;
			while(_g2 < commits.length) {
				var c = commits[_g2];
				++_g2;
				signal.broadcast(c);
			}
		});
		return signal;
	}
	,encode: function(data) {
		var e = new haxe_ds_StringMap();
		var $it0 = data.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			var v = haxe_Serializer.run(__map_reserved[key] != null?data.getReserved(key):data.h[key]);
			e.set(key,v);
			v;
		}
		return e;
	}
	,decode: function(data) {
		var d = new haxe_ds_StringMap();
		var $it0 = data.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			var v = haxe_Unserializer.run(__map_reserved[key] != null?data.getReserved(key):data.h[key]);
			d.set(key,v);
			v;
		}
		return d;
	}
	,__class__: tannus_storage_chrome_ChromeStorage
});
var tannus_storage_js_WebFileStorage = function(_f) {
	this._locked = false;
	tannus_storage_Storage.call(this);
	this.fe = _f;
	this.f = null;
	this.writer = null;
	this._onunlocked = new tannus_io_VoidSignal();
};
$hxClasses["tannus.storage.js.WebFileStorage"] = tannus_storage_js_WebFileStorage;
tannus_storage_js_WebFileStorage.__name__ = ["tannus","storage","js","WebFileStorage"];
tannus_storage_js_WebFileStorage.__super__ = tannus_storage_Storage;
tannus_storage_js_WebFileStorage.prototype = $extend(tannus_storage_Storage.prototype,{
	getFile: function(cb) {
		var _g = this;
		if(this.f == null) ((function($this) {
			var $r;
			var this1 = $this.fe;
			$r = new tannus_html_fs_FilePromise(function(give) {
				give(this1);
			});
			return $r;
		}(this))).then(function(file) {
			_g.f = file;
			cb(_g.f);
		}); else cb(this.f);
	}
	,getWriter: function(cb) {
		var _g = this;
		if(this.writer == null) tannus_html_fs__$WebFileEntry_WebFileEntry_$Impl_$.writer(this.fe).then(function(w) {
			_g.writer = w;
			cb(_g.writer);
		}); else cb(this.writer);
	}
	,_fetch: function(cb) {
		var _g = this;
		if(!this._locked) {
			this.lock();
			this.getFile(function(file) {
				if(file.file.size == 0) cb(new haxe_ds_StringMap()); else file.read().then(function(data) {
					if(data == null) {
						var this1;
						this1 = tannus_io_impl_BrowserBinary.alloc(0);
						data = this1;
					}
					var odata = JSON.parse(data.toString());
					_g.unlock();
					var mdata = tannus_ds__$Object_Object_$Impl_$.toMap(odata);
					mdata = _g.decode(mdata);
					cb(mdata);
				});
			});
		} else throw new Error("Attempted to perform an operation on a Storage while locked!");
	}
	,_push: function(mdata,cb) {
		var _g = this;
		if(!this._locked) {
			var start = new Date().getTime();
			this.lock();
			this.getWriter(function(writer) {
				var o = tannus_ds_MapTools.toObject(_g.encode(mdata));
				var sdata = JSON.stringify(o,null,"    ");
				var data = tannus_io_impl_BrowserBinary.ofString(sdata);
				writer.write(data,function(err) {
					if(err != null) {
						_g.unlock();
						throw new js__$Boot_HaxeError(err);
					}
					writer.w.truncate(writer.w.position);
					_g.f = null;
					var end = new Date().getTime();
					var took = end - start;
					console.log("metadata PUSH operation took " + took + "ms to complete");
					_g.unlock();
					cb(err);
				});
			});
		} else throw new Error("Attempted to perform an operation on a Storage while locked!");
	}
	,lock: function() {
		this._locked = true;
	}
	,unlock: function() {
		this._locked = false;
		this._onunlocked.call();
	}
	,encode: function(data) {
		var enc = new haxe_ds_StringMap();
		haxe_Serializer.USE_CACHE = true;
		haxe_Serializer.USE_ENUM_INDEX = true;
		var $it0 = data.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			var v = haxe_Serializer.run(__map_reserved[key] != null?data.getReserved(key):data.h[key]);
			enc.set(key,v);
			v;
		}
		return enc;
	}
	,decode: function(data) {
		var dec = new haxe_ds_StringMap();
		var $it0 = data.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			var v = haxe_Unserializer.run(Std.string(__map_reserved[key] != null?data.getReserved(key):data.h[key]));
			dec.set(key,v);
			v;
		}
		return dec;
	}
	,isLocked: function() {
		return this._locked;
	}
	,__class__: tannus_storage_js_WebFileStorage
});
var tannus_sys_CDirectory = function(path,create) {
	if(create == null) create = false;
	this._path = path;
	if(tannus_sys_JavaScriptFileSystem.exists(this._path.s)) {
		if(!tannus_sys_JavaScriptFileSystem.isDirectory(this._path.s)) throw new js__$Boot_HaxeError("IOError: " + path.s + " is not a Directory!");
	} else if(create) tannus_sys_JavaScriptFileSystem.createDirectory(this._path.s); else throw new js__$Boot_HaxeError("IOError: " + path.s + " is not a File or a Directory!");
};
$hxClasses["tannus.sys.CDirectory"] = tannus_sys_CDirectory;
tannus_sys_CDirectory.__name__ = ["tannus","sys","CDirectory"];
tannus_sys_CDirectory.prototype = {
	getEntry: function(name) {
		if(this.hasEntry(name)) return tannus_sys__$FSEntry_FSEntry_$Impl_$.fromPath((function($this) {
			var $r;
			var other = tannus_sys__$Path_Path_$Impl_$.fromString(name);
			$r = tannus_sys_CPath.join([$this._path,other]);
			return $r;
		}(this))); else return null;
	}
	,hasEntry: function(name) {
		var pp = tannus_sys_CPath.join([this._path,tannus_sys__$Path_Path_$Impl_$.fromString(name)]);
		if(this._path.get_absolute()) pp = pp.absolutize();
		return tannus_sys_JavaScriptFileSystem.exists(pp.s);
	}
	,file: function(name) {
		var p = tannus_sys__$Path_Path_$Impl_$.fromString((this._path.get_absolute()?"/":"") + this._path.s + name);
		return new tannus_sys_CFile(p);
	}
	,dir: function(name,create) {
		if(create == null) create = false;
		var p = tannus_sys__$Path_Path_$Impl_$.fromString((this._path.get_absolute()?"/":"") + (function($this) {
			var $r;
			var this1;
			{
				var other = tannus_sys__$Path_Path_$Impl_$.fromString(name);
				this1 = tannus_sys_CPath.join([$this._path,other]);
			}
			$r = this1.s;
			return $r;
		}(this)));
		return new tannus_sys_CDirectory(p,create);
	}
	,iterator: function() {
		return new tannus_sys_DirIter(this);
	}
	,walk: function(f) {
		var _g = new tannus_sys_DirIter(this);
		while(_g.ei.hasNext()) {
			var e = _g.next();
			{
				var _g1 = e;
				switch(_g1[1]) {
				case 0:
					f(e);
					break;
				case 1:
					var dir = _g1[2];
					f(e);
					dir.walk(f);
					break;
				}
			}
		}
	}
	,gather: function(tester) {
		var results = [];
		var _g = 0;
		var _g1 = this.get_entries();
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			{
				var _g2 = e;
				switch(_g2[1]) {
				case 0:
					var f = _g2[2];
					if(tester == null) results.push(f); else if(tester(f)) results.push(f);
					break;
				case 1:
					var d = _g2[2];
					var sub = d.gather(tester);
					results = results.concat(sub);
					break;
				}
			}
		}
		return results;
	}
	,search: function(pattern,recursive) {
		if(recursive == null) recursive = false;
		if(!recursive) {
			var results = [];
			var _g = 0;
			var _g1 = this.get_entries();
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				if(tannus_sys__$FSEntry_FSEntry_$Impl_$.isFile(e) && pattern.test((function($this) {
					var $r;
					var this1 = tannus_sys__$FSEntry_FSEntry_$Impl_$.get_path(e);
					$r = this1.s;
					return $r;
				}(this)))) results.push(tannus_sys__$FSEntry_FSEntry_$Impl_$.file(e));
			}
			return results;
		} else return this.gather(function(f) {
			return pattern.test(f._path.s);
		});
	}
	,'delete': function(force) {
		if(force == null) force = false;
		if(!force) tannus_sys_JavaScriptFileSystem.deleteDirectory(this._path.s); else tannus_sys_JavaScriptFileSystem.deleteDirectory(this._path.s);
	}
	,rename: function(npath) {
		tannus_sys_JavaScriptFileSystem.volume.rename(this._path.s,npath.s);
		tannus_sys_JavaScriptFileSystem.save();
		this._path = npath;
	}
	,get_path: function() {
		return this._path;
	}
	,get_exists: function() {
		return tannus_sys_JavaScriptFileSystem.exists(this._path.s);
	}
	,get_subpaths: function() {
		var _g = this;
		return tannus_sys_JavaScriptFileSystem.readDirectory(this._path.get_str()).map(tannus_sys__$Path_Path_$Impl_$.fromString).map(function(sp) {
			sp.set_directory(_g._path);
			return sp;
		});
	}
	,get_entries: function() {
		return this.get_subpaths().map(tannus_sys__$FSEntry_FSEntry_$Impl_$.fromPath);
	}
	,__class__: tannus_sys_CDirectory
	,__properties__: {get_entries:"get_entries",get_subpaths:"get_subpaths",get_exists:"get_exists",get_path:"get_path"}
};
var tannus_sys_DirIter = function(cd) {
	this.pp = new tannus_sys_CPath(cd._path.s);
	var _this = tannus_sys_JavaScriptFileSystem.readDirectory(this.pp.get_str());
	this.ei = HxOverrides.iter(_this);
};
$hxClasses["tannus.sys.DirIter"] = tannus_sys_DirIter;
tannus_sys_DirIter.__name__ = ["tannus","sys","DirIter"];
tannus_sys_DirIter.prototype = {
	hasNext: function() {
		return this.ei.hasNext();
	}
	,next: function() {
		var epath;
		var other = tannus_sys__$Path_Path_$Impl_$.fromString(this.ei.next());
		epath = tannus_sys_CPath.join([this.pp,other]);
		return tannus_sys__$FSEntry_FSEntry_$Impl_$.fromPath(epath);
	}
	,__class__: tannus_sys_DirIter
};
var tannus_sys__$Directory_Directory_$Impl_$ = {};
$hxClasses["tannus.sys._Directory.Directory_Impl_"] = tannus_sys__$Directory_Directory_$Impl_$;
tannus_sys__$Directory_Directory_$Impl_$.__name__ = ["tannus","sys","_Directory","Directory_Impl_"];
tannus_sys__$Directory_Directory_$Impl_$._new = function(p,create) {
	if(create == null) create = false;
	return new tannus_sys_CDirectory(p,create);
};
tannus_sys__$Directory_Directory_$Impl_$.get = function(this1,name) {
	return this1.getEntry(name);
};
tannus_sys__$Directory_Directory_$Impl_$.fromPath = function(path) {
	return new tannus_sys_CDirectory(path,false);
};
tannus_sys__$Directory_Directory_$Impl_$.fromString = function(s) {
	var p = tannus_sys__$Path_Path_$Impl_$.fromString(s);
	return new tannus_sys_CDirectory(p,false);
};
var tannus_sys__$FSEntry_FSEntry_$Impl_$ = {};
$hxClasses["tannus.sys._FSEntry.FSEntry_Impl_"] = tannus_sys__$FSEntry_FSEntry_$Impl_$;
tannus_sys__$FSEntry_FSEntry_$Impl_$.__name__ = ["tannus","sys","_FSEntry","FSEntry_Impl_"];
tannus_sys__$FSEntry_FSEntry_$Impl_$.__properties__ = {get_name:"get_name",get_path:"get_path",get_type:"get_type"}
tannus_sys__$FSEntry_FSEntry_$Impl_$._new = function(et) {
	return et;
};
tannus_sys__$FSEntry_FSEntry_$Impl_$.get_type = function(this1) {
	return this1;
};
tannus_sys__$FSEntry_FSEntry_$Impl_$.get_path = function(this1) {
	{
		var _g = this1;
		switch(_g[1]) {
		case 0:
			var f = _g[2];
			return f._path;
		case 1:
			var f1 = _g[2];
			return f1._path;
		}
	}
};
tannus_sys__$FSEntry_FSEntry_$Impl_$.get_name = function(this1) {
	return tannus_sys__$FSEntry_FSEntry_$Impl_$.get_path(this1).get_name();
};
tannus_sys__$FSEntry_FSEntry_$Impl_$.rename = function(this1,ndir) {
	{
		var _g = this1;
		switch(_g[1]) {
		case 0:
			var f = _g[2];
			f.set_path(ndir);
			break;
		case 1:
			var f1 = _g[2];
			f1.rename(ndir);
			break;
		}
	}
};
tannus_sys__$FSEntry_FSEntry_$Impl_$["delete"] = function(this1) {
	{
		var _g = this1;
		switch(_g[1]) {
		case 0:
			var f = _g[2];
			tannus_sys_JavaScriptFileSystem.volume.deleteFile(f._path.s);
			tannus_sys_JavaScriptFileSystem.save();
			break;
		case 1:
			var f1 = _g[2];
			f1["delete"]();
			break;
		}
	}
};
tannus_sys__$FSEntry_FSEntry_$Impl_$.file = function(this1) {
	{
		var _g = this1;
		switch(_g[1]) {
		case 0:
			var f = _g[2];
			return f;
		case 1:
			var d = _g[2];
			throw new js__$Boot_HaxeError("IOError: Cannot cast a Directory to a File!");
			break;
		}
	}
};
tannus_sys__$FSEntry_FSEntry_$Impl_$.isFile = function(this1) {
	{
		var _g = this1;
		switch(_g[1]) {
		case 0:
			var f = _g[2];
			return true;
		case 1:
			var d = _g[2];
			return false;
		}
	}
};
tannus_sys__$FSEntry_FSEntry_$Impl_$.isDirectory = function(this1) {
	{
		var _g = this1;
		switch(_g[1]) {
		case 0:
			var f = _g[2];
			return false;
		case 1:
			var d = _g[2];
			return true;
		}
	}
};
tannus_sys__$FSEntry_FSEntry_$Impl_$.folder = function(this1) {
	{
		var _g = this1;
		switch(_g[1]) {
		case 0:
			var f = _g[2];
			throw new js__$Boot_HaxeError("IOError: Cannot cast a File to a Directory!");
			break;
		case 1:
			var d = _g[2];
			return d;
		}
	}
};
tannus_sys__$FSEntry_FSEntry_$Impl_$.fromPath = function(p) {
	if(tannus_sys_JavaScriptFileSystem.exists(p.s)) {
		if(tannus_sys_JavaScriptFileSystem.isDirectory(p.s)) {
			var et = tannus_sys_FSEntryType.Folder(new tannus_sys_CDirectory(p,false));
			return et;
		} else {
			var et1 = tannus_sys_FSEntryType.File(new tannus_sys_CFile(p));
			return et1;
		}
	} else {
		var err = "IOError: Cannot create FSEntry instance for non-existent Path(\"" + p.s + "\")";
		console.log(err);
		throw new js__$Boot_HaxeError(err);
	}
};
tannus_sys__$FSEntry_FSEntry_$Impl_$.fromString = function(s) {
	return tannus_sys__$FSEntry_FSEntry_$Impl_$.fromPath(tannus_sys__$Path_Path_$Impl_$.fromString(s));
};
var tannus_sys_FSEntryType = $hxClasses["tannus.sys.FSEntryType"] = { __ename__ : ["tannus","sys","FSEntryType"], __constructs__ : ["File","Folder"] };
tannus_sys_FSEntryType.File = function(f) { var $x = ["File",0,f]; $x.__enum__ = tannus_sys_FSEntryType; $x.toString = $estr; return $x; };
tannus_sys_FSEntryType.Folder = function(d) { var $x = ["Folder",1,d]; $x.__enum__ = tannus_sys_FSEntryType; $x.toString = $estr; return $x; };
var tannus_sys__$File_File_$Impl_$ = {};
$hxClasses["tannus.sys._File.File_Impl_"] = tannus_sys__$File_File_$Impl_$;
tannus_sys__$File_File_$Impl_$.__name__ = ["tannus","sys","_File","File_Impl_"];
tannus_sys__$File_File_$Impl_$._new = function(p) {
	return new tannus_sys_CFile(p);
};
tannus_sys__$File_File_$Impl_$.fromString = function(p) {
	var p1 = tannus_sys__$Path_Path_$Impl_$.fromString(p);
	return new tannus_sys_CFile(p1);
};
tannus_sys__$File_File_$Impl_$.fromPath = function(p) {
	return new tannus_sys_CFile(p);
};
tannus_sys__$File_File_$Impl_$.fromByteArray = function(p) {
	var p1 = p.toString();
	var p2 = tannus_sys__$Path_Path_$Impl_$.fromString(p1);
	return new tannus_sys_CFile(p2);
};
var tannus_sys_CFile = function(p) {
	this._path = p;
	if(tannus_sys_JavaScriptFileSystem.exists(this._path.s) && tannus_sys_JavaScriptFileSystem.isDirectory(this._path.s)) throw new js__$Boot_HaxeError("FileError: " + ("\"" + this._path.s + "\" is a directory!"));
};
$hxClasses["tannus.sys.CFile"] = tannus_sys_CFile;
tannus_sys_CFile.__name__ = ["tannus","sys","CFile"];
tannus_sys_CFile.ferror = function(msg) {
	throw new js__$Boot_HaxeError("FileError: " + msg);
};
tannus_sys_CFile.prototype = {
	read: function() {
		return tannus_sys_JavaScriptFileSystem.read(this._path.s);
	}
	,write: function(data) {
		tannus_sys_JavaScriptFileSystem.write(this._path.s,data);
	}
	,append: function(data) {
		tannus_sys_JavaScriptFileSystem.append(this._path.s,data);
	}
	,writeString: function(s) {
		tannus_sys_JavaScriptFileSystem.write(this._path.s,tannus_io_impl_BrowserBinary.ofString(s));
	}
	,rename: function(newpath) {
		this.set_path(newpath);
	}
	,'delete': function() {
		tannus_sys_JavaScriptFileSystem.volume.deleteFile(this._path.s);
		tannus_sys_JavaScriptFileSystem.save();
	}
	,lines: function(list) {
		if(list == null) {
			var res = [];
			var buf = "";
			var data = tannus_sys_JavaScriptFileSystem.read(this._path.s);
			var $it0 = data.iterator();
			while( $it0.hasNext() ) {
				var $byte = $it0.next();
				if($byte == 10 || $byte == 13) {
					res.push(buf);
					buf = "";
				} else buf += String.fromCharCode($byte);
			}
			if(buf.length != 0) res.push(buf);
			return res;
		} else {
			this.write((function($this) {
				var $r;
				var s = list.join("\n");
				$r = tannus_io_impl_BrowserBinary.ofString(s);
				return $r;
			}(this)));
			return list;
		}
	}
	,get_exists: function() {
		return tannus_sys_JavaScriptFileSystem.exists(this._path.s);
	}
	,get_size: function() {
		var stats = tannus_sys_JavaScriptFileSystem.volume.stat(this._path.s);
		return stats.size;
	}
	,get_data: function() {
		return tannus_sys_JavaScriptFileSystem.read(this._path.s);
	}
	,set_data: function(nd) {
		tannus_sys_JavaScriptFileSystem.write(this._path.s,nd);
		return tannus_sys_JavaScriptFileSystem.read(this._path.s);
	}
	,get_content: function() {
		var f = this;
		var f1 = new tannus_io__$Pointer_Ref(function() {
			return f;
		},function(v) {
			return f = v;
		});
		return f1;
	}
	,get_path: function() {
		return this._path;
	}
	,set_path: function(np) {
		tannus_sys_JavaScriptFileSystem.volume.rename(this._path.s,np.s);
		tannus_sys_JavaScriptFileSystem.save();
		return this._path = np;
	}
	,get_directory: function() {
		{
			var path = this._path.get_directory();
			return new tannus_sys_CDirectory(path,false);
		}
	}
	,get_input: function() {
		var inp = new haxe_io_BytesInput((function($this) {
			var $r;
			var this1 = $this.get_data();
			$r = this1.toBytes();
			return $r;
		}(this)));
		return inp;
	}
	,get_stats: function() {
		return tannus_sys_JavaScriptFileSystem.volume.stat(this._path.s);
	}
	,__class__: tannus_sys_CFile
	,__properties__: {get_stats:"get_stats",get_input:"get_input",get_directory:"get_directory",set_path:"set_path",get_path:"get_path",get_content:"get_content",set_data:"set_data",get_data:"get_data",get_size:"get_size",get_exists:"get_exists"}
};
var tannus_sys__$GlobStar_GlobStar_$Impl_$ = {};
$hxClasses["tannus.sys._GlobStar.GlobStar_Impl_"] = tannus_sys__$GlobStar_GlobStar_$Impl_$;
tannus_sys__$GlobStar_GlobStar_$Impl_$.__name__ = ["tannus","sys","_GlobStar","GlobStar_Impl_"];
tannus_sys__$GlobStar_GlobStar_$Impl_$._new = function(s,flags) {
	if(flags == null) flags = "";
	return new tannus_sys_CGlobStar(s,flags);
};
tannus_sys__$GlobStar_GlobStar_$Impl_$.fromString = function(s) {
	return new tannus_sys_CGlobStar(s,"");
};
var tannus_sys_CGlobStar = $hx_exports.globstar = function(pat,flags) {
	this.spat = pat;
	var data = tannus_sys_gs_Printer.compile(pat,flags);
	this.pattern = data.regex;
	this.pind = data.params;
};
$hxClasses["tannus.sys.CGlobStar"] = tannus_sys_CGlobStar;
tannus_sys_CGlobStar.__name__ = ["tannus","sys","CGlobStar"];
tannus_sys_CGlobStar.prototype = {
	test: function(path) {
		return this.pattern.match(path);
		var data = tannus_io__$RegEx_RegEx_$Impl_$.matches(this.pattern,path);
		if(data.length == 0) return false; else return StringTools.trim(tannus_ds_StringUtils.remove(path,data[0][0])) == "";
	}
	,match: function(s) {
		var dat = tannus_io__$RegEx_RegEx_$Impl_$.matches(this.pattern,s);
		if(dat.length == 0) return null; else {
			var m = dat[0];
			var res = { };
			var $it0 = this.pind.keys();
			while( $it0.hasNext() ) {
				var k = $it0.next();
				var i = this.pind.get(k);
				{
					Reflect.setProperty(res,k,m[i + 1]);
					Reflect.getProperty(res,k);
				}
			}
			return res;
		}
	}
	,toString: function() {
		var s = "GlobStar(" + this.spat + " => " + this.patternString() + ")";
		return s;
	}
	,patternString: function() {
		return this.pattern.r.toString();
	}
	,__class__: tannus_sys_CGlobStar
};
var tannus_sys_Token = $hxClasses["tannus.sys.Token"] = { __ename__ : ["tannus","sys","Token"], __constructs__ : ["TLiteral","TExpan"] };
tannus_sys_Token.TLiteral = function(s) { var $x = ["TLiteral",0,s]; $x.__enum__ = tannus_sys_Token; $x.toString = $estr; return $x; };
tannus_sys_Token.TExpan = function(bits) { var $x = ["TExpan",1,bits]; $x.__enum__ = tannus_sys_Token; $x.toString = $estr; return $x; };
var tannus_sys_JavaScriptFileSystem = function() { };
$hxClasses["tannus.sys.JavaScriptFileSystem"] = tannus_sys_JavaScriptFileSystem;
tannus_sys_JavaScriptFileSystem.__name__ = ["tannus","sys","JavaScriptFileSystem"];
tannus_sys_JavaScriptFileSystem.__properties__ = {get_v:"get_v"}
tannus_sys_JavaScriptFileSystem.load = function() {
	var ls = js_Browser.getLocalStorage();
	var saved = ls.getItem("::fs::");
	if(saved == null) {
		tannus_sys_JavaScriptFileSystem.volume = new tannus_sys_VirtualVolume("fs");
		tannus_sys_JavaScriptFileSystem.save();
	} else tannus_sys_JavaScriptFileSystem.volume = tannus_sys_VirtualVolume.deserialize(tannus_io_impl_BrowserBinary.ofString(saved));
};
tannus_sys_JavaScriptFileSystem.save = function() {
	var ls = js_Browser.getLocalStorage();
	var data = tannus_sys_JavaScriptFileSystem.volume.serialize();
	ls.setItem("::fs::",data.toString());
};
tannus_sys_JavaScriptFileSystem.get_v = function() {
	return tannus_sys_JavaScriptFileSystem.volume;
};
tannus_sys_JavaScriptFileSystem.exists = function(name) {
	return tannus_sys_JavaScriptFileSystem.volume.exists(name);
};
tannus_sys_JavaScriptFileSystem.isDirectory = function(name) {
	return tannus_sys_JavaScriptFileSystem.volume.isDirectory(name);
};
tannus_sys_JavaScriptFileSystem.createDirectory = function(name) {
	tannus_sys_JavaScriptFileSystem.volume.createDirectory(name);
	tannus_sys_JavaScriptFileSystem.save();
};
tannus_sys_JavaScriptFileSystem.deleteDirectory = function(name) {
	tannus_sys_JavaScriptFileSystem.volume.deleteDirectory(name);
	tannus_sys_JavaScriptFileSystem.save();
};
tannus_sys_JavaScriptFileSystem.deleteFile = function(name) {
	tannus_sys_JavaScriptFileSystem.volume.deleteFile(name);
	tannus_sys_JavaScriptFileSystem.save();
};
tannus_sys_JavaScriptFileSystem.readDirectory = function(name) {
	return tannus_sys_JavaScriptFileSystem.volume.readDirectory(name);
};
tannus_sys_JavaScriptFileSystem.read = function(name) {
	return tannus_sys_JavaScriptFileSystem.volume.read(name);
};
tannus_sys_JavaScriptFileSystem.write = function(name,data) {
	tannus_sys_JavaScriptFileSystem.volume.write(name,data);
	tannus_sys_JavaScriptFileSystem.save();
};
tannus_sys_JavaScriptFileSystem.append = function(name,data) {
	tannus_sys_JavaScriptFileSystem.volume.append(name,data);
	tannus_sys_JavaScriptFileSystem.save();
};
tannus_sys_JavaScriptFileSystem.rename = function(o,n) {
	tannus_sys_JavaScriptFileSystem.volume.rename(o,n);
	tannus_sys_JavaScriptFileSystem.save();
};
tannus_sys_JavaScriptFileSystem.stat = function(name) {
	return tannus_sys_JavaScriptFileSystem.volume.stat(name);
};
var tannus_sys__$Mime_Mime_$Impl_$ = {};
$hxClasses["tannus.sys._Mime.Mime_Impl_"] = tannus_sys__$Mime_Mime_$Impl_$;
tannus_sys__$Mime_Mime_$Impl_$.__name__ = ["tannus","sys","_Mime","Mime_Impl_"];
tannus_sys__$Mime_Mime_$Impl_$.__properties__ = {get_subtype:"get_subtype",get_type:"get_type"}
tannus_sys__$Mime_Mime_$Impl_$._new = function(m) {
	return m;
};
tannus_sys__$Mime_Mime_$Impl_$.get_type = function(this1) {
	if(tannus_ds_StringUtils.has(this1,"/")) return this1.substring(0,this1.indexOf("/")); else return this1;
};
tannus_sys__$Mime_Mime_$Impl_$.get_subtype = function(this1) {
	var st;
	if(tannus_ds_StringUtils.has(this1,"/")) st = this1.substring(this1.indexOf("/") + 1); else st = null;
	if(st == null) return null;
	return tannus_ds_StringUtils.before(tannus_ds_StringUtils.after(st,"."),"+");
};
tannus_sys__$Mime_Mime_$Impl_$.getSegments = function(this1) {
	var res = [];
	res = res.concat(this1.split("/"));
	var last;
	if(res.length == 2) {
		last = res.pop();
		var subs = last.split(".");
		res = res.concat(subs);
		last = res.pop();
		if(tannus_ds_StringUtils.has(last,"+")) {
			var suff = last.split("+");
			res = res.concat(suff);
		} else res.push(last);
	}
	return res;
};
tannus_sys__$Mime_Mime_$Impl_$.getMainType = function(this1) {
	if(tannus_ds_StringUtils.has(this1,"/")) return this1.substring(0,this1.indexOf("/")); else return this1;
};
tannus_sys__$Mime_Mime_$Impl_$.getSubType = function(this1) {
	if(tannus_ds_StringUtils.has(this1,"/")) return this1.substring(this1.indexOf("/") + 1); else return null;
};
tannus_sys__$Mime_Mime_$Impl_$.getTree = function(this1) {
	var st;
	if(tannus_ds_StringUtils.has(this1,"/")) st = this1.substring(this1.indexOf("/") + 1); else st = null;
	if(st == null) return null; else if(tannus_ds_StringUtils.has(st,".")) return st.substring(0,st.indexOf(".")); else return null;
};
var tannus_sys_Mimes = $hx_exports.tannus.sys.Mimes = function() { };
$hxClasses["tannus.sys.Mimes"] = tannus_sys_Mimes;
tannus_sys_Mimes.__name__ = ["tannus","sys","Mimes"];
tannus_sys_Mimes.minit = function() {
	if(!tannus_sys_Mimes.initted) tannus_sys_Mimes.__init();
};
tannus_sys_Mimes.getMimeType = function(ext) {
	if(!tannus_sys_Mimes.initted) tannus_sys_Mimes.__init();
	if(StringTools.startsWith(ext,".")) ext = ext.substring(1);
	if(tannus_sys_Mimes.extensions.exists(ext)) return tannus_sys_Mimes.extensions.get(ext); else return "application/octet-stream";
};
tannus_sys_Mimes.getExtensionList = function(mime) {
	if(!tannus_sys_Mimes.initted) tannus_sys_Mimes.__init();
	if(tannus_sys_Mimes.types.exists(mime)) return tannus_sys_Mimes.types.get(mime); else return [];
};
tannus_sys_Mimes.__init = function() {
	tannus_sys_Mimes.types = new haxe_ds_StringMap();
	tannus_sys_Mimes.extensions = new haxe_ds_StringMap();
	var all = Reflect.fields(tannus_sys_Mimes.primitive);
	var _g = 0;
	while(_g < all.length) {
		var ext = all[_g];
		++_g;
		var type = Std.string(Reflect.getProperty(tannus_sys_Mimes.primitive,ext));
		{
			tannus_sys_Mimes.extensions.set(ext,type);
			type;
		}
		if(tannus_sys_Mimes.types.get(type) == null) {
			var v = [];
			tannus_sys_Mimes.types.set(type,v);
			v;
		}
		tannus_sys_Mimes.types.get(type).push(ext);
	}
	tannus_sys_Mimes.initted = true;
};
tannus_sys_Mimes.getTypeToExtensionsMap = function() {
	if(!tannus_sys_Mimes.initted) tannus_sys_Mimes.__init();
	var m = new haxe_ds_StringMap();
	var $it0 = tannus_sys_Mimes.types.keys();
	while( $it0.hasNext() ) {
		var mime = $it0.next();
		var value;
		var _this = tannus_sys_Mimes.types.get(mime);
		value = _this.slice();
		if(__map_reserved[mime] != null) m.setReserved(mime,value); else m.h[mime] = value;
	}
	return m;
};
var tannus_sys__$Path_Path_$Impl_$ = {};
$hxClasses["tannus.sys._Path.Path_Impl_"] = tannus_sys__$Path_Path_$Impl_$;
tannus_sys__$Path_Path_$Impl_$.__name__ = ["tannus","sys","_Path","Path_Impl_"];
tannus_sys__$Path_Path_$Impl_$._new = function(s) {
	return new tannus_sys_CPath(s);
};
tannus_sys__$Path_Path_$Impl_$.sum = function(x,y) {
	var s;
	{
		var this1 = tannus_sys_CPath.join([tannus_sys__$Path_Path_$Impl_$.fromString(x.s),tannus_sys__$Path_Path_$Impl_$.fromString(y.s)]);
		s = this1.s;
	}
	return new tannus_sys_CPath(s);
};
tannus_sys__$Path_Path_$Impl_$.plusPath = function(this1,other) {
	return tannus_sys_CPath.join([this1,other]);
};
tannus_sys__$Path_Path_$Impl_$.plusString = function(this1,other) {
	return tannus_sys_CPath.join([this1,tannus_sys__$Path_Path_$Impl_$.fromString(other)]);
};
tannus_sys__$Path_Path_$Impl_$.toString = function(this1) {
	return this1.s;
};
tannus_sys__$Path_Path_$Impl_$.fromString = function(s) {
	return new tannus_sys_CPath(s);
};
tannus_sys__$Path_Path_$Impl_$.toByteArray = function(this1) {
	return tannus_io_impl_BrowserBinary.ofString(this1.s);
};
tannus_sys__$Path_Path_$Impl_$.fromByteArray = function(b) {
	return tannus_sys__$Path_Path_$Impl_$.fromString(b.toString());
};
var tannus_sys_CPath = function(str) {
	this.s = str;
};
$hxClasses["tannus.sys.CPath"] = tannus_sys_CPath;
tannus_sys_CPath.__name__ = ["tannus","sys","CPath"];
tannus_sys_CPath.join = function(list) {
	var bits = [];
	var resroot = list[0] != null && list[0].get_absolute();
	var _g = 0;
	while(_g < list.length) {
		var path = list[_g];
		++_g;
		bits = bits.concat(path.get_pieces());
	}
	bits = bits.filter(function(s1) {
		return s1 != null && !(s1.length == 0);
	});
	var sum = ((function($this) {
		var $r;
		var s = bits.join("/");
		$r = new tannus_sys_CPath(s);
		return $r;
	}(this))).normalize();
	if(resroot) sum = sum.absolutize();
	return sum;
};
tannus_sys_CPath.sjoin = function(slist) {
	return tannus_sys_CPath.join(slist.map(function(s) {
		return new tannus_sys_CPath(s);
	}));
};
tannus_sys_CPath._expand = function(p) {
	var segments = p.get_pieces();
	var pieces = [];
	var _g = 0;
	while(_g < segments.length) {
		var s = segments[_g];
		++_g;
		switch(s) {
		case ".":case "":
			continue;
			break;
		case "..":
			pieces.pop();
			break;
		default:
			pieces.push(s);
		}
	}
	var result = tannus_sys_CPath.sjoin(pieces).normalize();
	return result;
};
tannus_sys_CPath.err = function(msg) {
	throw new js__$Boot_HaxeError("PathError: " + msg);
};
tannus_sys_CPath.prototype = {
	toString: function() {
		return this.s;
	}
	,normalize: function() {
		var norm = this.s;
		norm = StringTools.replace(norm.split("\\").join("/"),"//","/");
		var _root = StringTools.startsWith(norm,"/");
		if(_root) norm = tannus_ds_StringUtils.after(norm,"/");
		var r = new tannus_sys_CPath(norm);
		if(this.get_absolute()) r = r.absolutize();
		return r;
	}
	,absolutize: function() {
		var spath = this.s + "";
		if(!StringTools.startsWith(spath,"/")) spath = "/" + spath;
		return new tannus_sys_CPath(spath);
	}
	,expand: function() {
		var pieces = this.get_pieces();
		var res = [];
		var _g = 0;
		while(_g < pieces.length) {
			var n = pieces[_g];
			++_g;
			switch(n) {
			case ".":case "":
				null;
				break;
			case "..":
				res.pop();
				break;
			default:
				res.push(n);
			}
		}
		var p;
		var s = res.join("/");
		p = new tannus_sys_CPath(s);
		if(this.get_absolute()) p = p.absolutize();
		return p;
	}
	,resolve: function(other) {
		var res = tannus_sys_CPath.join([this,other]).expand();
		if(this.get_absolute()) res = res.absolutize();
		return res;
	}
	,relative: function(other) {
		if(this.get_absolute() && other.get_absolute()) {
			var a = this.get_pieces();
			var b = other.get_pieces();
			var keep = [];
			var diffs = 0;
			var additions = [];
			var diffhit = false;
			var _g1 = 0;
			var _g = a.length;
			while(_g1 < _g) {
				var i = _g1++;
				var mine = a[i];
				var yurs = b[i];
				if(mine != yurs) diffhit = true;
				if(!diffhit) keep.push(mine); else {
					diffs++;
					if(yurs != null) additions.push(yurs);
				}
			}
			var respieces = tannus_ds_ArrayTools.times([".."],diffs).concat(additions);
			return tannus_sys_CPath.sjoin(respieces);
		} else throw new js__$Boot_HaxeError("PathError: " + "Both Paths must be absolute!");
		return tannus_sys__$Path_Path_$Impl_$.fromString("");
	}
	,get_sdir: function() {
		return haxe_io_Path.directory(this.s);
	}
	,get_str: function() {
		return this.s;
	}
	,set_str: function(v) {
		return this.s = v;
	}
	,get_directory: function() {
		var s = this.get_sdir();
		return new tannus_sys_CPath(s);
	}
	,set_directory: function(v) {
		var this1 = tannus_sys_CPath.sjoin([v.s,this.get_name()]);
		this.s = this1.s;
		if(v.get_absolute() && !StringTools.startsWith(this.s,"/")) this.s = "/" + this.s;
		return this.get_directory();
	}
	,get_name: function() {
		return haxe_io_Path.withoutDirectory(this.s);
	}
	,set_name: function(v) {
		var this1 = tannus_sys_CPath.join([tannus_sys__$Path_Path_$Impl_$.fromString(this.get_sdir()),tannus_sys__$Path_Path_$Impl_$.fromString(v)]);
		this.s = this1.s;
		return this.get_name();
	}
	,get_basename: function() {
		return haxe_io_Path.withoutExtension(this.s);
	}
	,set_basename: function(v) {
		this.set_name(v + ("." + this.get_extension()));
		return this.get_basename();
	}
	,get_extension: function() {
		return haxe_io_Path.extension(this.s);
	}
	,set_extension: function(v) {
		this.s = tannus_ds_StringUtils.beforeLast(this.s,".") + ("." + v);
		return this.get_extension();
	}
	,get_mime: function() {
		if(!tannus_ds_StringUtils.empty(this.get_extension())) {
			var m = tannus_sys_Mimes.getMimeType(this.get_extension());
			return m;
		} else return null;
	}
	,get_root: function() {
		return tannus_ds_StringUtils.empty(this.get_sdir());
	}
	,get_absolute: function() {
		return haxe_io_Path.isAbsolute(this.s);
	}
	,get_pieces: function() {
		return this.s.split("/");
	}
	,set_pieces: function(v) {
		var this1 = tannus_sys_CPath.sjoin(v);
		this.s = this1.s;
		return this.get_pieces();
	}
	,__class__: tannus_sys_CPath
	,__properties__: {set_pieces:"set_pieces",get_pieces:"get_pieces",get_absolute:"get_absolute",get_root:"get_root",get_mime:"get_mime",set_extension:"set_extension",get_extension:"get_extension",set_basename:"set_basename",get_basename:"get_basename",set_name:"set_name",get_name:"get_name",set_directory:"set_directory",get_directory:"get_directory",set_str:"set_str",get_str:"get_str",get_sdir:"get_sdir"}
};
var tannus_sys_VVEntry = function(vv,nam,typ) {
	this.name = nam;
	this.content = null;
	this.type = typ;
	this.meta = new haxe_ds_StringMap();
	this.volume = vv;
	this.__init();
};
$hxClasses["tannus.sys.VVEntry"] = tannus_sys_VVEntry;
tannus_sys_VVEntry.__name__ = ["tannus","sys","VVEntry"];
tannus_sys_VVEntry.deserialize = function(o,vol) {
	var e = new tannus_sys_VVEntry(vol,o.name,o.type);
	e.meta = o.meta;
	e.content = o.content;
	return e;
};
tannus_sys_VVEntry.prototype = {
	__init: function() {
		this.set_cdate(new Date());
	}
	,update: function() {
		this.set_mdate(new Date());
	}
	,list: function() {
		var _g = this;
		if(!this.get_isFile()) {
			var entries = this.volume.entries;
			return entries.filter(function(e) {
				return tannus_sys__$Path_Path_$Impl_$.fromString(e.name).get_directory() == tannus_sys__$Path_Path_$Impl_$.fromString(_g.name);
			});
		} else throw new js__$Boot_HaxeError("IOError: " + ("\"" + (function($this) {
			var $r;
			var this1 = tannus_sys__$Path_Path_$Impl_$.fromString($this.name);
			$r = this1.s;
			return $r;
		}(this)) + "\" is a File!"));
		return [];
	}
	,write: function(data) {
		if(this.get_isFile() || !this.volume.exists((function($this) {
			var $r;
			var this1 = tannus_sys__$Path_Path_$Impl_$.fromString($this.name);
			$r = this1.s;
			return $r;
		}(this)))) {
			this.content = data;
			this.set_mdate(new Date());
		} else throw new js__$Boot_HaxeError("IOError: " + ("\"" + (function($this) {
			var $r;
			var this2 = tannus_sys__$Path_Path_$Impl_$.fromString($this.name);
			$r = this2.s;
			return $r;
		}(this)) + "\" is a Directory!"));
	}
	,read: function() {
		if(this.get_isFile()) {
			if(this.content == null) return tannus_io_impl_BrowserBinary.ofString(""); else return this.content;
		} else throw new js__$Boot_HaxeError("IOError: " + ("\"" + (function($this) {
			var $r;
			var this1 = tannus_sys__$Path_Path_$Impl_$.fromString($this.name);
			$r = this1.s;
			return $r;
		}(this)) + "\" cannot be read!"));
		var this2;
		this2 = tannus_io_impl_BrowserBinary.alloc(0);
		return this2;
	}
	,append: function(data) {
		if(this.get_isFile()) {
			this.content = this.read();
			var s = data.toString();
			this.content.appendString(s);
			this.set_mdate(new Date());
		} else throw new js__$Boot_HaxeError("IOError: " + ("\"" + (function($this) {
			var $r;
			var this1 = tannus_sys__$Path_Path_$Impl_$.fromString($this.name);
			$r = this1.s;
			return $r;
		}(this)) + "\" cannot be written to!"));
	}
	,rename: function(newname) {
		if(this.get_isFile()) this.name = newname; else {
			var subs = this.list();
			var _g = 0;
			while(_g < subs.length) {
				var e = subs[_g];
				++_g;
				var np;
				{
					var this1 = tannus_sys__$Path_Path_$Impl_$.fromString(e.name).normalize();
					np = this1.s;
				}
				np = StringTools.replace(np,(function($this) {
					var $r;
					var this2 = tannus_sys__$Path_Path_$Impl_$.fromString($this.name).normalize();
					$r = this2.s;
					return $r;
				}(this)),(function($this) {
					var $r;
					var this3 = new tannus_sys_CPath(newname).normalize();
					$r = this3.s;
					return $r;
				}(this)));
				e.name = np;
			}
			this.name = newname;
		}
	}
	,serialize: function() {
		return { 'name' : this.name, 'type' : this.type, 'meta' : this.meta, 'content' : this.content};
	}
	,get_path: function() {
		return tannus_sys__$Path_Path_$Impl_$.fromString(this.name);
	}
	,set_path: function(np) {
		this.name = np.s;
		return tannus_sys__$Path_Path_$Impl_$.fromString(this.name);
	}
	,get_stats: function() {
		if(!this.get_isFile()) throw new js__$Boot_HaxeError("IOError: " + ("\"" + (function($this) {
			var $r;
			var this1 = tannus_sys__$Path_Path_$Impl_$.fromString($this.name);
			$r = this1.s;
			return $r;
		}(this)) + "\" is a Directory!"));
		return { 'size' : this.read().get_length(), 'ctime' : this.get_cdate(), 'mtime' : this.get_mdate()};
	}
	,get_isFile: function() {
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return true;
		default:
			return false;
		}
	}
	,get_isDirectory: function() {
		return !this.get_isFile();
	}
	,get_cdate: function() {
		return this.meta.get("cdate");
	}
	,set_cdate: function(cd) {
		var _cd = this.meta.get("cdate");
		if(_cd != null && js_Boot.__instanceof(_cd,Date)) return _cd; else return (function($this) {
			var $r;
			$this.meta.set("cdate",cd);
			$r = cd;
			return $r;
		}(this));
	}
	,get_mdate: function() {
		var m = this.meta.get("mdate");
		if(m != null) return m; else return this.get_cdate();
	}
	,set_mdate: function(nm) {
		return (function($this) {
			var $r;
			$this.meta.set("mdate",nm);
			$r = nm;
			return $r;
		}(this));
	}
	,__class__: tannus_sys_VVEntry
	,__properties__: {set_mdate:"set_mdate",get_mdate:"get_mdate",set_cdate:"set_cdate",get_cdate:"get_cdate",get_isDirectory:"get_isDirectory",get_isFile:"get_isFile",get_stats:"get_stats",set_path:"set_path",get_path:"get_path"}
};
var tannus_sys_VVType = $hxClasses["tannus.sys.VVType"] = { __ename__ : ["tannus","sys","VVType"], __constructs__ : ["VVFile","VVFolder"] };
tannus_sys_VVType.VVFile = ["VVFile",0];
tannus_sys_VVType.VVFile.toString = $estr;
tannus_sys_VVType.VVFile.__enum__ = tannus_sys_VVType;
tannus_sys_VVType.VVFolder = ["VVFolder",1];
tannus_sys_VVType.VVFolder.toString = $estr;
tannus_sys_VVType.VVFolder.__enum__ = tannus_sys_VVType;
var tannus_sys_VirtualVolume = function(nam) {
	this.name = nam;
	this.entries = [];
};
$hxClasses["tannus.sys.VirtualVolume"] = tannus_sys_VirtualVolume;
tannus_sys_VirtualVolume.__name__ = ["tannus","sys","VirtualVolume"];
tannus_sys_VirtualVolume.deserialize = function(data) {
	var bits = haxe_Unserializer.run(data.toString());
	var vv = new tannus_sys_VirtualVolume("wut");
	var _g = 0;
	while(_g < bits.length) {
		var bit = bits[_g];
		++_g;
		var e = tannus_sys_VVEntry.deserialize(bit,vv);
		vv.entries.push(e);
	}
	return vv;
};
tannus_sys_VirtualVolume.error = function(msg) {
	throw new js__$Boot_HaxeError("IOError: " + msg);
};
tannus_sys_VirtualVolume.normal = function(name) {
	{
		var this1 = new tannus_sys_CPath(name).normalize();
		return this1.s;
	}
};
tannus_sys_VirtualVolume.prototype = {
	all: function() {
		return this.entries;
	}
	,getEntry: function(name) {
		name = tannus_sys_VirtualVolume.normal(name);
		var _g = 0;
		var _g1 = this.entries;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if((function($this) {
				var $r;
				var this1 = tannus_sys__$Path_Path_$Impl_$.fromString(f.name);
				$r = this1.s;
				return $r;
			}(this)) == name) return f;
		}
		return null;
	}
	,create: function(name,type) {
		name = tannus_sys_VirtualVolume.normal(name);
		var e = new tannus_sys_VVEntry(this,name,type);
		this.entries.push(e);
		return e;
	}
	,validatePath: function(p) {
		this.name = tannus_sys_VirtualVolume.normal(this.name);
		var _p = p;
		while(true) if(_p.get_root()) break; else {
			_p = _p.get_directory();
			if(!this.exists(_p.s)) throw new js__$Boot_HaxeError("IOError: " + ("No such file or directory \"" + _p.s + "\"!"));
		}
	}
	,exists: function(name) {
		name = tannus_sys_VirtualVolume.normal(name);
		var p = tannus_sys__$Path_Path_$Impl_$.fromString(name);
		return this.getEntry(p.s) != null;
	}
	,isDirectory: function(name) {
		name = tannus_sys_VirtualVolume.normal(name);
		var p = tannus_sys__$Path_Path_$Impl_$.fromString(name);
		var e = this.getEntry(name);
		if(e == null) return false; else if(name == "" || name == "/") return true; else {
			var _g = e.type;
			switch(_g[1]) {
			case 1:
				return true;
			default:
				return false;
			}
		}
	}
	,createDirectory: function(name) {
		name = tannus_sys_VirtualVolume.normal(name);
		this.validatePath(tannus_sys__$Path_Path_$Impl_$.fromString(name));
		this.create(name,tannus_sys_VVType.VVFolder);
	}
	,deleteDirectory: function(name) {
		name = tannus_sys_VirtualVolume.normal(name);
		if(this.isDirectory(name)) {
			var e = this.getEntry(name);
			var subs = e.list();
			if(subs.length == 0) HxOverrides.remove(this.entries,e); else throw new js__$Boot_HaxeError("IOError: " + ("Directory not empty \"" + name + "\"!"));
		}
	}
	,readDirectory: function(name) {
		name = tannus_sys_VirtualVolume.normal(name);
		var p = tannus_sys__$Path_Path_$Impl_$.fromString(name);
		if(name == "" || name == "/") return this.entries.filter(function(e) {
			return tannus_sys__$Path_Path_$Impl_$.fromString(e.name).get_root();
		}).map(function(e1) {
			{
				var this1 = tannus_sys__$Path_Path_$Impl_$.fromString(e1.name).normalize();
				return this1.s;
			}
		}); else if(this.isDirectory(name)) {
			var e2 = this.getEntry(name);
			return e2.list().map(function(e3) {
				return e3.name;
			});
		} else throw new js__$Boot_HaxeError("IOError: " + ("\"" + name + "\" is not a Directory!"));
	}
	,write: function(path,data) {
		path = tannus_sys_VirtualVolume.normal(path);
		this.validatePath(tannus_sys__$Path_Path_$Impl_$.fromString(path));
		var e = this.getEntry(path);
		if(e == null) e = this.create(path,tannus_sys_VVType.VVFile);
		e.write(data);
	}
	,read: function(path) {
		path = tannus_sys_VirtualVolume.normal(path);
		var e = this.getEntry(path);
		if(e != null && e.get_isFile()) return e.read(); else throw new js__$Boot_HaxeError("IOError: " + ("\"" + path + "\" is either a Directory, or does not exist!"));
	}
	,append: function(path,data) {
		path = tannus_sys_VirtualVolume.normal(path);
		var e = this.getEntry(path);
		if(e != null && e.get_isFile()) e.append(data); else throw new js__$Boot_HaxeError("IOError: " + ("\"" + path + "\" cannot be written to!"));
	}
	,deleteFile: function(path) {
		path = tannus_sys_VirtualVolume.normal(path);
		var e = this.getEntry(path);
		if(e != null && e.get_isFile()) HxOverrides.remove(this.entries,e); else throw new js__$Boot_HaxeError("IOError: " + ("Cannot delete \"" + path + "\"!"));
	}
	,rename: function(oldp,newp) {
		oldp = tannus_sys_VirtualVolume.normal(oldp);
		newp = tannus_sys_VirtualVolume.normal(newp);
		if(this.exists(oldp)) {
			this.validatePath(tannus_sys__$Path_Path_$Impl_$.fromString(newp));
			var e = this.getEntry(oldp);
			e.rename(newp);
		} else throw new js__$Boot_HaxeError("IOError: " + ("No such file or directory \"" + oldp + "\"!"));
	}
	,stat: function(path) {
		path = tannus_sys_VirtualVolume.normal(path);
		var e = this.getEntry(path);
		if(e != null) return e.get_stats(); else throw new js__$Boot_HaxeError("IOError: " + ("No such file or directory \"" + path + "\"!"));
	}
	,serialize: function() {
		var bits = [];
		var _g = 0;
		var _g1 = this.entries;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			bits.push(e.serialize());
		}
		haxe_Serializer.USE_CACHE = true;
		haxe_Serializer.USE_ENUM_INDEX = true;
		var data;
		var s = haxe_Serializer.run(bits);
		data = tannus_io_impl_BrowserBinary.ofString(s);
		return data;
	}
	,zip: function() {
		var entry_list = new List();
		var _g = 0;
		var _g1 = this.entries;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.get_isFile()) {
				var zentry = { 'fileTime' : new Date(), 'fileSize' : e.content._length, 'fileName' : (function($this) {
					var $r;
					var this1 = tannus_sys__$Path_Path_$Impl_$.fromString(e.name);
					$r = this1.s;
					return $r;
				}(this)), 'dataSize' : e.content._length, 'data' : e.content.toBytes(), 'compressed' : false, 'extraFields' : null, 'crc32' : null};
				entry_list.push(zentry);
			}
		}
		var out = new haxe_io_BytesOutput();
		var writer = new haxe_zip_Writer(out);
		writer.write(entry_list);
		var zip_data;
		{
			var b = out.getBytes();
			zip_data = tannus_io_impl_BrowserBinary.fromBytes(b);
		}
		return new tannus_io_CBlob("zipfile","application/zip",zip_data);
	}
	,__class__: tannus_sys_VirtualVolume
};
var tannus_sys_gs_Lexer = function() {
	this.reserved = [];
	this.reset();
	this.reserve(tannus_io_impl_BrowserBinary.ofString("*{[,:<"));
};
$hxClasses["tannus.sys.gs.Lexer"] = tannus_sys_gs_Lexer;
tannus_sys_gs_Lexer.__name__ = ["tannus","sys","gs","Lexer"];
tannus_sys_gs_Lexer.prototype = {
	lex: function(s) {
		this.reset();
		this.buffer = new tannus_io_ByteStack(tannus_io_impl_BrowserBinary.ofString(s));
		while(true) {
			var t = this.lexNext();
			if(t == null) break; else this.tree.push(t);
		}
		return this.tree;
	}
	,lexNext: function() {
		if(this.buffer.get_empty()) return null;
		var c = this.buffer.peek();
		if(c == 42) {
			this.advance();
			if(!this.buffer.get_empty() && (function($this) {
				var $r;
				var this1 = $this.buffer.peek();
				$r = this1 == 42;
				return $r;
			}(this))) {
				this.advance();
				return tannus_sys_gs_Token.DoubleStar;
			} else return tannus_sys_gs_Token.Star;
		} else if(c == 44) {
			this.advance();
			return tannus_sys_gs_Token.Comma;
		} else if(c == 123) {
			var betw = this.between((function($this) {
				var $r;
				var n = HxOverrides.cca("{",0);
				var this2;
				if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
				this2 = n;
				$r = this2;
				return $r;
			}(this)),(function($this) {
				var $r;
				var n1 = HxOverrides.cca("}",0);
				var this3;
				if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n1)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n1 + ")!");
				this3 = n1;
				$r = this3;
				return $r;
			}(this)));
			var etree = this.ilex(betw);
			var list = [];
			var ct = [];
			var _g = 0;
			while(_g < etree.length) {
				var tk = etree[_g];
				++_g;
				switch(tk[1]) {
				case 6:
					list.push(ct);
					ct = [];
					break;
				default:
					ct.push(tk);
				}
			}
			list.push(ct);
			return tannus_sys_gs_Token.Expand(list);
		} else if(c == 91) {
			var opt = this.ilex(this.between((function($this) {
				var $r;
				var n2 = HxOverrides.cca("[",0);
				var this4;
				if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n2)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n2 + ")!");
				this4 = n2;
				$r = this4;
				return $r;
			}(this)),(function($this) {
				var $r;
				var n3 = HxOverrides.cca("]",0);
				var this5;
				if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n3)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n3 + ")!");
				this5 = n3;
				$r = this5;
				return $r;
			}(this))));
			return tannus_sys_gs_Token.Optional(opt);
		} else if(c == 58) {
			this.advance();
			return tannus_sys_gs_Token.Colon;
		} else if(c == 60) {
			this.advance();
			var code = "";
			while(!this.buffer.get_empty() && this.buffer.peek() != 62) {
				var this6 = this.advance();
				code += String.fromCharCode(this6);
			}
			this.advance();
			var param = this.ilex(code);
			var name = "";
			var check = tannus_sys_gs_Token.Star;
			var bits = [param.shift(),param.shift(),param.shift()];
			switch(bits.length) {
			case 3:
				switch(bits[0][1]) {
				case 0:
					if(bits[1] == null) {
						if(bits[2] == null) {
							var sname = bits[0][2];
							name = StringTools.trim(sname);
						} else switch(bits[2][1]) {
						default:
							throw new js__$Boot_HaxeError("Unexpected " + Std.string(bits));
						}
					} else switch(bits[1][1]) {
					case 7:
						var tcheck = bits[2];
						var sname1 = bits[0][2];
						if(tcheck != null) {
							name = sname1;
							check = tcheck;
						} else throw new js__$Boot_HaxeError("Unexpected " + Std.string(bits));
						break;
					default:
						throw new js__$Boot_HaxeError("Unexpected " + Std.string(bits));
					}
					break;
				default:
					throw new js__$Boot_HaxeError("Unexpected " + Std.string(bits));
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Unexpected " + Std.string(bits));
			}
			return tannus_sys_gs_Token.Param(name,check);
		} else {
			var txt = String.fromCharCode(c);
			this.advance();
			while(!this.buffer.get_empty() && !Lambda.has(this.reserved,this.buffer.peek())) {
				c = this.advance();
				txt += String.fromCharCode(c);
			}
			return tannus_sys_gs_Token.Literal(txt);
		}
	}
	,ilex: function(s) {
		var current = this.save();
		this.tree = [];
		var res = this.lex(s);
		this.restore(current);
		return res;
	}
	,between: function(start,end,recursive) {
		if(recursive == null) recursive = true;
		var c = this.buffer.peek();
		var str = "";
		if(c == start) {
			this.advance();
			var lvl = 1;
			while(!this.buffer.get_empty() && lvl > 0) {
				c = this.buffer.peek();
				if(c == start && recursive) lvl++; else if(c == end) lvl--;
				if(lvl > 0) str += String.fromCharCode(c);
				this.advance();
			}
		} else throw new js__$Boot_HaxeError("Structure not present!");
		return str;
	}
	,reset: function() {
		this.buffer = new tannus_io_ByteStack((function($this) {
			var $r;
			var this1;
			this1 = tannus_io_impl_BrowserBinary.alloc(0);
			$r = this1;
			return $r;
		}(this)));
		this.tree = [];
	}
	,next: function() {
		return this.buffer.peek();
	}
	,advance: function() {
		return this.buffer.pop();
	}
	,reserve: function(set) {
		this.reserved = this.reserved.concat(set.toArray());
	}
	,save: function() {
		return { 'buffer' : this.buffer.copy(), 'tree' : this.tree};
	}
	,restore: function(s) {
		this.buffer = s.buffer;
		this.tree = s.tree;
	}
	,get_eoi: function() {
		return this.buffer.get_empty();
	}
	,__class__: tannus_sys_gs_Lexer
	,__properties__: {get_eoi:"get_eoi"}
};
var tannus_sys_gs_Printer = function() {
	this.groupCount = 0;
	this.params = new haxe_ds_StringMap();
};
$hxClasses["tannus.sys.gs.Printer"] = tannus_sys_gs_Printer;
tannus_sys_gs_Printer.__name__ = ["tannus","sys","gs","Printer"];
tannus_sys_gs_Printer.compile = function(s,flags) {
	var p = new tannus_sys_gs_Printer();
	var t = new tannus_sys_gs_Lexer().lex(s);
	return { 'regex' : p.pattern(t,flags), 'params' : p.params};
};
tannus_sys_gs_Printer.prototype = {
	pattern: function(tree,flags) {
		if(flags == null) flags = "";
		return new EReg(this.print(tree),flags);
	}
	,print: function(tree) {
		var s = "";
		var _g = 0;
		while(_g < tree.length) {
			var t = tree[_g];
			++_g;
			s += this.printToken(t);
		}
		return s;
	}
	,printToken: function(t,parent) {
		switch(t[1]) {
		case 0:
			var txt = t[2];
			return this.escape(txt);
		case 4:
			this.groupCount++;
			return "([^/]+)";
		case 5:
			this.groupCount++;
			return "(.+)";
		case 3:
			var check = t[3];
			var name = t[2];
			var v = this.groupCount;
			this.params.set(name,v);
			v;
			return this.printToken(check,t);
		case 2:
			var tree = t[2];
			this.groupCount++;
			var sprint = (function(f,a1) {
				return function(t1) {
					return f(t1,a1);
				};
			})($bind(this,this.printToken),t);
			return tannus_ds_StringUtils.wrap(tree.map(sprint).join(""),"(",")") + "?";
		case 1:
			var choices = t[2];
			this.groupCount++;
			var sprint1 = (function(f1,a11) {
				return function(t2) {
					return f1(t2,a11);
				};
			})($bind(this,this.printToken),t);
			var schoices;
			var _g = [];
			var _g1 = 0;
			while(_g1 < choices.length) {
				var c = choices[_g1];
				++_g1;
				_g.push(c.map(sprint1).join(""));
			}
			schoices = _g;
			var canBeEmpty = HxOverrides.remove(schoices,"");
			var res = tannus_ds_StringUtils.wrap(schoices.join("|"),"(",")");
			if(canBeEmpty) res += "?";
			return res;
		default:
			console.log(Std.string(t) + "");
			throw new js__$Boot_HaxeError("SyntaxError: Unexpected " + Std.string(t));
			return "";
		}
	}
	,escape: function(txt) {
		var esc = [".","^","$","+","(",")","?"];
		var _g = 0;
		while(_g < esc.length) {
			var c = esc[_g];
			++_g;
			txt = StringTools.replace(txt,c,"\\" + c);
		}
		return txt;
	}
	,__class__: tannus_sys_gs_Printer
};
var tannus_sys_gs_Token = $hxClasses["tannus.sys.gs.Token"] = { __ename__ : ["tannus","sys","gs","Token"], __constructs__ : ["Literal","Expand","Optional","Param","Star","DoubleStar","Comma","Colon"] };
tannus_sys_gs_Token.Literal = function(txt) { var $x = ["Literal",0,txt]; $x.__enum__ = tannus_sys_gs_Token; $x.toString = $estr; return $x; };
tannus_sys_gs_Token.Expand = function(pieces) { var $x = ["Expand",1,pieces]; $x.__enum__ = tannus_sys_gs_Token; $x.toString = $estr; return $x; };
tannus_sys_gs_Token.Optional = function(sub) { var $x = ["Optional",2,sub]; $x.__enum__ = tannus_sys_gs_Token; $x.toString = $estr; return $x; };
tannus_sys_gs_Token.Param = function(name,check) { var $x = ["Param",3,name,check]; $x.__enum__ = tannus_sys_gs_Token; $x.toString = $estr; return $x; };
tannus_sys_gs_Token.Star = ["Star",4];
tannus_sys_gs_Token.Star.toString = $estr;
tannus_sys_gs_Token.Star.__enum__ = tannus_sys_gs_Token;
tannus_sys_gs_Token.DoubleStar = ["DoubleStar",5];
tannus_sys_gs_Token.DoubleStar.toString = $estr;
tannus_sys_gs_Token.DoubleStar.__enum__ = tannus_sys_gs_Token;
tannus_sys_gs_Token.Comma = ["Comma",6];
tannus_sys_gs_Token.Comma.toString = $estr;
tannus_sys_gs_Token.Comma.__enum__ = tannus_sys_gs_Token;
tannus_sys_gs_Token.Colon = ["Colon",7];
tannus_sys_gs_Token.Colon.toString = $estr;
tannus_sys_gs_Token.Colon.__enum__ = tannus_sys_gs_Token;
var tannus_sys_internal__$FileContent_FileContent_$Impl_$ = {};
$hxClasses["tannus.sys.internal._FileContent.FileContent_Impl_"] = tannus_sys_internal__$FileContent_FileContent_$Impl_$;
tannus_sys_internal__$FileContent_FileContent_$Impl_$.__name__ = ["tannus","sys","internal","_FileContent","FileContent_Impl_"];
tannus_sys_internal__$FileContent_FileContent_$Impl_$.__properties__ = {get_f:"get_f"}
tannus_sys_internal__$FileContent_FileContent_$Impl_$._new = function(f) {
	return f;
};
tannus_sys_internal__$FileContent_FileContent_$Impl_$.get_f = function(this1) {
	return this1.get();
};
tannus_sys_internal__$FileContent_FileContent_$Impl_$.append = function(this1,data) {
	this1.get().append(data);
};
tannus_sys_internal__$FileContent_FileContent_$Impl_$.toByteArray = function(this1) {
	return this1.get().read();
};
tannus_sys_internal__$FileContent_FileContent_$Impl_$.toString = function(this1) {
	{
		var this2 = this1.get().read();
		return this2.toString();
	}
};
var tannus_utils__$Error_Error_$Impl_$ = {};
$hxClasses["tannus.utils._Error.Error_Impl_"] = tannus_utils__$Error_Error_$Impl_$;
tannus_utils__$Error_Error_$Impl_$.__name__ = ["tannus","utils","_Error","Error_Impl_"];
tannus_utils__$Error_Error_$Impl_$._new = function(message) {
	return new tannus_utils_JavaScriptError(message);
};
tannus_utils__$Error_Error_$Impl_$.toString = function(this1) {
	return Std.string(this1);
};
var tannus_xml_Elem = function(type,parent) {
	this.tag = type;
	this.text = "";
	this.attributes = { };
	this.children = [];
	if(parent != null) parent.addChild(this);
};
$hxClasses["tannus.xml.Elem"] = tannus_xml_Elem;
tannus_xml_Elem.__name__ = ["tannus","xml","Elem"];
tannus_xml_Elem.create = function(t) {
	return new tannus_xml_Elem(t);
};
tannus_xml_Elem.fromXml = function(x) {
	var el = new tannus_xml_Elem((function($this) {
		var $r;
		if(x.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + x.nodeType);
		$r = x.nodeName;
		return $r;
	}(this)));
	try {
		el.text = ((function($this) {
			var $r;
			if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + x.nodeType);
			$r = x.children[0];
			return $r;
		}(this))).get_nodeValue();
	} catch( err ) {
		if (err instanceof js__$Boot_HaxeError) err = err.val;
		if( js_Boot.__instanceof(err,String) ) {
		} else throw(err);
	}
	var $it0 = x.attributes();
	while( $it0.hasNext() ) {
		var k = $it0.next();
		el.set(k,x.get(k));
	}
	var $it1 = x.elements();
	while( $it1.hasNext() ) {
		var e = $it1.next();
		el.addChild(tannus_xml_Elem.fromXml(e));
	}
	return el;
};
tannus_xml_Elem.parse = function(code) {
	return tannus_xml_Elem.fromXml(Xml.parse(code).firstChild());
};
tannus_xml_Elem.prototype = {
	addChild: function(child) {
		this.children.push(child);
		child.parent = this;
	}
	,removeChild: function(child) {
		HxOverrides.remove(this.children,child);
	}
	,insertChild: function(child,index) {
		this.children.splice(index,0,child);
	}
	,replaceChild: function(oldChild,newChild) {
		this.children[HxOverrides.indexOf(this.children,oldChild,0)] = newChild;
	}
	,indexOfChild: function(child) {
		var _g1 = 0;
		var _g = this.children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.children[i] == child) return i;
		}
		return -1;
	}
	,index: function() {
		if(this.parent != null) return this.parent.indexOfChild(this); else return -1;
	}
	,replaceWith: function(other) {
		if(this.parent != null) this.parent.replaceChild(this,other);
	}
	,append: function(child) {
		this.addChild(child);
	}
	,prepend: function(child) {
		this.addChild(child);
		HxOverrides.remove(this.children,child);
		this.children.splice(0,0,child);
	}
	,insertBefore: function(what,before) {
		this.addChild(what);
		HxOverrides.remove(this.children,what);
		var pos = this.indexOfChild(before);
		this.children.splice(pos,0,what);
	}
	,insertAfter: function(what,after) {
		this.addChild(what);
		HxOverrides.remove(this.children,what);
		var pos = this.indexOfChild(after) + 1;
		this.children.splice(pos,0,what);
	}
	,after: function(what) {
		if(this.parent != null) this.parent.insertAfter(what,this);
	}
	,before: function(what) {
		if(this.parent != null) this.parent.insertBefore(what,this);
	}
	,hasChild: function(child) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e == child) return true;
		}
		return false;
	}
	,hasDescendendant: function(child) {
		var _g = 0;
		var _g1 = this.descend();
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e == child) return true;
		}
		return false;
	}
	,childOf: function(par) {
		return par.hasChild(this);
	}
	,descendantOf: function(par) {
		return par.hasDescendendant(this);
	}
	,get: function(key) {
		{
			var this1 = Reflect.getProperty(this.attributes,key);
			if(this1 != null) return this1; else return this1;
		}
	}
	,set: function(key,val) {
		var this1 = this.attributes;
		Reflect.setProperty(this1,key,val);
		Reflect.getProperty(this1,key);
		return this.get(key);
	}
	,exists: function(key) {
		return Object.prototype.hasOwnProperty.call(this.attributes,key);
	}
	,attr: function(_batch) {
		var batch = tannus_ds_CObj.create(_batch);
		var _g = 0;
		var _g1 = batch.keys();
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			this.set(key,Std.string(Reflect.getProperty(batch.o,key)));
		}
		return this;
	}
	,walk: function(f) {
		if(this.parent != null) f(this);
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var kid = _g1[_g];
			++_g;
			f(kid);
		}
	}
	,descend: function() {
		var all = [];
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			all.push(c);
			all = all.concat(c.descend());
		}
		return all;
	}
	,query: function(test) {
		var res = [];
		this.walk(function(el) {
			if(test(el)) res.push(el);
		});
		return res;
	}
	,find: function(name) {
		var res = [];
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.tag == name) res.push(e);
		}
		return res;
	}
	,findByName: function(name) {
		return this.query(function(e) {
			return e.tag.toLowerCase() == name.toLowerCase();
		});
	}
	,findByAttribute: function(key,val) {
		return this.query(function(e) {
			return (function($this) {
				var $r;
				var this1 = Reflect.getProperty(e.attributes,key);
				$r = this1 != null?this1:this1;
				return $r;
			}(this)) == val;
		});
	}
	,toXml: function() {
		var xm = Xml.createElement(this.tag);
		if(this.text != "") xm.addChild(Xml.createPCData(this.text));
		var _g = 0;
		var _g1 = Reflect.fields(this.attributes);
		while(_g < _g1.length) {
			var k = _g1[_g];
			++_g;
			xm.set(k,this.get(k));
		}
		var _g2 = 0;
		var _g11 = this.children;
		while(_g2 < _g11.length) {
			var child = _g11[_g2];
			++_g2;
			xm.addChild(child.toXml());
		}
		return xm;
	}
	,print: function(pretty) {
		if(pretty == null) pretty = false;
		return tannus_xml_Printer.print(this,pretty);
	}
	,_pre_print: function() {
		null;
	}
	,__class__: tannus_xml_Elem
};
var tannus_xml_Printer = function() {
	this.buffer = "";
	this.history = new tannus_ds_Stack();
	this.space = "   ";
	this.pretty = false;
};
$hxClasses["tannus.xml.Printer"] = tannus_xml_Printer;
tannus_xml_Printer.__name__ = ["tannus","xml","Printer"];
tannus_xml_Printer.print = function(e,pretty) {
	if(pretty == null) pretty = false;
	var p = new tannus_xml_Printer();
	p.pretty = pretty;
	return p.generate(e);
};
tannus_xml_Printer.prototype = {
	generate: function(e) {
		this.buffer = "";
		this.history = new tannus_ds_Stack();
		this.preprocess(e);
		this.genElem(e);
		return this.buffer;
	}
	,genElem: function(e,indent) {
		if(indent == null) indent = 0;
		var pre = tannus_ds_StringUtils.times(this.space,indent);
		if(this.pretty) indent++;
		var parts;
		var _g = [];
		var _g1 = 0;
		var _g2 = Reflect.fields(e.attributes);
		while(_g1 < _g2.length) {
			var name = _g2[_g1];
			++_g1;
			_g.push(name + "=\"" + Std.string(Reflect.getProperty(e.attributes,name)) + "\"");
		}
		parts = _g;
		var open = "<" + e.tag;
		if(parts.length > 0) {
			open += " ";
			open += parts.join(" ");
		}
		open += ">";
		var close = "</" + e.tag + ">";
		var lines = e.text.split("\n");
		var txt = this.getElemText(e,indent);
		if(e.children.length > 0) {
			this.write(pre + open + txt + "\n");
			var _g11 = 0;
			var _g21 = e.children;
			while(_g11 < _g21.length) {
				var child = _g21[_g11];
				++_g11;
				this.genElem(child,indent);
			}
			this.write(pre + close + "\n");
		} else {
			this.write(pre + open);
			this.write(txt);
			if(lines.length > 1) this.write(pre + close + "\n"); else this.write(close + "\n");
		}
	}
	,preprocess: function(e) {
		e._pre_print();
		var _g = 0;
		var _g1 = e.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			this.preprocess(child);
		}
	}
	,getElemText: function(e,indent) {
		var lines = e.text.split("\n");
		var pre = tannus_ds_StringUtils.times(this.space,indent);
		if(lines.length > 1) {
			var res = "\n";
			var _g = 0;
			while(_g < lines.length) {
				var l = lines[_g];
				++_g;
				res += pre + l + "\n";
			}
			return res;
		} else return e.text;
	}
	,save: function() {
		this.history.add(this.buffer);
	}
	,restore: function() {
		this.buffer = this.history.pop();
	}
	,write: function(s) {
		this.buffer += s;
	}
	,writeln: function(s) {
		this.write(s + "\n");
	}
	,__class__: tannus_xml_Printer
};
var vex_core_BaseElement = function() {
	this.id = tannus_ds_Memory.allocRandomId(6);
};
$hxClasses["vex.core.BaseElement"] = vex_core_BaseElement;
vex_core_BaseElement.__name__ = ["vex","core","BaseElement"];
vex_core_BaseElement.prototype = {
	appendTo: function(parent) {
		null;
	}
	,append: function(child) {
		null;
	}
	,remove: function() {
		null;
	}
	,removeElement: function(child) {
		return true;
	}
	,hasChild: function(child) {
		return true;
	}
	,attr: function(name,value) {
		if(value == null) return this.getAttribute(name); else return this.setAttribute(name,value);
	}
	,getAttribute: function(key) {
		return "";
	}
	,setAttribute: function(name,value) {
		return Std.string(value);
	}
	,removeAttribute: function(name) {
		return false;
	}
	,hasAttribute: function(name) {
		return false;
	}
	,__class__: vex_core_BaseElement
};
var vex_svg_SVGElement = function() {
	vex_core_BaseElement.call(this);
	this._children = [];
	this.o = tannus_ds_CObj.create(this);
	this.style = new vex_svg_SVGStyle(this);
};
$hxClasses["vex.svg.SVGElement"] = vex_svg_SVGElement;
vex_svg_SVGElement.__name__ = ["vex","svg","SVGElement"];
vex_svg_SVGElement.createElement = function(type) {
	return window.document.createElementNS("http://www.w3.org/2000/svg",type);
};
vex_svg_SVGElement.__super__ = vex_core_BaseElement;
vex_svg_SVGElement.prototype = $extend(vex_core_BaseElement.prototype,{
	appendTo: function(parent) {
		parent.appendChild(this.e);
	}
	,append: function(child) {
		if(js_Boot.__instanceof(child,vex_svg_SVGElement)) {
			this.e.appendChild((js_Boot.__cast(child , vex_svg_SVGElement)).e);
			this._children.push(child);
		} else vex_core_BaseElement.prototype.append.call(this,child);
	}
	,removeElement: function(child) {
		if(js_Boot.__instanceof(child,vex_svg_SVGElement)) {
			var had = this.hasChild(child);
			this.e.removeChild(child.e);
			return had;
		} else return vex_core_BaseElement.prototype.removeElement.call(this,child);
	}
	,remove: function() {
		this.e.remove();
	}
	,hasChild: function(child) {
		return Lambda.has(this._children,child);
	}
	,getAttribute: function(name) {
		return this.e.getAttribute(name);
	}
	,setAttribute: function(name,value) {
		this.e.setAttribute(name,Std.string(value));
		return this.getAttribute(name);
	}
	,removeAttribute: function(name) {
		var had = this.e.hasAttribute(name);
		this.e.removeAttribute(name);
		return had;
	}
	,hasAttribute: function(name) {
		return this.e.hasAttribute(name);
	}
	,clone: function() {
		var c = new vex_svg_SVGElement();
		if(this.e != null) {
			c.e = this.e.cloneNode();
			c.style.cloneFrom(this.style);
		}
		return c;
	}
	,toString: function() {
		return this.e.outerHTML;
	}
	,toXml: function() {
		return tannus_xml_Elem.parse(this.toString());
	}
	,print: function(pretty) {
		if(pretty == null) pretty = false;
		var s = "<?xml version=\"1.0\" encoding=\"utf-8\"?>";
		if(pretty) s += "\n";
		s += "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">";
		if(pretty) s += "\n";
		s += this.toXml().print(pretty);
		return s;
	}
	,__class__: vex_svg_SVGElement
});
var vex_core_BaseDocument = function() {
	vex_svg_SVGElement.call(this);
};
$hxClasses["vex.core.BaseDocument"] = vex_core_BaseDocument;
vex_core_BaseDocument.__name__ = ["vex","core","BaseDocument"];
vex_core_BaseDocument.__super__ = vex_svg_SVGElement;
vex_core_BaseDocument.prototype = $extend(vex_svg_SVGElement.prototype,{
	get_x: function() {
		return 0;
	}
	,set_x: function(v) {
		return 0;
	}
	,get_y: function() {
		return 0;
	}
	,set_y: function(v) {
		return 0;
	}
	,get_width: function() {
		return 0;
	}
	,set_width: function(v) {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,set_height: function(v) {
		return 0;
	}
	,__class__: vex_core_BaseDocument
	,__properties__: {set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
});
var vex_svg_SVGDocument = function() {
	vex_core_BaseDocument.call(this);
	this.e = window.document.createElementNS("http://www.w3.org/2000/svg","svg");
	this.attr("xmlns","http://www.w3.org/2000/svg");
	this.attr("xmlns:xlink","http://www.w3.org/1999/xlink");
	this.attr("version","1.1");
};
$hxClasses["vex.svg.SVGDocument"] = vex_svg_SVGDocument;
vex_svg_SVGDocument.__name__ = ["vex","svg","SVGDocument"];
vex_svg_SVGDocument.__super__ = vex_core_BaseDocument;
vex_svg_SVGDocument.prototype = $extend(vex_core_BaseDocument.prototype,{
	get_x: function() {
		if(this.hasAttribute("x")) return Std.parseFloat(this.getAttribute("x")); else return 0;
	}
	,set_x: function(v) {
		return Std.parseFloat(this.setAttribute("x",v));
	}
	,get_y: function() {
		if(this.hasAttribute("y")) return Std.parseFloat(this.getAttribute("y")); else return 0;
	}
	,set_y: function(v) {
		return Std.parseFloat(this.setAttribute("y",v));
	}
	,get_width: function() {
		if(this.hasAttribute("width")) return Std.parseFloat(this.getAttribute("width")); else return 0;
	}
	,set_width: function(v) {
		return Std.parseFloat(this.setAttribute("width",v));
	}
	,get_height: function() {
		if(this.hasAttribute("height")) return Std.parseFloat(this.getAttribute("height")); else return 0;
	}
	,set_height: function(v) {
		return Std.parseFloat(this.setAttribute("height",v));
	}
	,get_viewBox: function() {
		if(this.hasAttribute("viewBox")) {
			var nums = StringTools.replace(this.getAttribute("viewBox"),","," ").split(" ").filter(function(item) {
				return !tannus_ds_StringUtils.empty(StringTools.trim(item));
			}).map(Std.parseFloat);
			return tannus_geom__$Rectangle_Rectangle_$Impl_$.fromArray(nums);
		} else {
			var _x = this.get_x();
			var _y = this.get_y();
			var _width = this.get_width();
			var _height = this.get_height();
			return new tannus_geom_CRectangle(_x,_y,_width,_height);
		}
	}
	,set_viewBox: function(v) {
		this.setAttribute("viewBox",[v.x,v.y,v.width,v.height].map(Std.string).join(","));
		return v.clone();
	}
	,get_svg: function() {
		return this.e;
	}
	,__class__: vex_svg_SVGDocument
	,__properties__: $extend(vex_core_BaseDocument.prototype.__properties__,{get_svg:"get_svg",set_viewBox:"set_viewBox",get_viewBox:"get_viewBox"})
});
var vex_svg_SVGPath = $hx_exports.Path = function() {
	vex_svg_SVGElement.call(this);
	this.e = window.document.createElementNS("http://www.w3.org/2000/svg","path");
};
$hxClasses["vex.svg.SVGPath"] = vex_svg_SVGPath;
vex_svg_SVGPath.__name__ = ["vex","svg","SVGPath"];
vex_svg_SVGPath.__super__ = vex_svg_SVGElement;
vex_svg_SVGPath.prototype = $extend(vex_svg_SVGElement.prototype,{
	edit: function() {
		return new vex_svg_path_Editor(this);
	}
	,clone: function() {
		var c = new vex_svg_SVGPath();
		c.set_commands(this.get_commands());
		c.style.cloneFrom(this.style);
		return c;
	}
	,get_d: function() {
		if(this.hasAttribute("d")) return this.attr("d"); else return "";
	}
	,set_d: function(v) {
		return this.attr("d",v);
	}
	,get_commands: function() {
		return vex_svg_path_Parser.parseString(this.hasAttribute("d")?this.attr("d"):"");
	}
	,set_commands: function(list) {
		this.set_d(vex_svg_path_Printer.print(list));
		return list.slice();
	}
	,__class__: vex_svg_SVGPath
	,__properties__: {set_commands:"set_commands",get_commands:"get_commands",set_d:"set_d",get_d:"get_d"}
});
var vex_svg_SVGStyle = function(element) {
	this.e = element;
	this.jsify();
};
$hxClasses["vex.svg.SVGStyle"] = vex_svg_SVGStyle;
vex_svg_SVGStyle.__name__ = ["vex","svg","SVGStyle"];
vex_svg_SVGStyle.prototype = {
	jsify: function() {
		var _g = this;
		var o = tannus_ds_CObj.create(this);
		o.defineProperty("stroke",new tannus_io__$Pointer_Ref(function() {
			if(_g.e.hasAttribute("stroke")) return _g.e.getAttribute("stroke"); else return null;
		},function(v) {
			return _g.set_stroke(v);
		}));
		o.defineProperty("strokeWidth",new tannus_io__$Pointer_Ref(function() {
			if(_g.e.hasAttribute("stroke-width")) return Std.parseFloat(_g.e.getAttribute("stroke-width")); else return 1;
		},function(v1) {
			return Std.parseFloat(_g.e.attr("stroke-width",v1));
		}));
		o.defineProperty("fill",new tannus_io__$Pointer_Ref(function() {
			if(_g.e.hasAttribute("fill")) return _g.e.getAttribute("fill"); else return null;
		},function(v2) {
			return _g.set_fill(v2);
		}));
	}
	,cloneFrom: function(src) {
		this.set_stroke(src.e.hasAttribute("stroke")?src.e.getAttribute("stroke"):null);
		this.set_strokeWidth(src.e.hasAttribute("stroke-width")?Std.parseFloat(src.e.getAttribute("stroke-width")):1);
		this.set_fill(src.e.hasAttribute("fill")?src.e.getAttribute("fill"):null);
	}
	,get_stroke: function() {
		if(this.e.hasAttribute("stroke")) return this.e.getAttribute("stroke"); else return null;
	}
	,set_stroke: function(v) {
		if(v == null) v = "none";
		return this.e.setAttribute("stroke",v);
	}
	,get_fill: function() {
		if(this.e.hasAttribute("fill")) return this.e.getAttribute("fill"); else return null;
	}
	,set_fill: function(v) {
		if(v == null) v = "none";
		return this.e.setAttribute("fill",v);
	}
	,get_fillOpacity: function() {
		if(this.e.hasAttribute("fill-opacity")) return Std.parseFloat(this.e.attr("fill-opacity")); else return 1;
	}
	,set_fillOpacity: function(v) {
		return Std.parseFloat(this.e.attr("fill-opacity",v));
	}
	,get_strokeWidth: function() {
		if(this.e.hasAttribute("stroke-width")) return Std.parseFloat(this.e.getAttribute("stroke-width")); else return 1;
	}
	,set_strokeWidth: function(v) {
		return Std.parseFloat(this.e.attr("stroke-width",v));
	}
	,get_lineJoin: function() {
		if(this.e.hasAttribute("stroke-linejoin")) return this.e.attr("stroke-linejoin"); else return null;
	}
	,set_lineJoin: function(v) {
		return this.e.attr("stroke-linejoin",v);
	}
	,__class__: vex_svg_SVGStyle
	,__properties__: {set_lineJoin:"set_lineJoin",get_lineJoin:"get_lineJoin",set_strokeWidth:"set_strokeWidth",get_strokeWidth:"get_strokeWidth",set_fillOpacity:"set_fillOpacity",get_fillOpacity:"get_fillOpacity",set_fill:"set_fill",get_fill:"get_fill",set_stroke:"set_stroke",get_stroke:"get_stroke"}
};
var vex_svg_path_Command = $hxClasses["vex.svg.path.Command"] = { __ename__ : ["vex","svg","path","Command"], __constructs__ : ["CMove","CLine","CVertical","CHorizontal","CBezier","CQuadratic","CArc","CClose"] };
vex_svg_path_Command.CMove = function(p,relative) { var $x = ["CMove",0,p,relative]; $x.__enum__ = vex_svg_path_Command; $x.toString = $estr; return $x; };
vex_svg_path_Command.CLine = function(p,relative) { var $x = ["CLine",1,p,relative]; $x.__enum__ = vex_svg_path_Command; $x.toString = $estr; return $x; };
vex_svg_path_Command.CVertical = function(d,relative) { var $x = ["CVertical",2,d,relative]; $x.__enum__ = vex_svg_path_Command; $x.toString = $estr; return $x; };
vex_svg_path_Command.CHorizontal = function(d,relative) { var $x = ["CHorizontal",3,d,relative]; $x.__enum__ = vex_svg_path_Command; $x.toString = $estr; return $x; };
vex_svg_path_Command.CBezier = function(ctrl1,ctrl2,p,relative) { var $x = ["CBezier",4,ctrl1,ctrl2,p,relative]; $x.__enum__ = vex_svg_path_Command; $x.toString = $estr; return $x; };
vex_svg_path_Command.CQuadratic = function(ctrl,p,relative) { var $x = ["CQuadratic",5,ctrl,p,relative]; $x.__enum__ = vex_svg_path_Command; $x.toString = $estr; return $x; };
vex_svg_path_Command.CArc = function(radius,angle,large,sweep,p,relative) { var $x = ["CArc",6,radius,angle,large,sweep,p,relative]; $x.__enum__ = vex_svg_path_Command; $x.toString = $estr; return $x; };
vex_svg_path_Command.CClose = ["CClose",7];
vex_svg_path_Command.CClose.toString = $estr;
vex_svg_path_Command.CClose.__enum__ = vex_svg_path_Command;
var vex_svg_path_Editor = function(p) {
	this.path = p;
	this.commands = this.path.get_commands();
};
$hxClasses["vex.svg.path.Editor"] = vex_svg_path_Editor;
vex_svg_path_Editor.__name__ = ["vex","svg","path","Editor"];
vex_svg_path_Editor.prototype = {
	clear: function() {
		this.commands = [];
	}
	,moveToPoint: function(p) {
		this.cmd(vex_svg_path_Command.CMove(p,false));
	}
	,moveTo: function(x,y) {
		this.moveToPoint(new tannus_geom_TPoint(x,y,0));
	}
	,movePoint: function(p) {
		this.cmd(vex_svg_path_Command.CMove(p,true));
	}
	,move: function(x,y) {
		this.movePoint(new tannus_geom_TPoint(x,y,0));
	}
	,lineToPoint: function(p) {
		this.cmd(vex_svg_path_Command.CLine(p,false));
	}
	,lineTo: function(x,y) {
		this.lineToPoint(new tannus_geom_TPoint(x,y,0));
	}
	,linePoint: function(p) {
		this.cmd(vex_svg_path_Command.CLine(p,true));
	}
	,line: function(x,y) {
		this.linePoint(new tannus_geom_TPoint(x,y,0));
	}
	,vertical: function(to_y) {
		this.cmd(vex_svg_path_Command.CVertical(to_y,false));
	}
	,horizontal: function(to_x) {
		this.cmd(vex_svg_path_Command.CHorizontal(to_x,false));
	}
	,up: function(d) {
		this.cmd(vex_svg_path_Command.CVertical(-d,true));
	}
	,down: function(d) {
		this.cmd(vex_svg_path_Command.CVertical(d,true));
	}
	,right: function(d) {
		this.cmd(vex_svg_path_Command.CHorizontal(d,true));
	}
	,left: function(d) {
		this.right(-d);
	}
	,addBezier: function(b,relative) {
		if(relative == null) relative = false;
		this.cmd(vex_svg_path_Command.CBezier(b.ctrl1,b.ctrl2,b.end,relative));
	}
	,bezier: function(c1x,c1y,c2x,c2y,x,y,relative) {
		if(relative == null) relative = false;
		var b = new tannus_geom_Bezier(new tannus_geom_TPoint(0,0,0),new tannus_geom_TPoint(c1x,c1y,0),new tannus_geom_TPoint(c2x,c2y,0),new tannus_geom_TPoint(x,y,0));
		this.addBezier(b);
	}
	,addEllipticalArc: function(goal,radius,angle,large,sweep,relative) {
		if(relative == null) relative = false;
		if(sweep == null) sweep = false;
		if(large == null) large = false;
		this.cmd(vex_svg_path_Command.CArc(radius,angle,large,sweep,goal,relative));
	}
	,earc: function(tox,toy,radx,rady,angle,large,sweep,relative) {
		if(relative == null) relative = false;
		if(sweep == null) sweep = false;
		if(large == null) large = false;
		this.addEllipticalArc(new tannus_geom_TPoint(tox,toy,0),new tannus_geom_TPoint(radx,rady,0),angle,large,sweep,relative);
	}
	,addArc: function(center,radius,startAngle,endAngle) {
		var x1 = center.get_x() + radius * Math.cos(-(startAngle.v * Math.PI / 180));
		var y1 = center.get_y() + radius * Math.sin(-(startAngle.v * Math.PI / 180));
		var x2 = center.get_x() + radius * Math.cos(-(endAngle.v * Math.PI / 180));
		var y2 = center.get_y() + radius * Math.sin(-(endAngle.v * Math.PI / 180));
		this.moveTo(x1,y1);
		this.earc(x2,y2,radius,radius,endAngle.v,endAngle.v - startAngle.v > 180,false,false);
	}
	,arc: function(cx,cy,r,start,end) {
		this.addArc(new tannus_geom_TPoint(cx,cy,0),r,new tannus_geom_CAngle(start),new tannus_geom_CAngle(end));
	}
	,addWedge: function(center,radius,startAngle,endAngle) {
		var x1 = center.get_x() + radius * Math.cos(-(startAngle.v * Math.PI / 180));
		var y1 = center.get_y() + radius * Math.sin(-(startAngle.v * Math.PI / 180));
		var x2 = center.get_x() + radius * Math.cos(-(endAngle.v * Math.PI / 180));
		var y2 = center.get_y() + radius * Math.sin(-(endAngle.v * Math.PI / 180));
		this.moveToPoint(center);
		this.lineTo(x1,y1);
		this.earc(x2,y2,radius,radius,endAngle.v,endAngle.v - startAngle.v > 180,false,false);
		this.lineToPoint(center);
	}
	,wedge: function(cx,cy,r,start,end) {
		this.addWedge(new tannus_geom_TPoint(cx,cy,0),r,new tannus_geom_CAngle(start),new tannus_geom_CAngle(end));
	}
	,close: function() {
		this.commands.push(vex_svg_path_Command.CClose);
	}
	,save: function() {
		this.path.set_commands(this.commands);
	}
	,undo: function() {
		this.commands.pop();
	}
	,cmd: function(c) {
		this.commands.push(c);
	}
	,__class__: vex_svg_path_Editor
};
var vex_svg_path_Parser = $hx_exports.PathParser = function() {
	this.commands = [];
};
$hxClasses["vex.svg.path.Parser"] = vex_svg_path_Parser;
vex_svg_path_Parser.__name__ = ["vex","svg","path","Parser"];
vex_svg_path_Parser.parseString = function(s) {
	if(s.length == 0) return []; else return new vex_svg_path_Parser().parse(tannus_io_impl_BrowserBinary.ofString(s));
};
vex_svg_path_Parser.__super__ = tannus_io_LexerBase;
vex_svg_path_Parser.prototype = $extend(tannus_io_LexerBase.prototype,{
	parse: function(data) {
		this.buffer = new tannus_io_ByteStack(data);
		this.commands = [];
		while(!(this.buffer != null && this.buffer.get_empty())) this.commands.push(this.parseCommand());
		return this.commands;
	}
	,parseCommand: function() {
		var c = this.buffer.peek(null);
		if(Lambda.has([9,10,11,12,13,32],c)) {
			this.buffer.pop();
			return this.parseCommand();
		} else if(c == 90) {
			this.buffer.pop();
			return vex_svg_path_Command.CClose;
		} else if(c == 77 || c == 109) {
			var rel = c == 109;
			this.buffer.pop();
			var p;
			var x = this.readInt();
			var y = this.readInt();
			p = new tannus_geom_TPoint(x,y,0);
			return vex_svg_path_Command.CMove(p,rel);
		} else if(c == 76 || c == 108) {
			var rel1 = c == 108;
			this.buffer.pop();
			var p1;
			var x1 = this.readInt();
			var y1 = this.readInt();
			p1 = new tannus_geom_TPoint(x1,y1,0);
			return vex_svg_path_Command.CLine(p1,rel1);
		} else if(c == 86 || c == 118) {
			var rel2 = c == 118;
			this.buffer.pop();
			return vex_svg_path_Command.CVertical(this.readInt(),rel2);
		} else if(c == 72 || c == 104) {
			var rel3 = c == 104;
			this.buffer.pop();
			return vex_svg_path_Command.CHorizontal(this.readInt(),rel3);
		} else if(c == 67 || c == 99) {
			var rel4 = c == 99;
			this.buffer.pop();
			var ctrl1 = this.readPoint();
			var ctrl2 = this.readPoint();
			var p2 = this.readPoint();
			return vex_svg_path_Command.CBezier(ctrl1,ctrl2,p2,rel4);
		} else if(c == 81 || c == 113) {
			var rel5 = c == 113;
			this.buffer.pop();
			var ctrl = this.readPoint();
			var p3 = this.readPoint();
			return vex_svg_path_Command.CQuadratic(ctrl,p3,rel5);
		} else if(c == 65 || c == 97) {
			var rel6 = c == 97;
			this.buffer.pop();
			var radius = this.readPoint();
			var angle = this.readFloat();
			var large = this.readInt() == 1;
			var sweep = this.readInt() == 1;
			var p4 = this.readPoint();
			return vex_svg_path_Command.CArc(radius,angle,large,sweep,p4,rel6);
		} else {
			this.buffer.pop();
			return this.parseCommand();
		}
	}
	,readInt: function() {
		var s = "";
		while(!(this.buffer != null && this.buffer.get_empty()) && !(function($this) {
			var $r;
			var this1 = $this.buffer.peek(null);
			$r = this1 >= 48 && this1 <= 57;
			return $r;
		}(this))) this.buffer.pop();
		while(!(this.buffer != null && this.buffer.get_empty()) && (function($this) {
			var $r;
			var this2 = $this.buffer.peek(null);
			$r = this2 >= 48 && this2 <= 57;
			return $r;
		}(this))) {
			var this3 = this.buffer.pop();
			s += String.fromCharCode(this3);
		}
		return Std.parseInt(s);
	}
	,readFloat: function() {
		var s = "";
		while(!(this.buffer != null && this.buffer.get_empty()) && !(function($this) {
			var $r;
			var this1 = $this.buffer.peek(null);
			$r = this1 >= 48 && this1 <= 57;
			return $r;
		}(this))) this.buffer.pop();
		while(!(this.buffer != null && this.buffer.get_empty()) && ((function($this) {
			var $r;
			var this2 = $this.buffer.peek(null);
			$r = this2 >= 48 && this2 <= 57;
			return $r;
		}(this)) || (function($this) {
			var $r;
			var this3 = $this.buffer.peek(null);
			$r = this3 == 46;
			return $r;
		}(this)))) {
			var this4 = this.buffer.pop();
			s += String.fromCharCode(this4);
		}
		console.log(s);
		return parseFloat(s);
	}
	,readPoint: function() {
		var x = this.readFloat();
		var y = this.readFloat();
		return new tannus_geom_TPoint(x,y,0);
	}
	,readBool: function() {
		return this.readInt() == 1;
	}
	,__class__: vex_svg_path_Parser
});
var vex_svg_path_Printer = function() {
	null;
};
$hxClasses["vex.svg.path.Printer"] = vex_svg_path_Printer;
vex_svg_path_Printer.__name__ = ["vex","svg","path","Printer"];
vex_svg_path_Printer.print = function(list) {
	return new vex_svg_path_Printer().printCommands(list);
};
vex_svg_path_Printer.prototype = {
	printCommands: function(list) {
		var this1;
		this1 = tannus_io_impl_BrowserBinary.alloc(0);
		this.buffer = this1;
		this.commands = list;
		var _g = 0;
		var _g1 = this.commands;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			this.printCommand(c);
		}
		return this.buffer.toString();
	}
	,printCommand: function(c) {
		switch(c[1]) {
		case 0:
			var rel = c[3];
			var pos = c[2];
			this.tag("M",rel);
			this["float"](pos.get_x());
			this.buffer.appendString(" ");
			this["float"](pos.get_y());
			break;
		case 1:
			var rel1 = c[3];
			var pos1 = c[2];
			this.tag("L",rel1);
			this["float"](pos1.get_x());
			this.buffer.appendString(" ");
			this["float"](pos1.get_y());
			break;
		case 2:
			var rel2 = c[3];
			var d = c[2];
			this.tag("V",rel2);
			this.buffer.appendString(d + "");
			break;
		case 3:
			var rel3 = c[3];
			var d1 = c[2];
			this.tag("H",rel3);
			this.buffer.appendString(d1 + "");
			break;
		case 4:
			var rel4 = c[5];
			var pos2 = c[4];
			var two = c[3];
			var one = c[2];
			this.tag("C",rel4);
			this.points([one,two,pos2]);
			break;
		case 5:
			var rel5 = c[4];
			var pos3 = c[3];
			var ctrl = c[2];
			this.tag("Q",rel5);
			this.points([ctrl,pos3]);
			break;
		case 6:
			var rel6 = c[7];
			var pos4 = c[6];
			var sweep = c[5];
			var large = c[4];
			var angle = c[3];
			var radius = c[2];
			this.tag("A",rel6);
			this["float"](radius.get_x());
			this.buffer.appendString(" ");
			this["float"](radius.get_y());
			this.buffer.appendString(" ");
			this.buffer.appendString(angle + "");
			this.buffer.appendString(" ");
			this.buffer.appendString(large?"1":"0");
			this.buffer.appendString(" ");
			this.buffer.appendString(sweep?"1":"0");
			this.buffer.appendString(" ");
			this["float"](pos4.get_x());
			this.buffer.appendString(" ");
			this["float"](pos4.get_y());
			break;
		case 7:
			this.buffer.appendString("Z");
			break;
		}
	}
	,tag: function(s,lower) {
		if(lower) s = s.toLowerCase();
		this.buffer.appendString(s);
	}
	,points: function(list) {
		var last = list.pop();
		var _g = 0;
		while(_g < list.length) {
			var p = list[_g];
			++_g;
			this["float"](p.get_x());
			this.buffer.appendString(" ");
			this["float"](p.get_y());
			this.buffer.appendString(" ");
		}
		this["float"](last.get_x());
		this.buffer.appendString(" ");
		this["float"](last.get_y());
	}
	,point: function(p) {
		this["float"](p.get_x());
		this.buffer.appendString(" ");
		this["float"](p.get_y());
	}
	,'float': function(n) {
		this.buffer.appendString(n + "");
	}
	,bool: function(v) {
		this.buffer.appendString(v?"1":"0");
	}
	,w: function(s) {
		this.buffer.appendString(s);
	}
	,__class__: vex_svg_path_Printer
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
if(Array.prototype.indexOf) HxOverrides.indexOf = function(a,o,i) {
	return Array.prototype.indexOf.call(a,o,i);
};
$hxClasses.Math = Math;
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = ["String"];
$hxClasses.Array = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
if(Array.prototype.map == null) Array.prototype.map = function(f) {
	var a = [];
	var _g1 = 0;
	var _g = this.length;
	while(_g1 < _g) {
		var i = _g1++;
		a[i] = f(this[i]);
	}
	return a;
};
if(Array.prototype.filter == null) Array.prototype.filter = function(f1) {
	var a1 = [];
	var _g11 = 0;
	var _g2 = this.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		var e = this[i1];
		if(f1(e)) a1.push(e);
	}
	return a1;
};
var __map_reserved = {}
var q = window.jQuery;
var js = js || {}
js.JQuery = q;
var ArrayBuffer = typeof(window) != "undefined" && window.ArrayBuffer || typeof(global) != "undefined" && global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
var DataView = typeof(window) != "undefined" && window.DataView || typeof(global) != "undefined" && global.DataView || js_html_compat_DataView;
var Uint8Array = typeof(window) != "undefined" && window.Uint8Array || typeof(global) != "undefined" && global.Uint8Array || js_html_compat_Uint8Array._new;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
bp_ds_PlayerState.__meta__ = { fields : { sources : { promise : null}, test : { promise : null}, lpl : { async : null}}};
gryffin_display_Video.FPS = 30;
foundation_Widget.DATAKEY = "__hfWidget__";
bp_ui_JumpToTimeBox.history = new tannus_ds_History();
bp_ui_KeyBindingsView.bindings = [{ key : "Q", name : "Exit"},{ key : "Space", name : "Play / Pause"},{ key : "Ctrl + O", name : "Open File(s)"},{ key : "Ctrl + Shift + O", name : "Open Directory"},{ key : "B", name : "Create Bookmark"},{ key : "E", name : "Next Frame"},{ key : "N", name : "Next Track"},{ key : "P", name : "Previous Track"},{ key : "R, R", name : "Random Track"},{ key : "D", name : "Volume up"},{ key : "S", name : "Volume down"},{ key : "M", name : "Mute / Unmute"},{ key : "f", name : "Show Playlist"},{ key : "Ctrl + F or F11", name : "Toggle Fullscreen"},{ key : "Ctrl + L", name : "Clear Playlist"},{ key : "X", name : "Remove current track from playlist"},{ key : "Shift + 8", name : "Favorite / Unfavorite current track"},{ key : "Shift + G", name : "Assign custom starting time for current Track"},{ key : "G, G", name : "Jump to the 'start' of the Track"},{ key : "]", name : "Increase speed (5%)"},{ key : "[", name : "Decrease speed (5%)"},{ key : "Shift + ]", name : "Increase speed (20%)"},{ key : "Shift + [", name : "Decrease speed (20%)"},{ key : "=", name : "Reset speed to 100%"},{ key : "Right", name : "Jump forward 2sec"},{ key : "Left", name : "Jump backward 2sec"},{ key : "Shift + Left", name : "Jump backward 10sec"},{ key : "Shift + Right", name : "Jump forward 10sec"},{ key : "Alt + Left", name : "Jump backward 60sec"},{ key : "Alt + Left", name : "Jump forward 60sec"}];
bp_ui_SelectRect.MODE_DRAG = 0;
chrome_Runtime.rt = chrome.runtime;
chrome_Windows.lib = chrome.app.window;
foundation_Foundation.mqBreakpoints = ["small","medium","large","xlarge","xxlarge"];
foundation__$Label_LabelPos_$Impl_$.Before = "before";
foundation__$Label_LabelPos_$Impl_$.After = "after";
gryffin_Tools.used_idents = [];
gryffin_core_Stage.selectorCache = new haxe_ds_StringMap();
gryffin_display_Image.registry = new haxe_ds_StringMap();
gryffin_fx_Animations.registry = [];
gryffin_ui_ContextMenuItem.__meta__ = { fields : { click : { on : ["click"]}}};
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = Type;
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ds_ObjectMap.count = 0;
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var x = new haxe__$Int64__$_$_$Int64(0,0);
	$r = x;
	return $r;
}(this));
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved.lt != null) h.setReserved("lt","<"); else h.h["lt"] = "<";
	if(__map_reserved.gt != null) h.setReserved("gt",">"); else h.h["gt"] = ">";
	if(__map_reserved.amp != null) h.setReserved("amp","&"); else h.h["amp"] = "&";
	if(__map_reserved.quot != null) h.setReserved("quot","\""); else h.h["quot"] = "\"";
	if(__map_reserved.apos != null) h.setReserved("apos","'"); else h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
js_Boot.__toStr = {}.toString;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
tannus_chrome__$Notifications_PermissionLevel_$Impl_$.Granted = "granted";
tannus_chrome__$Notifications_PermissionLevel_$Impl_$.Denied = "denied";
tannus_css_vals__$Unit_Unit_$Impl_$.Em = "em";
tannus_css_vals__$Unit_Unit_$Impl_$.Ex = "ex";
tannus_css_vals__$Unit_Unit_$Impl_$.Ch = "ch";
tannus_css_vals__$Unit_Unit_$Impl_$.Rem = "rem";
tannus_css_vals__$Unit_Unit_$Impl_$.Vpw = "vw";
tannus_css_vals__$Unit_Unit_$Impl_$.Vph = "vh";
tannus_css_vals__$Unit_Unit_$Impl_$.Perc = "%";
tannus_css_vals__$Unit_Unit_$Impl_$.Cm = "cm";
tannus_css_vals__$Unit_Unit_$Impl_$.Mm = "mm";
tannus_css_vals__$Unit_Unit_$Impl_$.In = "in";
tannus_css_vals__$Unit_Unit_$Impl_$.Px = "px";
tannus_css_vals__$Unit_Unit_$Impl_$.Pt = "pt";
tannus_css_vals__$Unit_Unit_$Impl_$.Pc = "pc";
tannus_dom_CData.DATAKEY = "__tandata";
tannus_dom_CElement.DATAKEY = "__tandata";
tannus_ds_Memory.state = 0;
tannus_ds_Memory.used = [];
tannus_events__$Key_Key_$Impl_$.CapsLock = 20;
tannus_events__$Key_Key_$Impl_$.NumpadDot = 110;
tannus_events__$Key_Key_$Impl_$.NumpadForwardSlash = 111;
tannus_events__$Key_Key_$Impl_$.Command = 91;
tannus_events__$Key_Key_$Impl_$.ForwardSlash = 191;
tannus_events__$Key_Key_$Impl_$.Enter = 13;
tannus_events__$Key_Key_$Impl_$.Shift = 16;
tannus_events__$Key_Key_$Impl_$.Space = 32;
tannus_events__$Key_Key_$Impl_$.PageUp = 33;
tannus_events__$Key_Key_$Impl_$.Backspace = 8;
tannus_events__$Key_Key_$Impl_$.Tab = 9;
tannus_events__$Key_Key_$Impl_$.NumpadPlus = 107;
tannus_events__$Key_Key_$Impl_$.Dot = 190;
tannus_events__$Key_Key_$Impl_$.OpenBracket = 219;
tannus_events__$Key_Key_$Impl_$.Home = 36;
tannus_events__$Key_Key_$Impl_$.Left = 37;
tannus_events__$Key_Key_$Impl_$.Equals = 187;
tannus_events__$Key_Key_$Impl_$.Apostrophe = 222;
tannus_events__$Key_Key_$Impl_$.Right = 39;
tannus_events__$Key_Key_$Impl_$.CloseBracket = 221;
tannus_events__$Key_Key_$Impl_$.NumLock = 144;
tannus_events__$Key_Key_$Impl_$.BackSlash = 220;
tannus_events__$Key_Key_$Impl_$.PageDown = 34;
tannus_events__$Key_Key_$Impl_$.End = 35;
tannus_events__$Key_Key_$Impl_$.Minus = 189;
tannus_events__$Key_Key_$Impl_$.SemiColon = 186;
tannus_events__$Key_Key_$Impl_$.Down = 40;
tannus_events__$Key_Key_$Impl_$.Esc = 27;
tannus_events__$Key_Key_$Impl_$.Comma = 188;
tannus_events__$Key_Key_$Impl_$.Delete = 46;
tannus_events__$Key_Key_$Impl_$.NumpadAsterisk = 106;
tannus_events__$Key_Key_$Impl_$.BackTick = 192;
tannus_events__$Key_Key_$Impl_$.Ctrl = 17;
tannus_events__$Key_Key_$Impl_$.Insert = 45;
tannus_events__$Key_Key_$Impl_$.ScrollLock = 145;
tannus_events__$Key_Key_$Impl_$.NumpadMinus = 109;
tannus_events__$Key_Key_$Impl_$.Up = 38;
tannus_events__$Key_Key_$Impl_$.Alt = 18;
tannus_events__$Key_Key_$Impl_$.LetterA = 65;
tannus_events__$Key_Key_$Impl_$.LetterB = 66;
tannus_events__$Key_Key_$Impl_$.LetterC = 67;
tannus_events__$Key_Key_$Impl_$.LetterD = 68;
tannus_events__$Key_Key_$Impl_$.LetterE = 69;
tannus_events__$Key_Key_$Impl_$.LetterF = 70;
tannus_events__$Key_Key_$Impl_$.LetterG = 71;
tannus_events__$Key_Key_$Impl_$.LetterH = 72;
tannus_events__$Key_Key_$Impl_$.LetterI = 73;
tannus_events__$Key_Key_$Impl_$.LetterJ = 74;
tannus_events__$Key_Key_$Impl_$.LetterK = 75;
tannus_events__$Key_Key_$Impl_$.LetterL = 76;
tannus_events__$Key_Key_$Impl_$.LetterM = 77;
tannus_events__$Key_Key_$Impl_$.LetterN = 78;
tannus_events__$Key_Key_$Impl_$.LetterO = 79;
tannus_events__$Key_Key_$Impl_$.LetterP = 80;
tannus_events__$Key_Key_$Impl_$.LetterQ = 81;
tannus_events__$Key_Key_$Impl_$.LetterR = 82;
tannus_events__$Key_Key_$Impl_$.LetterS = 83;
tannus_events__$Key_Key_$Impl_$.LetterT = 84;
tannus_events__$Key_Key_$Impl_$.LetterU = 85;
tannus_events__$Key_Key_$Impl_$.LetterV = 86;
tannus_events__$Key_Key_$Impl_$.LetterW = 87;
tannus_events__$Key_Key_$Impl_$.LetterX = 88;
tannus_events__$Key_Key_$Impl_$.LetterY = 89;
tannus_events__$Key_Key_$Impl_$.LetterZ = 90;
tannus_events__$Key_Key_$Impl_$.F1 = 112;
tannus_events__$Key_Key_$Impl_$.F2 = 113;
tannus_events__$Key_Key_$Impl_$.F3 = 114;
tannus_events__$Key_Key_$Impl_$.F4 = 115;
tannus_events__$Key_Key_$Impl_$.F5 = 116;
tannus_events__$Key_Key_$Impl_$.F6 = 117;
tannus_events__$Key_Key_$Impl_$.F7 = 118;
tannus_events__$Key_Key_$Impl_$.F8 = 119;
tannus_events__$Key_Key_$Impl_$.F9 = 120;
tannus_events__$Key_Key_$Impl_$.F10 = 121;
tannus_events__$Key_Key_$Impl_$.F11 = 122;
tannus_events__$Key_Key_$Impl_$.F12 = 123;
tannus_events__$Key_Key_$Impl_$.Number0 = 48;
tannus_events__$Key_Key_$Impl_$.Number1 = 49;
tannus_events__$Key_Key_$Impl_$.Number2 = 50;
tannus_events__$Key_Key_$Impl_$.Number3 = 51;
tannus_events__$Key_Key_$Impl_$.Number4 = 52;
tannus_events__$Key_Key_$Impl_$.Number5 = 53;
tannus_events__$Key_Key_$Impl_$.Number6 = 54;
tannus_events__$Key_Key_$Impl_$.Number7 = 55;
tannus_events__$Key_Key_$Impl_$.Number8 = 56;
tannus_events__$Key_Key_$Impl_$.Number9 = 57;
tannus_geom_Bezier.PRECISION = 100;
tannus_geom_Matrix.__identity = new tannus_geom_Matrix();
tannus_math_TMath.E = 2.718281828459045;
tannus_math_TMath.LN2 = 0.6931471805599453;
tannus_math_TMath.LN10 = 2.302585092994046;
tannus_math_TMath.LOG2E = 1.4426950408889634;
tannus_math_TMath.LOG10E = 0.43429448190325176;
tannus_math_TMath.PI = 3.141592653589793;
tannus_math_TMath.SQRT1_2 = 0.7071067811865476;
tannus_math_TMath.SQRT2 = 1.4142135623730951;
tannus_math_TMath.KAPPA = 4 * (Math.sqrt(2) - 1) / 3;
tannus_math_TMath.INT_MIN = -2147483648;
tannus_math_TMath.INT_MAX = 2147483647;
tannus_math_TMath.FLOAT_MIN = -1.79769313486231e+308;
tannus_math_TMath.FLOAT_MAX = 1.79769313486231e+308;
tannus_mvc_BaseAttribute.N = "Not implemented";
tannus_sys_Mimes.initted = false;
tannus_sys_Mimes.primitive = { '3dml' : "text/vnd.in3d.3dml", '3ds' : "image/x-3ds", '3g2' : "video/3gpp2", '3gp' : "video/3gpp", '7z' : "application/x-7z-compressed", 'aab' : "application/x-authorware-bin", 'aac' : "audio/x-aac", 'aam' : "application/x-authorware-map", 'aas' : "application/x-authorware-seg", 'abw' : "application/x-abiword", 'ac' : "application/pkix-attr-cert", 'acc' : "application/vnd.americandynamics.acc", 'ace' : "application/x-ace-compressed", 'acu' : "application/vnd.acucobol", 'acutc' : "application/vnd.acucorp", 'adp' : "audio/adpcm", 'aep' : "application/vnd.audiograph", 'afm' : "application/x-font-type1", 'afp' : "application/vnd.ibm.modcap", 'ahead' : "application/vnd.ahead.space", 'ai' : "application/postscript", 'aif' : "audio/x-aiff", 'aifc' : "audio/x-aiff", 'aiff' : "audio/x-aiff", 'air' : "application/vnd.adobe.air-application-installer-package+zip", 'ait' : "application/vnd.dvb.ait", 'ami' : "application/vnd.amiga.ami", 'apk' : "application/vnd.android.package-archive", 'appcache' : "text/cache-manifest", 'application' : "application/x-ms-application", 'apr' : "application/vnd.lotus-approach", 'arc' : "application/x-freearc", 'asa' : "text/plain", 'asax' : "application/octet-stream", 'asc' : "application/pgp-signature", 'ascx' : "text/plain", 'asf' : "video/x-ms-asf", 'ashx' : "text/plain", 'asm' : "text/x-asm", 'asmx' : "text/plain", 'aso' : "application/vnd.accpac.simply.aso", 'asp' : "text/plain", 'aspx' : "text/plain", 'asx' : "video/x-ms-asf", 'atc' : "application/vnd.acucorp", 'atom' : "application/atom+xml", 'atomcat' : "application/atomcat+xml", 'atomsvc' : "application/atomsvc+xml", 'atx' : "application/vnd.antix.game-component", 'au' : "audio/basic", 'avi' : "video/x-msvideo", 'aw' : "application/applixware", 'axd' : "text/plain", 'azf' : "application/vnd.airzip.filesecure.azf", 'azs' : "application/vnd.airzip.filesecure.azs", 'azw' : "application/vnd.amazon.ebook", 'bat' : "application/x-msdownload", 'bcpio' : "application/x-bcpio", 'bdf' : "application/x-font-bdf", 'bdm' : "application/vnd.syncml.dm+wbxml", 'bed' : "application/vnd.realvnc.bed", 'bh2' : "application/vnd.fujitsu.oasysprs", 'bin' : "application/octet-stream", 'blb' : "application/x-blorb", 'blorb' : "application/x-blorb", 'bmi' : "application/vnd.bmi", 'bmp' : "image/bmp", 'book' : "application/vnd.framemaker", 'box' : "application/vnd.previewsystems.box", 'boz' : "application/x-bzip2", 'bpk' : "application/octet-stream", 'btif' : "image/prs.btif", 'bz' : "application/x-bzip", 'bz2' : "application/x-bzip2", 'c' : "text/x-c", 'c11amc' : "application/vnd.cluetrust.cartomobile-config", 'c11amz' : "application/vnd.cluetrust.cartomobile-config-pkg", 'c4d' : "application/vnd.clonk.c4group", 'c4f' : "application/vnd.clonk.c4group", 'c4g' : "application/vnd.clonk.c4group", 'c4p' : "application/vnd.clonk.c4group", 'c4u' : "application/vnd.clonk.c4group", 'cab' : "application/vnd.ms-cab-compressed", 'caf' : "audio/x-caf", 'cap' : "application/vnd.tcpdump.pcap", 'car' : "application/vnd.curl.car", 'cat' : "application/vnd.ms-pki.seccat", 'cb7' : "application/x-cbr", 'cba' : "application/x-cbr", 'cbr' : "application/x-cbr", 'cbt' : "application/x-cbr", 'cbz' : "application/x-cbr", 'cc' : "text/x-c", 'cct' : "application/x-director", 'ccxml' : "application/ccxml+xml", 'cdbcmsg' : "application/vnd.contact.cmsg", 'cdf' : "application/x-netcdf", 'cdkey' : "application/vnd.mediastation.cdkey", 'cdmia' : "application/cdmi-capability", 'cdmic' : "application/cdmi-container", 'cdmid' : "application/cdmi-domain", 'cdmio' : "application/cdmi-object", 'cdmiq' : "application/cdmi-queue", 'cdx' : "chemical/x-cdx", 'cdxml' : "application/vnd.chemdraw+xml", 'cdy' : "application/vnd.cinderella", 'cer' : "application/pkix-cert", 'cfc' : "application/x-coldfusion", 'cfm' : "application/x-coldfusion", 'cfs' : "application/x-cfs-compressed", 'cgm' : "image/cgm", 'chat' : "application/x-chat", 'chm' : "application/vnd.ms-htmlhelp", 'chrt' : "application/vnd.kde.kchart", 'cif' : "chemical/x-cif", 'cii' : "application/vnd.anser-web-certificate-issue-initiation", 'cil' : "application/vnd.ms-artgalry", 'cla' : "application/vnd.claymore", 'class' : "application/java-vm", 'clkk' : "application/vnd.crick.clicker.keyboard", 'clkp' : "application/vnd.crick.clicker.palette", 'clkt' : "application/vnd.crick.clicker.template", 'clkw' : "application/vnd.crick.clicker.wordbank", 'clkx' : "application/vnd.crick.clicker", 'clp' : "application/x-msclip", 'cmc' : "application/vnd.cosmocaller", 'cmdf' : "chemical/x-cmdf", 'cml' : "chemical/x-cml", 'cmp' : "application/vnd.yellowriver-custom-menu", 'cmx' : "image/x-cmx", 'cod' : "application/vnd.rim.cod", 'coffee' : "text/coffeescript", 'com' : "application/x-msdownload", 'conf' : "text/plain", 'cpio' : "application/x-cpio", 'cpp' : "text/x-c", 'cpt' : "application/mac-compactpro", 'crd' : "application/x-mscardfile", 'crl' : "application/pkix-crl", 'crt' : "application/x-x509-ca-cert", 'crx' : "application/octet-stream", 'cryptonote' : "application/vnd.rig.cryptonote", 'cs' : "text/plain", 'csh' : "application/x-csh", 'csml' : "chemical/x-csml", 'csp' : "application/vnd.commonspace", 'css' : "text/css", 'cst' : "application/x-director", 'csv' : "text/csv", 'cu' : "application/cu-seeme", 'curl' : "text/vnd.curl", 'cww' : "application/prs.cww", 'cxt' : "application/x-director", 'cxx' : "text/x-c", 'dae' : "model/vnd.collada+xml", 'daf' : "application/vnd.mobius.daf", 'dart' : "application/vnd.dart", 'dataless' : "application/vnd.fdsn.seed", 'davmount' : "application/davmount+xml", 'dbk' : "application/docbook+xml", 'dcr' : "application/x-director", 'dcurl' : "text/vnd.curl.dcurl", 'dd2' : "application/vnd.oma.dd2+xml", 'ddd' : "application/vnd.fujixerox.ddd", 'deb' : "application/x-debian-package", 'def' : "text/plain", 'deploy' : "application/octet-stream", 'der' : "application/x-x509-ca-cert", 'dfac' : "application/vnd.dreamfactory", 'dgc' : "application/x-dgc-compressed", 'dic' : "text/x-c", 'dir' : "application/x-director", 'dis' : "application/vnd.mobius.dis", 'dist' : "application/octet-stream", 'distz' : "application/octet-stream", 'djv' : "image/vnd.djvu", 'djvu' : "image/vnd.djvu", 'dll' : "application/x-msdownload", 'dmg' : "application/x-apple-diskimage", 'dmp' : "application/vnd.tcpdump.pcap", 'dms' : "application/octet-stream", 'dna' : "application/vnd.dna", 'doc' : "application/msword", 'docm' : "application/vnd.ms-word.document.macroenabled.12", 'docx' : "application/vnd.openxmlformats-officedocument.wordprocessingml.document", 'dot' : "application/msword", 'dotm' : "application/vnd.ms-word.template.macroenabled.12", 'dotx' : "application/vnd.openxmlformats-officedocument.wordprocessingml.template", 'dp' : "application/vnd.osgi.dp", 'dpg' : "application/vnd.dpgraph", 'dra' : "audio/vnd.dra", 'dsc' : "text/prs.lines.tag", 'dssc' : "application/dssc+der", 'dtb' : "application/x-dtbook+xml", 'dtd' : "application/xml-dtd", 'dts' : "audio/vnd.dts", 'dtshd' : "audio/vnd.dts.hd", 'dump' : "application/octet-stream", 'dvb' : "video/vnd.dvb.file", 'dvi' : "application/x-dvi", 'dwf' : "model/vnd.dwf", 'dwg' : "image/vnd.dwg", 'dxf' : "image/vnd.dxf", 'dxp' : "application/vnd.spotfire.dxp", 'dxr' : "application/x-director", 'ecelp4800' : "audio/vnd.nuera.ecelp4800", 'ecelp7470' : "audio/vnd.nuera.ecelp7470", 'ecelp9600' : "audio/vnd.nuera.ecelp9600", 'ecma' : "application/ecmascript", 'edm' : "application/vnd.novadigm.edm", 'edx' : "application/vnd.novadigm.edx", 'efif' : "application/vnd.picsel", 'ei6' : "application/vnd.pg.osasli", 'elc' : "application/octet-stream", 'emf' : "application/x-msmetafile", 'eml' : "message/rfc822", 'emma' : "application/emma+xml", 'emz' : "application/x-msmetafile", 'eol' : "audio/vnd.digital-winds", 'eot' : "application/vnd.ms-fontobject", 'eps' : "application/postscript", 'epub' : "application/epub+zip", 'es3' : "application/vnd.eszigno3+xml", 'esa' : "application/vnd.osgi.subsystem", 'esf' : "application/vnd.epson.esf", 'et3' : "application/vnd.eszigno3+xml", 'etx' : "text/x-setext", 'eva' : "application/x-eva", 'evy' : "application/x-envoy", 'exe' : "application/x-msdownload", 'exi' : "application/exi", 'ext' : "application/vnd.novadigm.ext", 'ez' : "application/andrew-inset", 'ez2' : "application/vnd.ezpix-album", 'ez3' : "application/vnd.ezpix-package", 'f' : "text/x-fortran", 'f4v' : "video/x-f4v", 'f77' : "text/x-fortran", 'f90' : "text/x-fortran", 'fbs' : "image/vnd.fastbidsheet", 'fcdt' : "application/vnd.adobe.formscentral.fcdt", 'fcs' : "application/vnd.isac.fcs", 'fdf' : "application/vnd.fdf", 'fe_launch' : "application/vnd.denovo.fcselayout-link", 'fg5' : "application/vnd.fujitsu.oasysgp", 'fgd' : "application/x-director", 'fh' : "image/x-freehand", 'fh4' : "image/x-freehand", 'fh5' : "image/x-freehand", 'fh7' : "image/x-freehand", 'fhc' : "image/x-freehand", 'fig' : "application/x-xfig", 'flac' : "audio/x-flac", 'fli' : "video/x-fli", 'flo' : "application/vnd.micrografx.flo", 'flv' : "video/x-flv", 'flw' : "application/vnd.kde.kivio", 'flx' : "text/vnd.fmi.flexstor", 'fly' : "text/vnd.fly", 'fm' : "application/vnd.framemaker", 'fnc' : "application/vnd.frogans.fnc", 'for' : "text/x-fortran", 'fpx' : "image/vnd.fpx", 'frame' : "application/vnd.framemaker", 'fsc' : "application/vnd.fsc.weblaunch", 'fst' : "image/vnd.fst", 'ftc' : "application/vnd.fluxtime.clip", 'fti' : "application/vnd.anser-web-funds-transfer-initiation", 'fvt' : "video/vnd.fvt", 'fxp' : "application/vnd.adobe.fxp", 'fxpl' : "application/vnd.adobe.fxp", 'fzs' : "application/vnd.fuzzysheet", 'g2w' : "application/vnd.geoplan", 'g3' : "image/g3fax", 'g3w' : "application/vnd.geospace", 'gac' : "application/vnd.groove-account", 'gam' : "application/x-tads", 'gbr' : "application/rpki-ghostbusters", 'gca' : "application/x-gca-compressed", 'gdl' : "model/vnd.gdl", 'geo' : "application/vnd.dynageo", 'gex' : "application/vnd.geometry-explorer", 'ggb' : "application/vnd.geogebra.file", 'ggt' : "application/vnd.geogebra.tool", 'ghf' : "application/vnd.groove-help", 'gif' : "image/gif", 'gim' : "application/vnd.groove-identity-message", 'gml' : "application/gml+xml", 'gmx' : "application/vnd.gmx", 'gnumeric' : "application/x-gnumeric", 'gph' : "application/vnd.flographit", 'gpx' : "application/gpx+xml", 'gqf' : "application/vnd.grafeq", 'gqs' : "application/vnd.grafeq", 'gram' : "application/srgs", 'gramps' : "application/x-gramps-xml", 'gre' : "application/vnd.geometry-explorer", 'grv' : "application/vnd.groove-injector", 'grxml' : "application/srgs+xml", 'gsf' : "application/x-font-ghostscript", 'gtar' : "application/x-gtar", 'gtm' : "application/vnd.groove-tool-message", 'gtw' : "model/vnd.gtw", 'gv' : "text/vnd.graphviz", 'gxf' : "application/gxf", 'gxt' : "application/vnd.geonext", 'gz' : "application/x-gzip", 'h' : "text/x-c", 'h261' : "video/h261", 'h263' : "video/h263", 'h264' : "video/h264", 'hal' : "application/vnd.hal+xml", 'hbci' : "application/vnd.hbci", 'hdf' : "application/x-hdf", 'hh' : "text/x-c", 'hlp' : "application/winhlp", 'hpgl' : "application/vnd.hp-hpgl", 'hpid' : "application/vnd.hp-hpid", 'hps' : "application/vnd.hp-hps", 'hqx' : "application/mac-binhex40", 'hta' : "application/octet-stream", 'htc' : "text/html", 'htke' : "application/vnd.kenameaapp", 'htm' : "text/html", 'html' : "text/html", 'hvd' : "application/vnd.yamaha.hv-dic", 'hvp' : "application/vnd.yamaha.hv-voice", 'hvs' : "application/vnd.yamaha.hv-script", 'hx' : "text/haxe", 'hxml' : "text/haxe.hxml", 'i2g' : "application/vnd.intergeo", 'icc' : "application/vnd.iccprofile", 'ice' : "x-conference/x-cooltalk", 'icm' : "application/vnd.iccprofile", 'ico' : "image/x-icon", 'ics' : "text/calendar", 'ief' : "image/ief", 'ifb' : "text/calendar", 'ifm' : "application/vnd.shana.informed.formdata", 'iges' : "model/iges", 'igl' : "application/vnd.igloader", 'igm' : "application/vnd.insors.igm", 'igs' : "model/iges", 'igx' : "application/vnd.micrografx.igx", 'iif' : "application/vnd.shana.informed.interchange", 'imp' : "application/vnd.accpac.simply.imp", 'ims' : "application/vnd.ms-ims", 'in' : "text/plain", 'ini' : "text/plain", 'ink' : "application/inkml+xml", 'inkml' : "application/inkml+xml", 'install' : "application/x-install-instructions", 'iota' : "application/vnd.astraea-software.iota", 'ipa' : "application/octet-stream", 'ipfix' : "application/ipfix", 'ipk' : "application/vnd.shana.informed.package", 'irm' : "application/vnd.ibm.rights-management", 'irp' : "application/vnd.irepository.package+xml", 'iso' : "application/x-iso9660-image", 'itp' : "application/vnd.shana.informed.formtemplate", 'ivp' : "application/vnd.immervision-ivp", 'ivu' : "application/vnd.immervision-ivu", 'jad' : "text/vnd.sun.j2me.app-descriptor", 'jam' : "application/vnd.jam", 'jar' : "application/java-archive", 'java' : "text/x-java-source", 'jisp' : "application/vnd.jisp", 'jlt' : "application/vnd.hp-jlyt", 'jnlp' : "application/x-java-jnlp-file", 'joda' : "application/vnd.joost.joda-archive", 'jpe' : "image/jpeg", 'jpeg' : "image/jpeg", 'jpg' : "image/jpeg", 'jpgm' : "video/jpm", 'jpgv' : "video/jpeg", 'jpm' : "video/jpm", 'js' : "text/javascript", 'json' : "application/json", 'jsonml' : "application/jsonml+json", 'kar' : "audio/midi", 'karbon' : "application/vnd.kde.karbon", 'kfo' : "application/vnd.kde.kformula", 'kia' : "application/vnd.kidspiration", 'kml' : "application/vnd.google-earth.kml+xml", 'kmz' : "application/vnd.google-earth.kmz", 'kne' : "application/vnd.kinar", 'knp' : "application/vnd.kinar", 'kon' : "application/vnd.kde.kontour", 'kpr' : "application/vnd.kde.kpresenter", 'kpt' : "application/vnd.kde.kpresenter", 'kpxx' : "application/vnd.ds-keypoint", 'ksp' : "application/vnd.kde.kspread", 'ktr' : "application/vnd.kahootz", 'ktx' : "image/ktx", 'ktz' : "application/vnd.kahootz", 'kwd' : "application/vnd.kde.kword", 'kwt' : "application/vnd.kde.kword", 'lasxml' : "application/vnd.las.las+xml", 'latex' : "application/x-latex", 'lbd' : "application/vnd.llamagraphics.life-balance.desktop", 'lbe' : "application/vnd.llamagraphics.life-balance.exchange+xml", 'les' : "application/vnd.hhe.lesson-player", 'less' : "text/less", 'lha' : "application/x-lzh-compressed", 'link66' : "application/vnd.route66.link66+xml", 'list' : "text/plain", 'list3820' : "application/vnd.ibm.modcap", 'listafp' : "application/vnd.ibm.modcap", 'lnk' : "application/x-ms-shortcut", 'log' : "text/plain", 'lostxml' : "application/lost+xml", 'lrf' : "application/octet-stream", 'lrm' : "application/vnd.ms-lrm", 'ltf' : "application/vnd.frogans.ltf", 'lvp' : "audio/vnd.lucent.voice", 'lwp' : "application/vnd.lotus-wordpro", 'lz' : "application/x-lzip", 'lzh' : "application/x-lzh-compressed", 'lzma' : "application/x-lzma", 'lzo' : "application/x-lzop", 'm13' : "application/x-msmediaview", 'm14' : "application/x-msmediaview", 'm1v' : "video/mpeg", 'm21' : "application/mp21", 'm2a' : "audio/mpeg", 'm2v' : "video/mpeg", 'm3a' : "audio/mpeg", 'm3u' : "audio/x-mpegurl", 'm3u8' : "application/vnd.apple.mpegurl", 'm4a' : "audio/mp4", 'm4u' : "video/vnd.mpegurl", 'm4v' : "video/mp4", 'ma' : "application/mathematica", 'mads' : "application/mads+xml", 'mag' : "application/vnd.ecowin.chart", 'maker' : "application/vnd.framemaker", 'man' : "text/troff", 'mar' : "application/octet-stream", 'mathml' : "application/mathml+xml", 'mb' : "application/mathematica", 'mbk' : "application/vnd.mobius.mbk", 'mbox' : "application/mbox", 'mc1' : "application/vnd.medcalcdata", 'mcd' : "application/vnd.mcd", 'mcurl' : "text/vnd.curl.mcurl", 'mdb' : "application/x-msaccess", 'mdi' : "image/vnd.ms-modi", 'md' : "text/markdown", 'me' : "text/troff", 'mesh' : "model/mesh", 'meta4' : "application/metalink4+xml", 'metalink' : "application/metalink+xml", 'mets' : "application/mets+xml", 'mfm' : "application/vnd.mfmp", 'mft' : "application/rpki-manifest", 'mgp' : "application/vnd.osgeo.mapguide.package", 'mgz' : "application/vnd.proteus.magazine", 'mid' : "audio/midi", 'midi' : "audio/midi", 'mie' : "application/x-mie", 'mif' : "application/vnd.mif", 'mime' : "message/rfc822", 'mj2' : "video/mj2", 'mjp2' : "video/mj2", 'mk3d' : "video/x-matroska", 'mka' : "audio/x-matroska", 'mks' : "video/x-matroska", 'mkv' : "video/x-matroska", 'mlp' : "application/vnd.dolby.mlp", 'mmd' : "application/vnd.chipnuts.karaoke-mmd", 'mmf' : "application/vnd.smaf", 'mmr' : "image/vnd.fujixerox.edmics-mmr", 'mng' : "video/x-mng", 'mny' : "application/x-msmoney", 'mobi' : "application/x-mobipocket-ebook", 'mods' : "application/mods+xml", 'mov' : "video/quicktime", 'movie' : "video/x-sgi-movie", 'mp2' : "audio/mpeg", 'mp21' : "application/mp21", 'mp2a' : "audio/mpeg", 'mp3' : "audio/mpeg", 'mp4' : "video/mp4", 'mp4a' : "audio/mp4", 'mp4s' : "application/mp4", 'mp4v' : "video/mp4", 'mpc' : "application/vnd.mophun.certificate", 'mpe' : "video/mpeg", 'mpeg' : "video/mpeg", 'mpg' : "video/mpeg", 'mpg4' : "video/mp4", 'mpga' : "audio/mpeg", 'mpkg' : "application/vnd.apple.installer+xml", 'mpm' : "application/vnd.blueice.multipass", 'mpn' : "application/vnd.mophun.application", 'mpp' : "application/vnd.ms-project", 'mpt' : "application/vnd.ms-project", 'mpy' : "application/vnd.ibm.minipay", 'mqy' : "application/vnd.mobius.mqy", 'mrc' : "application/marc", 'mrcx' : "application/marcxml+xml", 'ms' : "text/troff", 'mscml' : "application/mediaservercontrol+xml", 'mseed' : "application/vnd.fdsn.mseed", 'mseq' : "application/vnd.mseq", 'msf' : "application/vnd.epson.msf", 'msh' : "model/mesh", 'msi' : "application/x-msdownload", 'msl' : "application/vnd.mobius.msl", 'msty' : "application/vnd.muvee.style", 'mts' : "model/vnd.mts", 'mus' : "application/vnd.musician", 'musicxml' : "application/vnd.recordare.musicxml+xml", 'mvb' : "application/x-msmediaview", 'mwf' : "application/vnd.mfer", 'mxf' : "application/mxf", 'mxl' : "application/vnd.recordare.musicxml", 'mxml' : "application/xv+xml", 'mxs' : "application/vnd.triscape.mxs", 'mxu' : "video/vnd.mpegurl", 'n-gage' : "application/vnd.nokia.n-gage.symbian.install", 'n3' : "text/n3", 'nb' : "application/mathematica", 'nbp' : "application/vnd.wolfram.player", 'nc' : "application/x-netcdf", 'ncx' : "application/x-dtbncx+xml", 'nfo' : "text/x-nfo", 'ngdat' : "application/vnd.nokia.n-gage.data", 'nitf' : "application/vnd.nitf", 'nlu' : "application/vnd.neurolanguage.nlu", 'nml' : "application/vnd.enliven", 'nnd' : "application/vnd.noblenet-directory", 'nns' : "application/vnd.noblenet-sealer", 'nnw' : "application/vnd.noblenet-web", 'npx' : "image/vnd.net-fpx", 'nsc' : "application/x-conference", 'nsf' : "application/vnd.lotus-notes", 'ntf' : "application/vnd.nitf", 'nzb' : "application/x-nzb", 'oa2' : "application/vnd.fujitsu.oasys2", 'oa3' : "application/vnd.fujitsu.oasys3", 'oas' : "application/vnd.fujitsu.oasys", 'obd' : "application/x-msbinder", 'obj' : "application/x-tgif", 'oda' : "application/oda", 'odb' : "application/vnd.oasis.opendocument.database", 'odc' : "application/vnd.oasis.opendocument.chart", 'odf' : "application/vnd.oasis.opendocument.formula", 'odft' : "application/vnd.oasis.opendocument.formula-template", 'odg' : "application/vnd.oasis.opendocument.graphics", 'odi' : "application/vnd.oasis.opendocument.image", 'odm' : "application/vnd.oasis.opendocument.text-master", 'odp' : "application/vnd.oasis.opendocument.presentation", 'ods' : "application/vnd.oasis.opendocument.spreadsheet", 'odt' : "application/vnd.oasis.opendocument.text", 'oga' : "audio/ogg", 'ogg' : "audio/ogg", 'ogv' : "video/ogg", 'ogx' : "application/ogg", 'omdoc' : "application/omdoc+xml", 'onepkg' : "application/onenote", 'onetmp' : "application/onenote", 'onetoc' : "application/onenote", 'onetoc2' : "application/onenote", 'opf' : "application/oebps-package+xml", 'opml' : "text/x-opml", 'oprc' : "application/vnd.palm", 'org' : "application/vnd.lotus-organizer", 'osf' : "application/vnd.yamaha.openscoreformat", 'osfpvg' : "application/vnd.yamaha.openscoreformat.osfpvg+xml", 'otc' : "application/vnd.oasis.opendocument.chart-template", 'otf' : "application/x-font-otf", 'otg' : "application/vnd.oasis.opendocument.graphics-template", 'oth' : "application/vnd.oasis.opendocument.text-web", 'oti' : "application/vnd.oasis.opendocument.image-template", 'otp' : "application/vnd.oasis.opendocument.presentation-template", 'ots' : "application/vnd.oasis.opendocument.spreadsheet-template", 'ott' : "application/vnd.oasis.opendocument.text-template", 'oxps' : "application/oxps", 'oxt' : "application/vnd.openofficeorg.extension", 'p' : "text/x-pascal", 'py' : "application/python", 'p10' : "application/pkcs10", 'p12' : "application/x-pkcs12", 'p7b' : "application/x-pkcs7-certificates", 'p7c' : "application/pkcs7-mime", 'p7m' : "application/pkcs7-mime", 'p7r' : "application/x-pkcs7-certreqresp", 'p7s' : "application/pkcs7-signature", 'p8' : "application/pkcs8", 'pas' : "text/x-pascal", 'paw' : "application/vnd.pawaafile", 'pbd' : "application/vnd.powerbuilder6", 'pbm' : "image/x-portable-bitmap", 'pcap' : "application/vnd.tcpdump.pcap", 'pcf' : "application/x-font-pcf", 'pcl' : "application/vnd.hp-pcl", 'pclxl' : "application/vnd.hp-pclxl", 'pct' : "image/x-pict", 'pcurl' : "application/vnd.curl.pcurl", 'pcx' : "image/x-pcx", 'pdb' : "application/vnd.palm", 'pdf' : "application/pdf", 'pfa' : "application/x-font-type1", 'pfb' : "application/x-font-type1", 'pfm' : "application/x-font-type1", 'pfr' : "application/font-tdpfr", 'pfx' : "application/x-pkcs12", 'pgm' : "image/x-portable-graymap", 'pgn' : "application/x-chess-pgn", 'pgp' : "application/pgp-encrypted", 'phar' : "application/octet-stream", 'php' : "text/plain", 'phps' : "application/x-httpd-phps", 'pic' : "image/x-pict", 'pkg' : "application/octet-stream", 'pki' : "application/pkixcmp", 'pkipath' : "application/pkix-pkipath", 'plb' : "application/vnd.3gpp.pic-bw-large", 'plc' : "application/vnd.mobius.plc", 'plf' : "application/vnd.pocketlearn", 'plist' : "application/x-plist", 'pls' : "application/pls+xml", 'pml' : "application/vnd.ctc-posml", 'png' : "image/png", 'pnm' : "image/x-portable-anymap", 'portpkg' : "application/vnd.macports.portpkg", 'pot' : "application/vnd.ms-powerpoint", 'potm' : "application/vnd.ms-powerpoint.template.macroenabled.12", 'potx' : "application/vnd.openxmlformats-officedocument.presentationml.template", 'ppam' : "application/vnd.ms-powerpoint.addin.macroenabled.12", 'ppd' : "application/vnd.cups-ppd", 'ppm' : "image/x-portable-pixmap", 'pps' : "application/vnd.ms-powerpoint", 'ppsm' : "application/vnd.ms-powerpoint.slideshow.macroenabled.12", 'ppsx' : "application/vnd.openxmlformats-officedocument.presentationml.slideshow", 'ppt' : "application/vnd.ms-powerpoint", 'pptm' : "application/vnd.ms-powerpoint.presentation.macroenabled.12", 'pptx' : "application/vnd.openxmlformats-officedocument.presentationml.presentation", 'pqa' : "application/vnd.palm", 'prc' : "application/x-mobipocket-ebook", 'pre' : "application/vnd.lotus-freelance", 'prf' : "application/pics-rules", 'ps' : "application/postscript", 'psb' : "application/vnd.3gpp.pic-bw-small", 'psd' : "image/vnd.adobe.photoshop", 'psf' : "application/x-font-linux-psf", 'pskcxml' : "application/pskc+xml", 'ptid' : "application/vnd.pvi.ptid1", 'pub' : "application/x-mspublisher", 'pvb' : "application/vnd.3gpp.pic-bw-var", 'pwn' : "application/vnd.3m.post-it-notes", 'pya' : "audio/vnd.ms-playready.media.pya", 'pyv' : "video/vnd.ms-playready.media.pyv", 'qam' : "application/vnd.epson.quickanime", 'qbo' : "application/vnd.intu.qbo", 'qfx' : "application/vnd.intu.qfx", 'qps' : "application/vnd.publishare-delta-tree", 'qt' : "video/quicktime", 'qwd' : "application/vnd.quark.quarkxpress", 'qwt' : "application/vnd.quark.quarkxpress", 'qxb' : "application/vnd.quark.quarkxpress", 'qxd' : "application/vnd.quark.quarkxpress", 'qxl' : "application/vnd.quark.quarkxpress", 'qxt' : "application/vnd.quark.quarkxpress", 'ra' : "audio/x-pn-realaudio", 'ram' : "audio/x-pn-realaudio", 'rar' : "application/x-rar-compressed", 'ras' : "image/x-cmu-raster", 'rb' : "text/plain", 'rcprofile' : "application/vnd.ipunplugged.rcprofile", 'rdf' : "application/rdf+xml", 'rdz' : "application/vnd.data-vision.rdz", 'rep' : "application/vnd.businessobjects", 'res' : "application/x-dtbresource+xml", 'resx' : "text/xml", 'rgb' : "image/x-rgb", 'rif' : "application/reginfo+xml", 'rip' : "audio/vnd.rip", 'ris' : "application/x-research-info-systems", 'rl' : "application/resource-lists+xml", 'rlc' : "image/vnd.fujixerox.edmics-rlc", 'rld' : "application/resource-lists-diff+xml", 'rm' : "application/vnd.rn-realmedia", 'rmi' : "audio/midi", 'rmp' : "audio/x-pn-realaudio-plugin", 'rms' : "application/vnd.jcp.javame.midlet-rms", 'rmvb' : "application/vnd.rn-realmedia-vbr", 'rnc' : "application/relax-ng-compact-syntax", 'roa' : "application/rpki-roa", 'roff' : "text/troff", 'rp9' : "application/vnd.cloanto.rp9", 'rpm' : "application/x-rpm", 'rpss' : "application/vnd.nokia.radio-presets", 'rpst' : "application/vnd.nokia.radio-preset", 'rq' : "application/sparql-query", 'rs' : "application/rls-services+xml", 'rsd' : "application/rsd+xml", 'rss' : "application/rss+xml", 'rtf' : "application/rtf", 'rtx' : "text/richtext", 's' : "text/x-asm", 's3m' : "audio/s3m", 's7z' : "application/x-7z-compressed", 'saf' : "application/vnd.yamaha.smaf-audio", 'safariextz' : "application/octet-stream", 'sass' : "text/x-sass", 'sbml' : "application/sbml+xml", 'sc' : "application/vnd.ibm.secure-container", 'scd' : "application/x-msschedule", 'scm' : "application/vnd.lotus-screencam", 'scq' : "application/scvp-cv-request", 'scs' : "application/scvp-cv-response", 'scss' : "text/x-scss", 'scurl' : "text/vnd.curl.scurl", 'sda' : "application/vnd.stardivision.draw", 'sdc' : "application/vnd.stardivision.calc", 'sdd' : "application/vnd.stardivision.impress", 'sdkd' : "application/vnd.solent.sdkm+xml", 'sdkm' : "application/vnd.solent.sdkm+xml", 'sdp' : "application/sdp", 'sdw' : "application/vnd.stardivision.writer", 'see' : "application/vnd.seemail", 'seed' : "application/vnd.fdsn.seed", 'sema' : "application/vnd.sema", 'semd' : "application/vnd.semd", 'semf' : "application/vnd.semf", 'ser' : "application/java-serialized-object", 'setpay' : "application/set-payment-initiation", 'setreg' : "application/set-registration-initiation", 'sfd-hdstx' : "application/vnd.hydrostatix.sof-data", 'sfs' : "application/vnd.spotfire.sfs", 'sfv' : "text/x-sfv", 'sgi' : "image/sgi", 'sgl' : "application/vnd.stardivision.writer-global", 'sgm' : "text/sgml", 'sgml' : "text/sgml", 'sh' : "application/x-sh", 'shar' : "application/x-shar", 'shf' : "application/shf+xml", 'sid' : "image/x-mrsid-image", 'sig' : "application/pgp-signature", 'sil' : "audio/silk", 'silo' : "model/mesh", 'sis' : "application/vnd.symbian.install", 'sisx' : "application/vnd.symbian.install", 'sit' : "application/x-stuffit", 'sitx' : "application/x-stuffitx", 'skd' : "application/vnd.koan", 'skm' : "application/vnd.koan", 'skp' : "application/vnd.koan", 'skt' : "application/vnd.koan", 'sldm' : "application/vnd.ms-powerpoint.slide.macroenabled.12", 'sldx' : "application/vnd.openxmlformats-officedocument.presentationml.slide", 'slt' : "application/vnd.epson.salt", 'sm' : "application/vnd.stepmania.stepchart", 'smf' : "application/vnd.stardivision.math", 'smi' : "application/smil+xml", 'smil' : "application/smil+xml", 'smv' : "video/x-smv", 'smzip' : "application/vnd.stepmania.package", 'snd' : "audio/basic", 'snf' : "application/x-font-snf", 'so' : "application/octet-stream", 'spc' : "application/x-pkcs7-certificates", 'spf' : "application/vnd.yamaha.smaf-phrase", 'spl' : "application/x-futuresplash", 'spot' : "text/vnd.in3d.spot", 'spp' : "application/scvp-vp-response", 'spq' : "application/scvp-vp-request", 'spx' : "audio/ogg", 'sql' : "application/x-sql", 'src' : "application/x-wais-source", 'srt' : "application/x-subrip", 'sru' : "application/sru+xml", 'srx' : "application/sparql-results+xml", 'ssdl' : "application/ssdl+xml", 'sse' : "application/vnd.kodak-descriptor", 'ssf' : "application/vnd.epson.ssf", 'ssml' : "application/ssml+xml", 'st' : "application/vnd.sailingtracker.track", 'stc' : "application/vnd.sun.xml.calc.template", 'std' : "application/vnd.sun.xml.draw.template", 'stf' : "application/vnd.wt.stf", 'sti' : "application/vnd.sun.xml.impress.template", 'stk' : "application/hyperstudio", 'stl' : "application/vnd.ms-pki.stl", 'str' : "application/vnd.pg.format", 'stw' : "application/vnd.sun.xml.writer.template", 'styl' : "text/x-styl", 'sub' : "image/vnd.dvb.subtitle", 'sus' : "application/vnd.sus-calendar", 'susp' : "application/vnd.sus-calendar", 'sv4cpio' : "application/x-sv4cpio", 'sv4crc' : "application/x-sv4crc", 'svc' : "application/vnd.dvb.service", 'svd' : "application/vnd.svd", 'svg' : "image/svg+xml", 'svgz' : "image/svg+xml", 'swa' : "application/x-director", 'swf' : "application/x-shockwave-flash", 'swi' : "application/vnd.aristanetworks.swi", 'sxc' : "application/vnd.sun.xml.calc", 'sxd' : "application/vnd.sun.xml.draw", 'sxg' : "application/vnd.sun.xml.writer.global", 'sxi' : "application/vnd.sun.xml.impress", 'sxm' : "application/vnd.sun.xml.math", 'sxw' : "application/vnd.sun.xml.writer", 't' : "text/troff", 't3' : "application/x-t3vm-image", 'taglet' : "application/vnd.mynfc", 'tao' : "application/vnd.tao.intent-module-archive", 'tar' : "application/x-tar", 'tcap' : "application/vnd.3gpp2.tcap", 'tcl' : "application/x-tcl", 'teacher' : "application/vnd.smart.teacher", 'tei' : "application/tei+xml", 'teicorpus' : "application/tei+xml", 'tex' : "application/x-tex", 'texi' : "application/x-texinfo", 'texinfo' : "application/x-texinfo", 'text' : "text/plain", 'tfi' : "application/thraud+xml", 'tfm' : "application/x-tex-tfm", 'tga' : "image/x-tga", 'tgz' : "application/x-gzip", 'thmx' : "application/vnd.ms-officetheme", 'tif' : "image/tiff", 'tiff' : "image/tiff", 'tmo' : "application/vnd.tmobile-livetv", 'torrent' : "application/x-bittorrent", 'tpl' : "application/vnd.groove-tool-template", 'tpt' : "application/vnd.trid.tpt", 'tr' : "text/troff", 'tra' : "application/vnd.trueapp", 'trm' : "application/x-msterminal", 'tsd' : "application/timestamped-data", 'tsv' : "text/tab-separated-values", 'ttc' : "application/x-font-ttf", 'ttf' : "application/x-font-ttf", 'ttl' : "text/turtle", 'twd' : "application/vnd.simtech-mindmapper", 'twds' : "application/vnd.simtech-mindmapper", 'txd' : "application/vnd.genomatix.tuxedo", 'txf' : "application/vnd.mobius.txf", 'txt' : "text/plain", 'u32' : "application/x-authorware-bin", 'udeb' : "application/x-debian-package", 'ufd' : "application/vnd.ufdl", 'ufdl' : "application/vnd.ufdl", 'ulx' : "application/x-glulx", 'umj' : "application/vnd.umajin", 'unityweb' : "application/vnd.unity", 'uoml' : "application/vnd.uoml+xml", 'uri' : "text/uri-list", 'uris' : "text/uri-list", 'urls' : "text/uri-list", 'ustar' : "application/x-ustar", 'utz' : "application/vnd.uiq.theme", 'uu' : "text/x-uuencode", 'uva' : "audio/vnd.dece.audio", 'uvd' : "application/vnd.dece.data", 'uvf' : "application/vnd.dece.data", 'uvg' : "image/vnd.dece.graphic", 'uvh' : "video/vnd.dece.hd", 'uvi' : "image/vnd.dece.graphic", 'uvm' : "video/vnd.dece.mobile", 'uvp' : "video/vnd.dece.pd", 'uvs' : "video/vnd.dece.sd", 'uvt' : "application/vnd.dece.ttml+xml", 'uvu' : "video/vnd.uvvu.mp4", 'uvv' : "video/vnd.dece.video", 'uvva' : "audio/vnd.dece.audio", 'uvvd' : "application/vnd.dece.data", 'uvvf' : "application/vnd.dece.data", 'uvvg' : "image/vnd.dece.graphic", 'uvvh' : "video/vnd.dece.hd", 'uvvi' : "image/vnd.dece.graphic", 'uvvm' : "video/vnd.dece.mobile", 'uvvp' : "video/vnd.dece.pd", 'uvvs' : "video/vnd.dece.sd", 'uvvt' : "application/vnd.dece.ttml+xml", 'uvvu' : "video/vnd.uvvu.mp4", 'uvvv' : "video/vnd.dece.video", 'uvvx' : "application/vnd.dece.unspecified", 'uvvz' : "application/vnd.dece.zip", 'uvx' : "application/vnd.dece.unspecified", 'uvz' : "application/vnd.dece.zip", 'vcard' : "text/vcard", 'vcd' : "application/x-cdlink", 'vcf' : "text/x-vcard", 'vcg' : "application/vnd.groove-vcard", 'vcs' : "text/x-vcalendar", 'vcx' : "application/vnd.vcx", 'vis' : "application/vnd.visionary", 'viv' : "video/vnd.vivo", 'vob' : "video/x-ms-vob", 'vor' : "application/vnd.stardivision.writer", 'vox' : "application/x-authorware-bin", 'vrml' : "model/vrml", 'vsd' : "application/vnd.visio", 'vsf' : "application/vnd.vsf", 'vss' : "application/vnd.visio", 'vst' : "application/vnd.visio", 'vsw' : "application/vnd.visio", 'vtu' : "model/vnd.vtu", 'vxml' : "application/voicexml+xml", 'w3d' : "application/x-director", 'wad' : "application/x-doom", 'wav' : "audio/x-wav", 'wax' : "audio/x-ms-wax", 'wbmp' : "image/vnd.wap.wbmp", 'wbs' : "application/vnd.criticaltools.wbs+xml", 'wbxml' : "application/vnd.wap.wbxml", 'wcm' : "application/vnd.ms-works", 'wdb' : "application/vnd.ms-works", 'wdp' : "image/vnd.ms-photo", 'weba' : "audio/webm", 'webm' : "video/webm", 'webp' : "image/webp", 'wg' : "application/vnd.pmi.widget", 'wgt' : "application/widget", 'wks' : "application/vnd.ms-works", 'wm' : "video/x-ms-wm", 'wma' : "audio/x-ms-wma", 'wmd' : "application/x-ms-wmd", 'wmf' : "application/x-msmetafile", 'wml' : "text/vnd.wap.wml", 'wmlc' : "application/vnd.wap.wmlc", 'wmls' : "text/vnd.wap.wmlscript", 'wmlsc' : "application/vnd.wap.wmlscriptc", 'wmv' : "video/x-ms-wmv", 'wmx' : "video/x-ms-wmx", 'wmz' : "application/x-ms-wmz", 'woff' : "application/x-font-woff", 'wpd' : "application/vnd.wordperfect", 'wpl' : "application/vnd.ms-wpl", 'wps' : "application/vnd.ms-works", 'wqd' : "application/vnd.wqd", 'wri' : "application/x-mswrite", 'wrl' : "model/vrml", 'wsdl' : "application/wsdl+xml", 'wspolicy' : "application/wspolicy+xml", 'wtb' : "application/vnd.webturbo", 'wvx' : "video/x-ms-wvx", 'x32' : "application/x-authorware-bin", 'x3d' : "model/x3d+xml", 'x3db' : "model/x3d+binary", 'x3dbz' : "model/x3d+binary", 'x3dv' : "model/x3d+vrml", 'x3dvz' : "model/x3d+vrml", 'x3dz' : "model/x3d+xml", 'xaml' : "application/xaml+xml", 'xap' : "application/x-silverlight-app", 'xar' : "application/vnd.xara", 'xbap' : "application/x-ms-xbap", 'xbd' : "application/vnd.fujixerox.docuworks.binder", 'xbm' : "image/x-xbitmap", 'xdf' : "application/xcap-diff+xml", 'xdm' : "application/vnd.syncml.dm+xml", 'xdp' : "application/vnd.adobe.xdp+xml", 'xdssc' : "application/dssc+xml", 'xdw' : "application/vnd.fujixerox.docuworks", 'xenc' : "application/xenc+xml", 'xer' : "application/patch-ops-error+xml", 'xfdf' : "application/vnd.adobe.xfdf", 'xfdl' : "application/vnd.xfdl", 'xht' : "application/xhtml+xml", 'xhtml' : "application/xhtml+xml", 'xhvml' : "application/xv+xml", 'xif' : "image/vnd.xiff", 'xla' : "application/vnd.ms-excel", 'xlam' : "application/vnd.ms-excel.addin.macroenabled.12", 'xlc' : "application/vnd.ms-excel", 'xlf' : "application/x-xliff+xml", 'xlm' : "application/vnd.ms-excel", 'xls' : "application/vnd.ms-excel", 'xlsb' : "application/vnd.ms-excel.sheet.binary.macroenabled.12", 'xlsm' : "application/vnd.ms-excel.sheet.macroenabled.12", 'xlsx' : "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", 'xlt' : "application/vnd.ms-excel", 'xltm' : "application/vnd.ms-excel.template.macroenabled.12", 'xltx' : "application/vnd.openxmlformats-officedocument.spreadsheetml.template", 'xlw' : "application/vnd.ms-excel", 'xm' : "audio/xm", 'xml' : "application/xml", 'xo' : "application/vnd.olpc-sugar", 'xop' : "application/xop+xml", 'xpi' : "application/x-xpinstall", 'xpl' : "application/xproc+xml", 'xpm' : "image/x-xpixmap", 'xpr' : "application/vnd.is-xpr", 'xps' : "application/vnd.ms-xpsdocument", 'xpw' : "application/vnd.intercon.formnet", 'xpx' : "application/vnd.intercon.formnet", 'xsl' : "application/xml", 'xslt' : "application/xslt+xml", 'xsm' : "application/vnd.syncml+xml", 'xspf' : "application/xspf+xml", 'xul' : "application/vnd.mozilla.xul+xml", 'xvm' : "application/xv+xml", 'xvml' : "application/xv+xml", 'xwd' : "image/x-xwindowdump", 'xyz' : "chemical/x-xyz", 'xz' : "application/x-xz", 'yaml' : "text/yaml", 'yang' : "application/yang", 'yin' : "application/yin+xml", 'yml' : "text/yaml", 'z' : "application/x-compress", 'z1' : "application/x-zmachine", 'z2' : "application/x-zmachine", 'z3' : "application/x-zmachine", 'z4' : "application/x-zmachine", 'z5' : "application/x-zmachine", 'z6' : "application/x-zmachine", 'z7' : "application/x-zmachine", 'z8' : "application/x-zmachine", 'zaz' : "application/vnd.zzazz.deck+xml", 'zip' : "application/zip", 'zir' : "application/vnd.zul", 'zirz' : "application/vnd.zul", 'zmm' : "application/vnd.handheld-entertainment+xml", '123' : "application/vnd.lotus-1-2-3"};
PlayerPage.main();
})(typeof console != "undefined" ? console : {log:function(){}}, typeof window != "undefined" ? window : exports);
